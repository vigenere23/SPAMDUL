{
	"info": {
		"_postman_id": "4ce3c375-70ae-494e-80f3-82b847034450",
		"name": "SPAMD-UL",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Server is up",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b9283329-ee27-44c4-9b87-ef3c73d9071b",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "f52a9e2d-b5db-41a4-863b-218453d5bc8c",
						"exec": [
							"const today = new Date()",
							"const yesterday = new Date()",
							"const tomorrow = new Date()",
							"",
							"yesterday.setDate(today.getDate() - 1)",
							"tomorrow.setDate(today.getDate() + 1)",
							"",
							"pm.collectionVariables.set(\"weekday\", today.toLocaleDateString('en-US', {weekday: 'long'}).toLowerCase())",
							"",
							"pm.collectionVariables.set(\"today\", `${today.getFullYear()}-${today.getMonth()+1}-${today.getDate()}`)",
							"pm.collectionVariables.set(\"yesterday\", `${yesterday.getFullYear()}-${yesterday.getMonth()+1}-${yesterday.getDate()}`)",
							"pm.collectionVariables.set(\"tomorrow\", `${tomorrow.getFullYear()}-${tomorrow.getMonth()+1}-${tomorrow.getDate()}`)",
							"",
							"pm.collectionVariables.set(\"parkingZone\", \"ZonE_3\")",
							"pm.collectionVariables.set(\"parkingZone_2\", \"zONe_2\")",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/ping",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"ping"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buy campus access (single day per week per semester)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c81650b2-67e1-4db9-9e7e-fe8a4dcbd98e",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['campusAccessCode']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b644b114-0c52-405b-9d11-e4e9a501b652",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"user\": {\n\t    \"name\": \"Bob Ross\",\n\t    \"birthDate\": \"1991-07-10\",\n\t    \"gender\": \"MaLe\"\n    },\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licensePlate\": \"123 456\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"{{weekday}}\"\n    }\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": [
				{
					"name": "Buy campus access",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": {\n\t    \"name\": \"Bob Ross\",\n\t    \"birthDate\": \"1991-07-10\",\n\t    \"gender\": \"MaLe\"\n    },\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licencePlate\": \"xxx xxx\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"monday\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campus-access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campus-access"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:50:55 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccessCode\": \"1\"\n}"
				}
			]
		},
		{
			"name": "Buy campus access (single day per week per semester) Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0387dc54-4a09-403e-a406-df172362b681",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['campusAccessCode']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"user\": {\n\t    \"name\": \"Bob Ross\",\n\t    \"birthDate\": \"1991-07-10\",\n\t    \"gender\": \"MaLe\"\n    },\n    \"car\" : {\n        \"type\": \"gourmande\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licencePlate\": \"xxx xxx\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"{{weekday}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buy campus access (single day per week per semester) Copy 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "22d43ffc-e235-465b-b9e0-7c3571e8dfde",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['campusAccessCode']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"user\": {\n\t    \"name\": \"Bob Ross\",\n\t    \"birthDate\": \"1991-07-10\",\n\t    \"gender\": \"MaLe\"\n    },\n    \"car\" : {\n        \"type\": \"super_economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licencePlate\": \"xxx xxx\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"{{weekday}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buy campus access (two semesters)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b35ea9d2-a759-48df-9c9d-6b65e29ceb0a",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['campusAccessCode']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"user\": {\n\t    \"name\": \"Bob Ross\",\n\t    \"birthDate\": \"1991-07-10\",\n\t    \"gender\": \"MaLe\"\n    },\n    \"car\" : {\n        \"type\": \"gourmande\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licencePlate\": \"xxx xxx\"\n    },\n    \"period\": {\n        \"type\": \"two_semesters\",\n        \"semester\": \"a2020\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buy campus access (two semesters) Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "215bcd89-e3f2-4b2f-bf63-4f0900cc5975",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['campusAccessCode']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"user\": {\n\t    \"name\": \"Bob Ross\",\n\t    \"birthDate\": \"1991-07-10\",\n\t    \"gender\": \"MaLe\"\n    },\n    \"car\" : {\n        \"type\": \"gourmande\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licencePlate\": \"xxx xxx\"\n    },\n    \"period\": {\n        \"type\": \"two_semesters\",\n        \"semester\": \"a2020\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buy pass postal with line2 (single day per week per semester)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e7dbdfc7-7983-4e1f-b177-9dc992d1badb",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"body is empty\", function () {",
							"    pm.expect(pm.response.body).to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"parkingZone\": \"{{parkingZone}}\",\n    \"campusAccessCode\": \"1\",\n    \"delivery\": {\n        \"deliveryMode\": \"post\",\n        \"postalAddress\": {\n            \"name\": \"Harry Potter\",\n            \"line1\": \"4 Privet Drive\",\n            \"line2\": \"In the cupboard under the stairs\",\n            \"city\": \"Little Whinging\",\n            \"province\": \"Surrey\",\n            \"postalCode\": \"N0L 1R0\",\n            \"country\": \"England\"\n        }\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"{{weekday}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/pass",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"pass"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buy pass postal with line2 (one semester)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "937b6783-9d89-4ce0-90b5-7003aba82ad2",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"body is empty\", function () {",
							"    pm.expect(pm.response.body).to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"parkingZone\": \"{{parkingZone}}\",\n    \"campusAccessCode\": \"4\",\n    \"delivery\": {\n        \"deliveryMode\": \"post\",\n        \"postalAddress\": {\n            \"name\": \"Harry Potter\",\n            \"line1\": \"4 Privet Drive\",\n            \"line2\": \"In the cupboard under the stairs\",\n            \"city\": \"Little Whinging\",\n            \"province\": \"Surrey\",\n            \"postalCode\": \"N0L 1R0\",\n            \"country\": \"England\"\n        }\n    },\n    \"period\": {\n        \"type\": \"one_semester\",\n        \"semester\": \"a2020\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/pass",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"pass"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buy pass postal without line2 (single day per week per semester)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4e6f0f5e-bcdf-48ea-b116-618eae756cfd",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"body is empty\", function () {",
							"    pm.expect(pm.response.body).to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"parkingZone\": \"{{parkingZone}}\",\n    \"campusAccessCode\": \"2\",\n    \"delivery\": {\n        \"deliveryMode\": \"post\",\n        \"postalAddress\": {\n            \"name\": \"Harry Potter\",\n            \"line1\": \"4 Privet Drive\",\n            \"city\": \"Little Whinging\",\n            \"province\": \"Surrey\",\n            \"postalCode\": \"N0L 1R0\",\n            \"country\": \"England\"\n        }\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"{{weekday}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/pass",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"pass"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buy pass email (single day per week per semester)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "34e1a7d8-d855-418f-867e-2fe5ff808f2e",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"body is empty\", function () {",
							"    pm.expect(pm.response.body).to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"parkingZone\": \"{{parkingZone}}\",\n    \"campusAccessCode\": \"3\",\n    \"delivery\": {\n\t    \"deliveryMode\": \"email\",\n\t    \"emailAddress\": \"example@example.com\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"{{weekday}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/pass",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"pass"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buy pass ssp office (two semesters)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d2615b32-6812-44b5-88ed-0e15c8161f4b",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"body is empty\", function () {",
							"    pm.expect(pm.response.body).to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"parkingZone\": \"{{parkingZone}}\",\n    \"campusAccessCode\": \"5\",\n    \"delivery\": {\n\t    \"deliveryMode\": \"ssp_office\"\n    },\n    \"period\": {\n        \"type\": \"two_semesters\",\n        \"semester\": \"a2020\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/pass",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"pass"
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid buy pass (wrong access code)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "829b21f3-5664-47ed-a225-ac6c776d3caa",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Error is 'ACCESS_NOT_FOUND'\", function () {",
							"    pm.expect(pm.response.json()['error']).to.eql('ACCESS_NOT_FOUND')",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"parkingZone\": \"ZONE_3\",\n    \"campusAccessCode\": \"592386487234\",\n    \"delivery\": {\n\t    \"deliveryMode\": \"email\",\n\t    \"emailAddress\": \"sebastien.nantel03@gmail.com\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"tuesday\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/pass",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"pass"
					]
				}
			},
			"response": [
				{
					"name": "Invalid buy pass (wrong access code)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"parkingZone\": \"ZONE_3\",\n    \"campusAccessCode\": \"5\",\n    \"deliveryInfos\": {\n\t    \"deliveryMode\": \"email\",\n\t    \"emailAddress\": \"sebastien.nantel03@gmail.com\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"tuesday\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/sale/",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"sale",
								""
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:51:37 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "71"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"ACCESS_NOT_FOUND\",\n    \"description\": \"No campus access with id 5\"\n}"
				}
			]
		},
		{
			"name": "Accessing campus with access code",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8f9fa410-f713-4794-b400-85a22be9a72f",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Access is 'GRANTED'\", function () {",
							"    pm.expect(pm.response.json()['access']).to.eql('GRANTED')",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"campusAccessCode\": \"1\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access/access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access",
						"access"
					]
				}
			},
			"response": [
				{
					"name": "Accessing campus",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"campusAccessCode\": \"2\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campusaccess/access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campusaccess",
								"access"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:24:21 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"access\": \"NOT GRANTED\"\n}"
				},
				{
					"name": "Accessing campus",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"campusAccessCode\": \"1\",\n   \"accessingCampusDate\": \"2020-10-01\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campusaccess/access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campusaccess",
								"access"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 01 Oct 2020 17:40:41 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "20"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"access\": \"GRANTED\"\n}"
				}
			]
		},
		{
			"name": "Accessing campus with license plate",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e528ac9a-1ee7-4f88-8ffd-f29ebff35ec2",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Access is 'GRANTED'\", function () {",
							"    pm.expect(pm.response.json()['access']).to.eql('GRANTED')",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"licensePlate\": \"123 456\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access/access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access",
						"access"
					]
				}
			},
			"response": [
				{
					"name": "Accessing campus",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"campusAccessCode\": \"1\",\n   \"accessingCampusDate\": \"2020-10-01\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campusaccess/access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campusaccess",
								"access"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 01 Oct 2020 17:40:41 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "20"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"access\": \"GRANTED\"\n}"
				},
				{
					"name": "Accessing campus",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"campusAccessCode\": \"2\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campusaccess/access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campusaccess",
								"access"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:24:21 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"access\": \"NOT GRANTED\"\n}"
				}
			]
		},
		{
			"name": "Invalid accessing campus (inexistant campus access code)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f6f50dda-cf6f-460c-bc66-8122ab8747e9",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Access is 'NOT GRANTED'\", function () {",
							"    pm.expect(pm.response.json()['access']).to.eql('NOT GRANTED')",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"campusAccessCode\": \"5324629384\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access/access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access",
						"access"
					]
				}
			},
			"response": [
				{
					"name": "Ivanlid accessing campus (wrong code)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"campusAccessCode\": \"5\",\n   \"accessingCampusDate\": \"2020-10-02\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campusaccess/access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campusaccess",
								"access"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 01 Oct 2020 17:40:08 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"access\": \"NOT GRANTED\"\n}"
				}
			]
		},
		{
			"name": "Usage report summary no login error",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d7b042d5-b9fe-42f0-be74-7f17861b5940",
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Set",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					]
				},
				"description": "Il est possible de faire n'importe quel combinaison de query params. Si le startDate n'est pas fournis la date par défaut est le premier du mois courant, si le endDate n'est pas founis la date par défaut est la journée courante, si la zone n'est pas fournis on considère toutes les zone."
			},
			"response": [
				{
					"name": "Usage report (summary)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/usage-report/summary",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"usage-report",
								"summary"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 01 Oct 2020 17:40:44 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "96"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"meanUsagePerDay\": 2,\n    \"mostPopularMonthDate\": \"2020-10-01\",\n    \"leastPopularMonthDate\": \"2020-10-01\"\n}"
				}
			]
		},
		{
			"name": "infraction no login error",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dbf56dd2-46e1-4798-b7de-22e46abb1504",
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"passCode\": \"1\",\n    \"parkingZone\": \"{{parkingZone_2}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/infractions",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"infractions"
					]
				}
			},
			"response": [
				{
					"name": "infraction zone",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"passCode\": \"1\",\n    \"parkingZone\": \"zone_1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/infractions",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"infractions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:26:38 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "76"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"infractionId\": \"2\",\n    \"code\": \"ZONE_01\",\n    \"reason\": \"mauvaise zone\",\n    \"amount\": 55\n}"
				}
			]
		},
		{
			"name": "Get initiatives no login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9f678865-6c43-476b-b903-1b99b7bd7c93",
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/fundraising/initiatives",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"fundraising",
						"initiatives"
					]
				}
			},
			"response": [
				{
					"name": "initiatives Copy 3",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/fundraising/initiatives",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"fundraising",
								"initiatives"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:30:31 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "1580"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"initiatives\": [\n        {\n            \"id\": \"1\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"2\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"3\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"4\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"5\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"6\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"7\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"8\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"9\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"10\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"11\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"12\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"13\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"14\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"15\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"16\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"17\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"18\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"19\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"20\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"21\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"22\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"23\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"24\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"25\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"26\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"27\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"28\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"29\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"30\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"31\",\n            \"name\": \"une initiative\",\n            \"amount\": 2.5\n        },\n        {\n            \"id\": \"32\",\n            \"name\": \"une autre initiative\",\n            \"amount\": 15\n        },\n        {\n            \"id\": \"33\",\n            \"name\": \"encore une initiative\",\n            \"amount\": 1.05\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Revenue no login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a3477f26-293f-4ee3-afdc-e178a2396909",
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/financial-report/revenue/",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"financial-report",
						"revenue",
						""
					]
				}
			},
			"response": [
				{
					"name": "get total revenue",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/financial-report/revenue/",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"financial-report",
								"revenue",
								""
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:52:44 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "284"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccess\": {\n        \"byCarType\": {\n            \"entry\": [\n                {\n                    \"key\": \"HYBRIDE_ECONOMIQUE\",\n                    \"value\": 0\n                },\n                {\n                    \"key\": \"SUPER_ECONOMIQUE\",\n                    \"value\": 5\n                },\n                {\n                    \"key\": \"GOURMANDE\",\n                    \"value\": 65\n                },\n                {\n                    \"key\": \"ECONOMIQUE\",\n                    \"value\": 30\n                },\n                {\n                    \"key\": \"SANS_POLLUTION\",\n                    \"value\": 0\n                }\n            ]\n        },\n        \"total\": 100\n    },\n    \"pass\": 489,\n    \"infraction\": 0,\n    \"total\": 589\n}"
				}
			]
		},
		{
			"name": "Karine login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4d9afced-c134-41af-9f4f-b6bd51639d15",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"Karine\",\n    \"hashedPassword\": \"hashed_password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/authentication/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"authentication",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "infraction wrong user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4f7df709-7fb8-4063-8a2e-c39494dea413",
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"passCode\": \"1\",\n    \"parkingZone\": \"{{parkingZone_2}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/infractions",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"infractions"
					]
				}
			},
			"response": [
				{
					"name": "infraction zone",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"passCode\": \"1\",\n    \"parkingZone\": \"zone_1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/infractions",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"infractions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:26:38 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "76"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"infractionId\": \"2\",\n    \"code\": \"ZONE_01\",\n    \"reason\": \"mauvaise zone\",\n    \"amount\": 55\n}"
				}
			]
		},
		{
			"name": "Karine login Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "781b46b0-ca82-40f9-8aba-30b7e72587ec",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"Karine\",\n    \"hashedPassword\": \"hashed_password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/authentication/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"authentication",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report summary",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ec5a9af1-6fc3-466d-a4fe-87dc3cf7b238",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Most popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['mostPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Least popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['leastPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Mean usage is more than 0\", function () {",
							"    pm.expect(pm.response.json()['meanUsagePerDay']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Set",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					]
				},
				"description": "Il est possible de faire n'importe quel combinaison de query params. Si le startDate n'est pas fournis la date par défaut est le premier du mois courant, si le endDate n'est pas founis la date par défaut est la journée courante, si la zone n'est pas fournis on considère toutes les zone."
			},
			"response": [
				{
					"name": "Usage report summary",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/usage-report/summary",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"usage-report",
								"summary"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 01 Oct 2020 17:40:44 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "96"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"meanUsagePerDay\": 2,\n    \"mostPopularMonthDate\": \"2020-10-01\",\n    \"leastPopularMonthDate\": \"2020-10-01\"\n}"
				}
			]
		},
		{
			"name": "Usage report summary (with anterior start date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f2bb1ae9-008b-4d0f-a570-2178562b68b2",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Most popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['mostPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Least popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['leastPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Mean usage is more than 0\", function () {",
							"    pm.expect(pm.response.json()['meanUsagePerDay']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary?startDate={{yesterday}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					],
					"query": [
						{
							"key": "startDate",
							"value": "{{yesterday}}"
						}
					]
				},
				"description": "Il est possible de faire n'importe quel combinaison de query params. Si le startDate n'est pas fournis la date par défaut est le premier du mois courant, si le endDate n'est pas founis la date par défaut est la journée courante, si la zone n'est pas fournis on considère toutes les zone."
			},
			"response": []
		},
		{
			"name": "Usage report summary (with posterior start date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ccf132d9-057f-47fa-adc4-59c8c461949e",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Most popular usage is not present\", function () {",
							"    pm.expect(pm.response.json()['mostPopularMonthDate']).to.eql(undefined);",
							"});",
							"",
							"pm.test(\"Least popular usage is not present\", function () {",
							"    pm.expect(pm.response.json()['leastPopularMonthDate']).to.eql(undefined);",
							"});",
							"",
							"pm.test(\"Mean usage is 0\", function () {",
							"    pm.expect(pm.response.json()['meanUsagePerDay']).to.eql(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary?startDate={{tomorrow}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					],
					"query": [
						{
							"key": "startDate",
							"value": "{{tomorrow}}"
						}
					]
				},
				"description": "Il est possible de faire n'importe quel combinaison de query params. Si le startDate n'est pas fournis la date par défaut est le premier du mois courant, si le endDate n'est pas founis la date par défaut est la journée courante, si la zone n'est pas fournis on considère toutes les zone."
			},
			"response": []
		},
		{
			"name": "Usage report summary (with parking zone without access)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603db9a7-9401-48f8-b8ee-062399c5178f",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Most popular usage is not present\", function () {",
							"    pm.expect(pm.response.json()['mostPopularMonthDate']).to.eql(undefined);",
							"});",
							"",
							"pm.test(\"Least popular usage is not present\", function () {",
							"    pm.expect(pm.response.json()['leastPopularMonthDate']).to.eql(undefined);",
							"});",
							"",
							"pm.test(\"Mean usage is 0\", function () {",
							"    pm.expect(pm.response.json()['meanUsagePerDay']).to.eql(0);",
							"});",
							"",
							"pm.test(\"Parking zone is \" + pm.collectionVariables.get(\"parkingZone_2\").toUpperCase(), function () {",
							"    pm.expect(pm.response.json()['parkingZone']).to.eql(pm.collectionVariables.get(\"parkingZone_2\").toUpperCase());",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary?parkingZone={{parkingZone_2}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					],
					"query": [
						{
							"key": "parkingZone",
							"value": "{{parkingZone_2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report summary (with posterior end date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "da8d764e-4909-49bb-87e5-3aa68c7c0ff8",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Most popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['mostPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Least popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['leastPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Mean usage is more than 0\", function () {",
							"    pm.expect(pm.response.json()['meanUsagePerDay']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary?endDate={{tomorrow}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					],
					"query": [
						{
							"key": "endDate",
							"value": "{{tomorrow}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report summary (with anterior end date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f51df65f-5691-49e2-8975-253a11815e08",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Most popular usage is not present\", function () {",
							"    pm.expect(pm.response.json()['mostPopularMonthDate']).to.eql(undefined);",
							"});",
							"",
							"pm.test(\"Least popular usage is not present\", function () {",
							"    pm.expect(pm.response.json()['leastPopularMonthDate']).to.eql(undefined);",
							"});",
							"",
							"pm.test(\"Mean usage is 0\", function () {",
							"    pm.expect(pm.response.json()['meanUsagePerDay']).to.eql(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary?endDate={{yesterday}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					],
					"query": [
						{
							"key": "endDate",
							"value": "{{yesterday}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report summary (with all correct filters)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0a47ed44-a259-4d74-a1ab-ca6d3293122a",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Most popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['mostPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Least popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['leastPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Mean usage is more than 0\", function () {",
							"    pm.expect(pm.response.json()['meanUsagePerDay']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary?startDate={{today}}&endDate={{today}}&parkingZone={{parkingZone}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					],
					"query": [
						{
							"key": "startDate",
							"value": "{{today}}"
						},
						{
							"key": "endDate",
							"value": "{{today}}"
						},
						{
							"key": "parkingZone",
							"value": "{{parkingZone}}"
						}
					]
				}
			},
			"response": [
				{
					"name": "Usage report summary (with all correct filters)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/usage-report/summary?startDate={{today}}&endDate={{today}}&parkingZone={{parkingZone}}",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"usage-report",
								"summary"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{today}}"
								},
								{
									"key": "endDate",
									"value": "{{today}}"
								},
								{
									"key": "parkingZone",
									"value": "{{parkingZone}}"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:17:20 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "119"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"meanUsagePerDay\": 2,\n    \"mostPopularMonthDate\": \"2020-11-18\",\n    \"leastPopularMonthDate\": \"2020-11-18\",\n    \"parkingZone\": \"ZONE_3\"\n}"
				}
			]
		},
		{
			"name": "Usage report month",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e90785bd-053e-4413-9c41-afce6ddd1b20",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Usage report list is an array\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['usageReport'])).to.be.true;",
							"});",
							"",
							"pm.test(\"Usage report list is not empty\", function () {",
							"    pm.expect(pm.response.json()['usageReport']).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Total number of entry is more than 0\", function () {",
							"    pm.expect(pm.response.json()['totalOfEntry']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/month",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"month"
					]
				},
				"description": "Il est possible de faire n'importe quel combinaison de query params. Si le startDate n'est pas fournis la date par défaut est le premier du mois courant, si le endDate n'est pas founis la date par défaut est la journée courante, si la zone n'est pas fournis on considère toutes les zone."
			},
			"response": [
				{
					"name": "Usage report month",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/usage-report/month",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"usage-report",
								"month"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 01 Oct 2020 17:40:57 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "74"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"usageReport\": [\n        {\n            \"date\": \"2020-10-01\",\n            \"numberOfEntry\": 2\n        }\n    ],\n    \"totalOfEntry\": 2\n}"
				}
			]
		},
		{
			"name": "Usage report month (with anterior start date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4341e577-8af7-4367-a97e-76b28d577feb",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Usage report list is an array\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['usageReport'])).to.be.true;",
							"});",
							"",
							"pm.test(\"Usage report list is not empty\", function () {",
							"    pm.expect(pm.response.json()['usageReport']).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Total number of entry is more than 0\", function () {",
							"    pm.expect(pm.response.json()['totalOfEntry']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/month?startDate={{yesterday}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"month"
					],
					"query": [
						{
							"key": "startDate",
							"value": "{{yesterday}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report month (with posterior start date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5fc89801-fc5f-4294-aa79-5510084d6436",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Usage report list is an array\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['usageReport'])).to.be.true;",
							"});",
							"",
							"pm.test(\"Usage report list is empty\", function () {",
							"    pm.expect(pm.response.json()['usageReport']).to.be.empty;",
							"});",
							"",
							"pm.test(\"Total number of entry is 0\", function () {",
							"    pm.expect(pm.response.json()['totalOfEntry']).to.eql(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/month?startDate={{tomorrow}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"month"
					],
					"query": [
						{
							"key": "startDate",
							"value": "{{tomorrow}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report month (with parking zone without access)",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/month?parkingZone={{parkingZone_2}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"month"
					],
					"query": [
						{
							"key": "parkingZone",
							"value": "{{parkingZone_2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report month (with posterior end date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ac17c4c2-1e0c-47f2-9117-2e525a460119",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Usage report list is an array\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['usageReport'])).to.be.true;",
							"});",
							"",
							"pm.test(\"Usage report list is not empty\", function () {",
							"    pm.expect(pm.response.json()['usageReport']).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Total number of entry is more than 0\", function () {",
							"    pm.expect(pm.response.json()['totalOfEntry']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/month?endDate={{tomorrow}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"month"
					],
					"query": [
						{
							"key": "endDate",
							"value": "{{tomorrow}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report month (with anterior end date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8f157000-aec9-4f7c-8f1a-8a3b55121db8",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Usage report list is an array\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['usageReport'])).to.be.true;",
							"});",
							"",
							"pm.test(\"Usage report list is empty\", function () {",
							"    pm.expect(pm.response.json()['usageReport']).to.be.empty;",
							"});",
							"",
							"pm.test(\"Total number of entry is 0\", function () {",
							"    pm.expect(pm.response.json()['totalOfEntry']).to.eql(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/month?endDate={{yesterday}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"month"
					],
					"query": [
						{
							"key": "endDate",
							"value": "{{yesterday}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report month (with all filters)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "60bb2545-fd5c-4bbe-af0d-a4c53b5af298",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Usage report list is an array\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['usageReport'])).to.be.true;",
							"});",
							"",
							"pm.test(\"Usage report list is not empty\", function () {",
							"    pm.expect(pm.response.json()['usageReport']).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Total number of entry is more than 0\", function () {",
							"    pm.expect(pm.response.json()['totalOfEntry']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/month?startDate={{today}}&endDate={{today}}&parkingZone={{parkingZone}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"month"
					],
					"query": [
						{
							"key": "startDate",
							"value": "{{today}}"
						},
						{
							"key": "endDate",
							"value": "{{today}}"
						},
						{
							"key": "parkingZone",
							"value": "{{parkingZone}}"
						}
					]
				}
			},
			"response": [
				{
					"name": "Usage report month (with all filters)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/usage-report/month?startDate={{today}}&endDate={{today}}&parkingZone={{parkingZone}}",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"usage-report",
								"month"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{today}}"
								},
								{
									"key": "endDate",
									"value": "{{today}}"
								},
								{
									"key": "parkingZone",
									"value": "{{parkingZone}}"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:18:41 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "97"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"parkingZone\": \"ZONE_3\",\n    \"usageReport\": [\n        {\n            \"date\": \"2020-11-18\",\n            \"numberOfEntry\": 2\n        }\n    ],\n    \"totalOfEntry\": 2\n}"
				}
			]
		},
		{
			"name": "Dominique login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bb06d9af-9874-4432-84c7-9faa5b11ecfe",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"Dominique\",\n    \"hashedPassword\": \"hashed_password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/authentication/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"authentication",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report summary wrong user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e2380ac3-7815-486e-95ab-f1b84f09841f",
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Set",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					]
				},
				"description": "Il est possible de faire n'importe quel combinaison de query params. Si le startDate n'est pas fournis la date par défaut est le premier du mois courant, si le endDate n'est pas founis la date par défaut est la journée courante, si la zone n'est pas fournis on considère toutes les zone."
			},
			"response": [
				{
					"name": "Usage report (summary)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/usage-report/summary",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"usage-report",
								"summary"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 01 Oct 2020 17:40:44 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "96"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"meanUsagePerDay\": 2,\n    \"mostPopularMonthDate\": \"2020-10-01\",\n    \"leastPopularMonthDate\": \"2020-10-01\"\n}"
				}
			]
		},
		{
			"name": "Get initiatives no login wrong user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "091444a6-0861-4c82-9cee-939126ae0994",
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/fundraising/initiatives",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"fundraising",
						"initiatives"
					]
				}
			},
			"response": [
				{
					"name": "initiatives Copy 3",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/fundraising/initiatives",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"fundraising",
								"initiatives"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:30:31 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "1580"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"initiatives\": [\n        {\n            \"id\": \"1\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"2\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"3\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"4\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"5\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"6\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"7\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"8\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"9\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"10\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"11\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"12\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"13\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"14\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"15\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"16\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"17\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"18\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"19\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"20\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"21\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"22\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"23\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"24\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"25\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"26\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"27\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"28\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"29\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"30\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"31\",\n            \"name\": \"une initiative\",\n            \"amount\": 2.5\n        },\n        {\n            \"id\": \"32\",\n            \"name\": \"une autre initiative\",\n            \"amount\": 15\n        },\n        {\n            \"id\": \"33\",\n            \"name\": \"encore une initiative\",\n            \"amount\": 1.05\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Revenue no login wong user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f0bcae98-29e7-40ee-827c-36b792dfa544",
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/financial-report/revenue/",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"financial-report",
						"revenue",
						""
					]
				}
			},
			"response": [
				{
					"name": "get total revenue",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/financial-report/revenue/",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"financial-report",
								"revenue",
								""
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:52:44 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "284"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccess\": {\n        \"byCarType\": {\n            \"entry\": [\n                {\n                    \"key\": \"HYBRIDE_ECONOMIQUE\",\n                    \"value\": 0\n                },\n                {\n                    \"key\": \"SUPER_ECONOMIQUE\",\n                    \"value\": 5\n                },\n                {\n                    \"key\": \"GOURMANDE\",\n                    \"value\": 65\n                },\n                {\n                    \"key\": \"ECONOMIQUE\",\n                    \"value\": 30\n                },\n                {\n                    \"key\": \"SANS_POLLUTION\",\n                    \"value\": 0\n                }\n            ]\n        },\n        \"total\": 100\n    },\n    \"pass\": 489,\n    \"infraction\": 0,\n    \"total\": 589\n}"
				}
			]
		},
		{
			"name": "Dominique login Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4adcf62f-dbc1-49f4-a938-5386c40ca8a5",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"Dominique\",\n    \"hashedPassword\": \"hashed_password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/authentication/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"authentication",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Infraction (wrong zone)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "76278958-bb4e-4ee0-9094-d41b3515bb54",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Code is ZONE_01\", function () {",
							"    pm.expect(pm.response.json()['code']).to.eql('ZONE_01');",
							"});",
							"",
							"pm.test(\"Reason is 'mauvaise zone'\", function () {",
							"    pm.expect(pm.response.json()['reason']).to.eql('mauvaise zone');",
							"});",
							"",
							"pm.test(\"Amount is 55$\", function () {",
							"    pm.expect(pm.response.json()['amount']).to.eql(55);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"passCode\": \"1\",\n    \"parkingZone\": \"{{parkingZone_2}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/infractions",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"infractions"
					]
				}
			},
			"response": [
				{
					"name": "Infraction (wrong zone)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"passCode\": \"1\",\n    \"parkingZone\": \"zone_1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/infractions",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"infractions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:26:38 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "76"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"infractionId\": \"2\",\n    \"code\": \"ZONE_01\",\n    \"reason\": \"mauvaise zone\",\n    \"amount\": 55\n}"
				}
			]
		},
		{
			"name": "Infraction (empty pass code)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "39ca0d22-db7e-4a6c-9e71-625d94a2c0ab",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Code is VIG_03\", function () {",
							"    pm.expect(pm.response.json()['code']).to.eql('VIG_03');",
							"});",
							"",
							"pm.test(\"Reason is 'pas de vignette'\", function () {",
							"    pm.expect(pm.response.json()['reason']).to.eql('pas de vignette');",
							"});",
							"",
							"pm.test(\"Amount is 55$\", function () {",
							"    pm.expect(pm.response.json()['amount']).to.eql(55);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"passCode\": \"\",\n    \"parkingZone\": \"zone_1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/infractions",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"infractions"
					]
				}
			},
			"response": [
				{
					"name": "Infraction (empty pass code)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"passCode\": \"\",\n    \"parkingZone\": \"zone_1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/infractions",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"infractions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:27:07 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "77"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"infractionId\": \"3\",\n    \"code\": \"VIG_03\",\n    \"reason\": \"pas de vignette\",\n    \"amount\": 55\n}"
				}
			]
		},
		{
			"name": "Infraction (invalid pass code)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9537f74c-faa7-4216-8ac5-61882647a269",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Code is VIG_02\", function () {",
							"    pm.expect(pm.response.json()['code']).to.eql('VIG_02');",
							"});",
							"",
							"pm.test(\"Reason is 'vignette invalide'\", function () {",
							"    pm.expect(pm.response.json()['reason']).to.eql('vignette invalide');",
							"});",
							"",
							"pm.test(\"Amount is 45$\", function () {",
							"    pm.expect(pm.response.json()['amount']).to.eql(45);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"passCode\": \"512983798\",\n    \"parkingZone\": \"zone_1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/infractions",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"infractions"
					]
				}
			},
			"response": [
				{
					"name": "Infraction (invalid pass code)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"passCode\": \"5\",\n    \"parkingZone\": \"zone_1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/infractions",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"infractions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:27:37 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "79"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"infractionId\": \"4\",\n    \"code\": \"VIG_02\",\n    \"reason\": \"vignette invalide\",\n    \"amount\": 45\n}"
				}
			]
		},
		{
			"name": "Pay infraction",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fd509e37-a3af-4e5d-8ed1-bd1224cc3b11",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"body is empty\", function () {",
							"    pm.expect(pm.response.body).to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"infractionId\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/infractions/pay",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"infractions",
						"pay"
					]
				}
			},
			"response": [
				{
					"name": "Pay infraction",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"infractionId\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/infractions/pay",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"infractions",
								"pay"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:22:35 GMT"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "0"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Re-pay infraction again",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f7a1b077-51d0-4fdf-b258-a9148e9e4441",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"error is 'ALREADY_PAID_INFRACTION'\", function () {",
							"    pm.expect(pm.response.json()['error']).to.eql('ALREADY_PAID_INFRACTION')",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"infractionId\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/infractions/pay",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"infractions",
						"pay"
					]
				}
			},
			"response": [
				{
					"name": "Re-pay infraction again",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"infractionId\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/infractions/pay",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"infractions",
								"pay"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:21:10 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "90"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"ALREADY_PAID_INFRACTION\",\n    \"description\": \"Cette infraction a déjà été payée\"\n}"
				}
			]
		},
		{
			"name": "Karine login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "179172c8-f267-45dd-a6e5-56d1332142d1",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"Karine\",\n    \"hashedPassword\": \"hashed_password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/authentication/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"authentication",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create initiative",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d9e591a-181a-421c-b617-a50dbb4e135c",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"name is present\", function () {",
							"    pm.expect(pm.response.json()['name']).not.to.be.empty",
							"})",
							"",
							"pm.test(\"amount is present\", function () {",
							"    pm.expect(pm.response.json()['amount']).not.to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"une initiative\",\n    \"amount\": \"2.50\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/fundraising/initiatives",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"fundraising",
						"initiatives"
					]
				}
			},
			"response": [
				{
					"name": "Create initiative",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"une initiative\",\n    \"amount\": \"2.50\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/fundraising/initiatives",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"fundraising",
								"initiatives"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:28:58 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "48"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"31\",\n    \"name\": \"une initiative\",\n    \"amount\": 2.5\n}"
				}
			]
		},
		{
			"name": "Create initiative (with crazy long decimals amount)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8c9793b2-7d68-487b-bce4-71292bf4d765",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"name is present\", function () {",
							"    pm.expect(pm.response.json()['name']).not.to.be.empty",
							"})",
							"",
							"pm.test(\"amount is present\", function () {",
							"    pm.expect(pm.response.json()['amount']).not.to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"encore une initiative\",\n    \"amount\": 1.05987564532544987568954769845796794576974950876908475968745976945876098745068450986094586098\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/fundraising/initiatives",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"fundraising",
						"initiatives"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create initiative (without name)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "49855522-4d9f-45a3-a65a-858ee60cd4a2",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"error is 'INVALID_INITIATIVE_NAME'\", function () {",
							"    pm.expect(pm.response.json()['error']).to.eql('INVALID_INITIATIVE_NAME')",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"\",\n    \"amount\": \"15\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/fundraising/initiatives",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"fundraising",
						"initiatives"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create initiative (with too big amount)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "60ba5b53-6fcd-4534-bdbe-011631cb80ed",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"error is 'INVALID_INITIATIVE_AMOUNT'\", function () {",
							"    pm.expect(pm.response.json()['error']).to.eql('INVALID_INITIATIVE_AMOUNT')",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"encore une initiative\",\n    \"amount\": \"10000000000\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/fundraising/initiatives",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"fundraising",
						"initiatives"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get initiatives",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "704fc29f-beb4-4a48-bb48-a0a5ff4efa18",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"initiatives is not empty\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['initiatives'])).to.be.true",
							"    pm.expect(pm.response.json()['initiatives']).not.to.eql([])",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/fundraising/initiatives",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"fundraising",
						"initiatives"
					]
				}
			},
			"response": [
				{
					"name": "Get initiatives",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/fundraising/initiatives",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"fundraising",
								"initiatives"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:30:31 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "1580"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"initiatives\": [\n        {\n            \"id\": \"1\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"2\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"3\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"4\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"5\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"6\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"7\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"8\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"9\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"10\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"11\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"12\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"13\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"14\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"15\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"16\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"17\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"18\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"19\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"20\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"21\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"22\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"23\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"24\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"25\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"26\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"27\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"28\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"29\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"30\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"31\",\n            \"name\": \"une initiative\",\n            \"amount\": 2.5\n        },\n        {\n            \"id\": \"32\",\n            \"name\": \"une autre initiative\",\n            \"amount\": 15\n        },\n        {\n            \"id\": \"33\",\n            \"name\": \"encore une initiative\",\n            \"amount\": 1.05\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Deactivate carbon credits auto-tranfer",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "df466da6-653d-48a5-a825-3385edcca385",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"active is 'false'\", function () {",
							"    pm.expect(pm.response.json()['active']).to.not.be.true",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"active\": \"false\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/carbon-credits/activate",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"carbon-credits",
						"activate"
					]
				}
			},
			"response": [
				{
					"name": "Deactivate carbon credits auto-tranfer",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"active\": \"false\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/carbon-credits/activate",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"carbon-credits",
								"activate"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:25:10 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "16"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"active\": false\n}"
				}
			]
		},
		{
			"name": "Activate carbon credits auto-tranfer",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "822009a0-88ef-4965-91c1-154ade3da617",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"active is 'true'\", function () {",
							"    pm.expect(pm.response.json()['active']).to.be.true",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"active\": \"true\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/carbon-credits/activate",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"carbon-credits",
						"activate"
					]
				}
			},
			"response": [
				{
					"name": "Activate carbon credits auto-transfer",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"active\": \"true\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/carbon-credits/activate",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"carbon-credits",
								"activate"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 22:22:20 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "15"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"active\": true\n}"
				}
			]
		},
		{
			"name": "Transfer carbon credits",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cff1cfdc-688d-4176-b4e1-ea2f7f8e2b14",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"amount transferred is not empty\", function () {",
							"    pm.expect(pm.response.json()['transferred']).to.be.greaterThan(0)",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/admin/carbon-credits/transfer",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"admin",
						"carbon-credits",
						"transfer"
					]
				}
			},
			"response": [
				{
					"name": "carbon credit Copy",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/carbon-credits/transfer",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"carbon-credits",
								"transfer"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:32:19 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "22"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"transferred\": 238.34\n}"
				},
				{
					"name": "Transfer carbon credits",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/admin/carbon-credits/transfer",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"admin",
								"carbon-credits",
								"transfer"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:25:22 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "21"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"transferred\": 951.2\n}"
				}
			]
		},
		{
			"name": "Re-transfer carbon credits",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6ea7e27d-9392-47b7-a422-34bd05e9cd5a",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"amount transferred is 0\", function () {",
							"    pm.expect(pm.response.json()['transferred']).to.eql(0)",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/admin/carbon-credits/transfer",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"admin",
						"carbon-credits",
						"transfer"
					]
				}
			},
			"response": [
				{
					"name": "Re-transfer carbon credits",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/admin/carbon-credits/transfer",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"admin",
								"carbon-credits",
								"transfer"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:25:47 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "19"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"transferred\": 0\n}"
				}
			]
		},
		{
			"name": "Get total credits transfered",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "393a91ae-db32-40af-af36-624be0a90846",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"total is not empty\", function () {",
							"    pm.expect(pm.response.json()['total']).to.be.greaterThan(0)",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/financial-report/spending/carbon-credits",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"financial-report",
						"spending",
						"carbon-credits"
					]
				}
			},
			"response": [
				{
					"name": "Get total credits transfered",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/financial-report/spending/carbon-credits",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"financial-report",
								"spending",
								"carbon-credits"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:26:09 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "15"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"total\": 43.61\n}"
				}
			]
		},
		{
			"name": "Revenue (pass)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "39907661-c2ce-4c72-a37d-9245a1d7b85a",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a053f3ae-8e74-4375-a2f6-8c15d3da816b",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'revenue' is more than 0\", function () {",
							"    pm.expect(pm.response.json()['revenue']).to.be.greaterThan(0)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/financial-report/revenue/parking-pass",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"financial-report",
						"revenue",
						"parking-pass"
					]
				}
			},
			"response": [
				{
					"name": "Revenue (pass)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/financial-report/revenue/parking-pass",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"financial-report",
								"revenue",
								"parking-pass"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:52:38 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "17"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"revenue\": 489\n}"
				}
			]
		},
		{
			"name": "Revenue (infractions)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c65d4db1-67cd-467a-a46f-9ae17cc79949",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'revenue' is more than 0\", function () {",
							"    pm.expect(pm.response.json()['revenue']).to.be.greaterThan(0)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/financial-report/revenue/infractions",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"financial-report",
						"revenue",
						"infractions"
					]
				}
			},
			"response": [
				{
					"name": "Revenue (infractions)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/financial-report/revenue/infractions",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"financial-report",
								"revenue",
								"infractions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:53:41 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "16"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"revenue\": 52.8\n}"
				}
			]
		},
		{
			"name": "Revenue (campus access)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "204b02cb-52bd-4095-b738-bfe842466d77",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'byCarType' has entries\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['byCarType']['entry'])).to.be.true",
							"    pm.expect(Array.isArray(pm.response.json()['byCarType']['entry'])).to.not.eql([])",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/financial-report/revenue/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"financial-report",
						"revenue",
						"campus-access"
					]
				}
			},
			"response": [
				{
					"name": "Revenue (campus access)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/financial-report/revenue/campus-access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"financial-report",
								"revenue",
								"campus-access"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:52:27 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "223"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"byCarType\": {\n        \"entry\": [\n            {\n                \"key\": \"HYBRIDE_ECONOMIQUE\",\n                \"value\": 0\n            },\n            {\n                \"key\": \"SUPER_ECONOMIQUE\",\n                \"value\": 5\n            },\n            {\n                \"key\": \"GOURMANDE\",\n                \"value\": 65\n            },\n            {\n                \"key\": \"ECONOMIQUE\",\n                \"value\": 30\n            },\n            {\n                \"key\": \"SANS_POLLUTION\",\n                \"value\": 0\n            }\n        ]\n    },\n    \"total\": 100\n}"
				}
			]
		},
		{
			"name": "Revenue",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f5475bb1-a1f9-4b07-a0ba-be96c88ee83f",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'campusAccess' is not empty\", function () {",
							"    pm.expect(pm.response.json()['campusAccess']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'pass' is more than 0\", function () {",
							"    pm.expect(pm.response.json()['pass']).to.be.greaterThan(0)",
							"});",
							"",
							"pm.test(\"'infraction' is more than 0\", function () {",
							"    pm.expect(pm.response.json()['infraction']).to.be.greaterThan(0)",
							"});",
							"",
							"pm.test(\"'total' is more than 0\", function () {",
							"    pm.expect(pm.response.json()['total']).to.be.greaterThan(0)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/financial-report/revenue",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"financial-report",
						"revenue"
					]
				}
			},
			"response": [
				{
					"name": "Revenue",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/financial-report/revenue",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"financial-report",
								"revenue"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:27:14 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "290"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccess\": {\n        \"byCarType\": {\n            \"entry\": [\n                {\n                    \"key\": \"ECONOMIQUE\",\n                    \"value\": 30\n                },\n                {\n                    \"key\": \"GOURMANDE\",\n                    \"value\": 1065\n                },\n                {\n                    \"key\": \"HYBRIDE_ECONOMIQUE\",\n                    \"value\": 0\n                },\n                {\n                    \"key\": \"SUPER_ECONOMIQUE\",\n                    \"value\": 5\n                },\n                {\n                    \"key\": \"SANS_POLLUTION\",\n                    \"value\": 0\n                }\n            ]\n        },\n        \"total\": 1100\n    },\n    \"pass\": 1223,\n    \"infraction\": 22,\n    \"total\": 2345\n}"
				}
			]
		},
		{
			"name": "Create rechargUL card",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f860564c-fbdf-45f4-99de-dfdf20aed260",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'credits' is 0\", function () {",
							"    pm.expect(pm.response.json()['credits']).to.eql(0)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/rechargul",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"rechargul"
					]
				}
			},
			"response": [
				{
					"name": "Create rechargUL card",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/rechargul",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"rechargul"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:27:32 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "25"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"11\",\n    \"credits\": 0\n}"
				}
			]
		},
		{
			"name": "Get rechargUL card",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f7d08932-e471-4606-a331-5df31a42a139",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'credits' is 0\", function () {",
							"    pm.expect(pm.response.json()['credits']).to.eql(0)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/rechargul/1",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"rechargul",
						"1"
					]
				}
			},
			"response": [
				{
					"name": "Get rechargUL card",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/rechargul/1",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"rechargul",
								"1"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:27:48 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"1\",\n    \"credits\": 0\n}"
				}
			]
		},
		{
			"name": "Get charging points",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f6feb418-6199-4ee4-8aef-9f4c0f47171c",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'chargingPoints' is not empty\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['chargingPoints'])).to.be.true",
							"    pm.expect(pm.response.json()['chargingPoints']).to.not.eql([])",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points"
					]
				}
			},
			"response": [
				{
					"name": "Get charging points",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:28:03 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "281"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"chargingPoints\": [\n        {\n            \"id\": \"1\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"2\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"3\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"4\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"5\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"6\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"7\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"8\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"9\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"10\",\n            \"state\": \"idle\"\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Get single charging point",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a5a017ac-714c-4de9-a97e-8b3874070145",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'state' is idle\", function () {",
							"    pm.expect(pm.response.json()['state']).to.eql(\"idle\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points/1",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points",
						"1"
					]
				}
			},
			"response": [
				{
					"name": "Get single charging point",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points/1",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points",
								"1"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:28:13 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "25"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"1\",\n    \"state\": \"idle\"\n}"
				}
			]
		},
		{
			"name": "Activate charging point (with invalid card)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d54d20d8-1287-4ea1-a4ab-1ab9e61ac321",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"'error' is \", function () {",
							"    pm.expect(pm.response.json()['error']).to.eql(\"INVALID_RECHARGUL_CARD_ID\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points/1/activate",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points",
						"1",
						"activate"
					]
				}
			},
			"response": [
				{
					"name": "Activate charging point (with invalid card)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points/1/activate",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points",
								"1",
								"activate"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:28:35 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "87"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"INVALID_RECHARGUL_CARD_ID\",\n    \"description\": \"This rechargUL card id is invalid\"\n}"
				}
			]
		},
		{
			"name": "Activate charging point (with non-existant card)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cd99e2ee-d2a5-486c-8e63-08654d9f768e",
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"'error' is \", function () {",
							"    pm.expect(pm.response.json()['error']).to.eql(\"RECHARGUL_CARD_NOT_FOUND\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"rechargULCardId\": \"1234234\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points/1/activate",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points",
						"1",
						"activate"
					]
				}
			},
			"response": [
				{
					"name": "Activate charging point (with non-existant card)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rechargULCardId\": \"1234234\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points/1/activate",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points",
								"1",
								"activate"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:28:47 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "87"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"RECHARGUL_CARD_NOT_FOUND\",\n    \"description\": \"This rechargUL card does not exist\"\n}"
				}
			]
		},
		{
			"name": "Activate charging point (with no credits card)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fb921104-34ad-4bf7-9219-74e65b1fe78c",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"'error' is \", function () {",
							"    pm.expect(pm.response.json()['error']).to.eql(\"NOT_ENOUGH_CREDITS\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points/1/activate",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points",
						"1",
						"activate"
					]
				}
			},
			"response": [
				{
					"name": "Activate charging point (with no credits card)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points/1/activate",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points",
								"1",
								"activate"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:28:55 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "95"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"NOT_ENOUGH_CREDITS\",\n    \"description\": \"This rechargUL card does not have enough credits\"\n}"
				}
			]
		},
		{
			"name": "Add credits to card (with invalid amount)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e47ce679-9b19-406e-b655-8ba8570ee36e",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"'error' is INVALID_RECHARGUL_CREDITS\", function () {",
							"    pm.expect(pm.response.json()['error']).to.eql(\"INVALID_RECHARGUL_CREDITS\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"credits\": -1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/rechargul/1/credits",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"rechargul",
						"1",
						"credits"
					]
				}
			},
			"response": [
				{
					"name": "Add credits to card (with invalid amount)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"credits\": -1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/rechargul/1/credits",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"rechargul",
								"1",
								"credits"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:29:08 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "88"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"INVALID_RECHARGUL_CREDITS\",\n    \"description\": \"Invalid credits for rechargUL card\"\n}"
				}
			]
		},
		{
			"name": "Add credits to card",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d294d0f9-88e7-47a5-af62-2569d61d9193",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'credits' is not 0\", function () {",
							"    pm.expect(pm.response.json()['credits']).to.be.greaterThan(0)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"credits\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/rechargul/1/credits",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"rechargul",
						"1",
						"credits"
					]
				}
			},
			"response": [
				{
					"name": "Add credits to card",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"credits\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/rechargul/1/credits",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"rechargul",
								"1",
								"credits"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:29:26 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"1\",\n    \"credits\": 1\n}"
				}
			]
		},
		{
			"name": "Activate charging point",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6d3132bc-eade-418b-b564-656646ff36fc",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'state' is activated\", function () {",
							"    pm.expect(pm.response.json()['state']).to.eql(\"activated\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points/1/activate",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points",
						"1",
						"activate"
					]
				}
			},
			"response": [
				{
					"name": "Activate charging point",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points/1/activate",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points",
								"1",
								"activate"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:29:37 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "30"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"1\",\n    \"state\": \"activated\"\n}"
				}
			]
		},
		{
			"name": "Connect charging point",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "09d3c869-57a9-4faf-8a46-4bbbf5455526",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'state' is charging\", function () {",
							"    pm.expect(pm.response.json()['state']).to.eql(\"charging\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points/1/connect",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points",
						"1",
						"connect"
					]
				}
			},
			"response": [
				{
					"name": "Connect charging point",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points/1/connect",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points",
								"1",
								"connect"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:29:57 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "29"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"1\",\n    \"state\": \"charging\"\n}"
				}
			]
		},
		{
			"name": "Disconnect charging point",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4da29dc7-1dd3-4a8c-a46c-94943d371882",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'state' is activated\", function () {",
							"    pm.expect(pm.response.json()['state']).to.eql(\"activated\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points/1/disconnect",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points",
						"1",
						"disconnect"
					]
				}
			},
			"response": [
				{
					"name": "Disconnect charging point",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points/1/disconnect",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points",
								"1",
								"disconnect"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:30:09 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "30"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"1\",\n    \"state\": \"activated\"\n}"
				}
			]
		},
		{
			"name": "Deactivate charging point",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "49adb655-69d4-427e-bd2d-e74b607766c6",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'state' is idle\", function () {",
							"    pm.expect(pm.response.json()['state']).to.eql(\"idle\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points/1/deactivate",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points",
						"1",
						"deactivate"
					]
				}
			},
			"response": [
				{
					"name": "Deactivate charging point",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points/1/deactivate",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points",
								"1",
								"deactivate"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:30:22 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "25"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"1\",\n    \"state\": \"idle\"\n}"
				}
			]
		},
		{
			"name": "Get rechargUL card (after debited)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "530dcf02-f58d-40c5-9399-f4632f3d1115",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'credits' is 0\", function () {",
							"    pm.expect(pm.response.json()['credits']).to.eql(0)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/rechargul/1",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"rechargul",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "wrong username login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "24267537-38fa-4641-9df9-2994db935835",
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"user\",\n    \"hashedPassword\": \"hashed_password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/authentication/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"authentication",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "wrong password login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "83f8c517-1091-412b-8746-aca608fa8265",
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"Karine\",\n    \"hashedPassword\": \"wrong password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/authentication/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"authentication",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Valid CampusAccess purchase",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6ce759b0-51ac-4c02-bf8b-aea7c105c5a9",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": {\r\n\t    \"name\": \"Bob Ross\",\r\n\t    \"birthDate\": \"1991-07-10\",\r\n\t    \"gender\": \"MaLe\"\r\n    },\r\n    \"car\" : {\r\n        \"type\": \"economique\",\r\n        \"brand\": \"toyota\",\r\n        \"model\": \"corolla\",\r\n        \"year\": \"2020\",\r\n        \"licensePlate\": \"123 456\"\r\n    },\r\n    \"period\": {\r\n        \"type\": \"hourly\",\r\n        \"numberOfHours\": \"1\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid CampussAccess purchase (neg hours)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6dcf3fe9-6a24-4214-8460-9a903a68bfae",
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Error is 'ACCESS_NOT_FOUND'\", function () {\r",
							"    pm.expect(pm.response.json()['error']).to.eql('INVALID_PERIOD_FORMAT')\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": {\r\n\t    \"name\": \"Bob Ross\",\r\n\t    \"birthDate\": \"1991-07-10\",\r\n\t    \"gender\": \"MaLe\"\r\n    },\r\n    \"car\" : {\r\n        \"type\": \"gourmande\",\r\n        \"brand\": \"toyota\",\r\n        \"model\": \"corolla\",\r\n        \"year\": \"2020\",\r\n        \"licensePlate\": \"123 456\"\r\n    },\r\n    \"period\": {\r\n        \"type\": \"hourly\",\r\n        \"numberOfHours\": \"-1\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid CampusAccess purchase (more than 23 hours)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b65de233-8dbf-4794-b7ab-cd3bfb2c3dcb",
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Error is 'ACCESS_NOT_FOUND'\", function () {\r",
							"    pm.expect(pm.response.json()['error']).to.eql('INVALID_PERIOD_FORMAT')\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": {\r\n\t    \"name\": \"Bob Ross\",\r\n\t    \"birthDate\": \"1991-07-10\",\r\n\t    \"gender\": \"MaLe\"\r\n    },\r\n    \"car\" : {\r\n        \"type\": \"gourmande\",\r\n        \"brand\": \"toyota\",\r\n        \"model\": \"corolla\",\r\n        \"year\": \"2020\",\r\n        \"licensePlate\": \"123 456\"\r\n    },\r\n    \"period\": {\r\n        \"type\": \"hourly\",\r\n        \"numberOfHours\": \"24\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"id": "e3f4c89b-8612-42d1-8e03-4ff2e3212c3e",
			"key": "parkingZone",
			"value": "ZonE_3"
		},
		{
			"id": "824bf677-57cd-4fe4-a3ee-d8e8691738e3",
			"key": "parkingZone_2",
			"value": "zONe_2"
		},
		{
			"id": "84795b06-9d5b-4019-9d00-0e720ebaad71",
			"key": "today",
			"value": "2020-11-20"
		},
		{
			"id": "ade8197c-2077-4b39-b88c-05fba7d78a76",
			"key": "tomorrow",
			"value": "2020-11-21"
		},
		{
			"id": "2b219aae-75c0-4b63-8da2-713652fb7d51",
			"key": "weekday",
			"value": "friday"
		},
		{
			"id": "c80d32e7-f950-4092-96e1-d2b2855e3861",
			"key": "yesterday",
			"value": "2020-11-19"
		}
	],
	"protocolProfileBehavior": {}
}