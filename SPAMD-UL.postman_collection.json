{
	"info": {
		"_postman_id": "3ef96f94-c291-4566-a31e-7a9622f50ff2",
		"name": "SPAMD-UL",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Server is up",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "505a449c-9202-4cc6-8bdc-24d363bf1632",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "74cac979-644c-4d62-9e8a-50218600be50",
						"exec": [
							"const today = new Date()",
							"const yesterday = new Date()",
							"const tomorrow = new Date()",
							"",
							"function getDay(date) {",
							"    return (date < 10) ? \"0\" + date : date",
							"}",
							"",
							"yesterday.setDate(today.getDate() - 1)",
							"tomorrow.setDate(today.getDate() + 1)",
							"",
							"pm.collectionVariables.set(\"weekday\", today.toLocaleDateString('en-US', {weekday: 'long'}).toLowerCase())",
							"",
							"pm.collectionVariables.set(\"today\", `${today.getFullYear()}-${today.getMonth()+1}-${getDay(today.getDate())}`)",
							"pm.collectionVariables.set(\"yesterday\", `${yesterday.getFullYear()}-${yesterday.getMonth()+1}-${getDay(yesterday.getDate())}`)",
							"pm.collectionVariables.set(\"tomorrow\", `${tomorrow.getFullYear()}-${tomorrow.getMonth()+1}-${getDay(tomorrow.getDate())}`)",
							"",
							"pm.collectionVariables.set(\"parkingZone\", \"ZonE_3\")",
							"pm.collectionVariables.set(\"parkingZone_2\", \"zONe_2\")",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/ping",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"ping"
					]
				}
			},
			"response": []
		},
		{
			"name": "register user with id 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5339c276-69b0-48fa-8aa9-65631b9d9027",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['userId']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "bbaf1ade-1b27-4994-a7b9-93c927e8faa2",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Bob Ross\",\n    \"birthDate\": \"1991-07-10\",\n    \"gender\": \"MaLe\",\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licensePlate\": \"123 456\"\n    }\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/users",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": [
				{
					"name": "Buy campus access",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": {\n\t    \"name\": \"Bob Ross\",\n\t    \"birthDate\": \"1991-07-10\",\n\t    \"gender\": \"MaLe\"\n    },\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licencePlate\": \"xxx xxx\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"monday\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campus-access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campus-access"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:50:55 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccessCode\": \"1\"\n}"
				}
			]
		},
		{
			"name": "Buy campus access (single day per week per semester)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "22ccc804-c84f-4210-a19a-9cce0c74d4c4",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['campusAccessCode']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6c7c040a-2876-4be7-9a6d-a241e563fa6d",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": \"1\",\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"{{weekday}}\"\n    }\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": [
				{
					"name": "Buy campus access",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": {\n\t    \"name\": \"Bob Ross\",\n\t    \"birthDate\": \"1991-07-10\",\n\t    \"gender\": \"MaLe\"\n    },\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licencePlate\": \"xxx xxx\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"monday\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campus-access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campus-access"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:50:55 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccessCode\": \"1\"\n}"
				}
			]
		},
		{
			"name": "register user with id 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "36135402-f0b0-48dd-a153-bd1f8f156f97",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['userId']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "609568b6-8c05-4914-941a-321ab5b7f079",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Bob Ross\",\n    \"birthDate\": \"1991-07-10\",\n    \"gender\": \"MaLe\",\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licensePlate\": \"abc def\"\n    }\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/users",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": [
				{
					"name": "Buy campus access",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": {\n\t    \"name\": \"Bob Ross\",\n\t    \"birthDate\": \"1991-07-10\",\n\t    \"gender\": \"MaLe\"\n    },\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licencePlate\": \"xxx xxx\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"monday\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campus-access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campus-access"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:50:55 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccessCode\": \"1\"\n}"
				}
			]
		},
		{
			"name": "Buy campus access (single day per week per semester) Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9728261a-6966-4bc5-99ac-2f8fbb9b70e2",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['campusAccessCode']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": \"2\",\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"{{weekday}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": []
		},
		{
			"name": "register user with id 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bdb020ba-cf9d-4c59-9902-16b39910f4fa",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['userId']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "2bfccdfd-3311-4413-9d98-fb504809f58e",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Bob Ross\",\n    \"birthDate\": \"1991-07-10\",\n    \"gender\": \"MaLe\",\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licensePlate\": \"qwe rty\"\n    }\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/users",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": [
				{
					"name": "Buy campus access",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": {\n\t    \"name\": \"Bob Ross\",\n\t    \"birthDate\": \"1991-07-10\",\n\t    \"gender\": \"MaLe\"\n    },\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licencePlate\": \"xxx xxx\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"monday\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campus-access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campus-access"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:50:55 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccessCode\": \"1\"\n}"
				}
			]
		},
		{
			"name": "Buy campus access (single day per week per semester) Copy 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fb307356-6ecc-48e1-ba53-3b9ea31b2dfb",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['campusAccessCode']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": \"3\",\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"{{weekday}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": []
		},
		{
			"name": "register user with id 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3a581e58-6eb0-4942-98fd-144373bf2472",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['userId']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "24b123d9-df80-440a-a8e7-cafe5d9cd1bd",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Bob Ross\",\n    \"birthDate\": \"1991-07-10\",\n    \"gender\": \"MaLe\",\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licensePlate\": \"asd fgh\"\n    }\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/users",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": [
				{
					"name": "Buy campus access",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": {\n\t    \"name\": \"Bob Ross\",\n\t    \"birthDate\": \"1991-07-10\",\n\t    \"gender\": \"MaLe\"\n    },\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licencePlate\": \"xxx xxx\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"monday\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campus-access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campus-access"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:50:55 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccessCode\": \"1\"\n}"
				}
			]
		},
		{
			"name": "Buy campus access (two semesters)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "de469e81-e093-496d-8f5d-ca2f44a30bf5",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['campusAccessCode']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": \"4\",\n    \"period\": {\n        \"type\": \"two_semesters\",\n        \"semester\": \"a2020\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": []
		},
		{
			"name": "register user with id 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ca6db7d4-a9f4-489b-8c3a-f2483a2c9b59",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['userId']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "96ad16ff-5b50-420c-ba2b-cadf91bb3d41",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Bob Ross\",\n    \"birthDate\": \"1991-07-10\",\n    \"gender\": \"MaLe\",\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licensePlate\": \"zxc vbn\"\n    }\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/users",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": [
				{
					"name": "Buy campus access",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": {\n\t    \"name\": \"Bob Ross\",\n\t    \"birthDate\": \"1991-07-10\",\n\t    \"gender\": \"MaLe\"\n    },\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licencePlate\": \"xxx xxx\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"monday\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campus-access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campus-access"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:50:55 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccessCode\": \"1\"\n}"
				}
			]
		},
		{
			"name": "Buy campus access (two semesters) Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "67877d74-31f2-4b0f-91ee-922f82515b76",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['campusAccessCode']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": \"5\",\n    \"period\": {\n        \"type\": \"two_semesters\",\n        \"semester\": \"a2020\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buy pass postal with line2 (single day per week per semester)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c634b678-c63b-43f4-ad78-42ebce4c0ec8",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"body is empty\", function () {",
							"    pm.expect(pm.response.body).to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"parkingZone\": \"{{parkingZone}}\",\n    \"userId\": \"1\",\n    \"delivery\": {\n        \"deliveryMode\": \"post\",\n        \"postalAddress\": {\n            \"name\": \"Harry Potter\",\n            \"line1\": \"4 Privet Drive\",\n            \"line2\": \"In the cupboard under the stairs\",\n            \"city\": \"Little Whinging\",\n            \"province\": \"Surrey\",\n            \"postalCode\": \"N0L 1R0\",\n            \"country\": \"England\"\n        }\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"{{weekday}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/pass",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"pass"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buy pass postal with line2 (one semester)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2e217a01-ce58-418b-9ef3-4fb4a3a5f7b9",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"body is empty\", function () {",
							"    pm.expect(pm.response.body).to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"parkingZone\": \"{{parkingZone}}\",\n    \"userId\": \"4\",\n    \"delivery\": {\n        \"deliveryMode\": \"post\",\n        \"postalAddress\": {\n            \"name\": \"Harry Potter\",\n            \"line1\": \"4 Privet Drive\",\n            \"line2\": \"In the cupboard under the stairs\",\n            \"city\": \"Little Whinging\",\n            \"province\": \"Surrey\",\n            \"postalCode\": \"N0L 1R0\",\n            \"country\": \"England\"\n        }\n    },\n    \"period\": {\n        \"type\": \"one_semester\",\n        \"semester\": \"a2020\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/pass",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"pass"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buy pass postal without line2 (single day per week per semester)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "39f9077f-f80f-4c74-a8f3-c11455a64ecd",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"body is empty\", function () {",
							"    pm.expect(pm.response.body).to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"parkingZone\": \"{{parkingZone}}\",\n    \"userId\": \"2\",\n    \"delivery\": {\n        \"deliveryMode\": \"post\",\n        \"postalAddress\": {\n            \"name\": \"Harry Potter\",\n            \"line1\": \"4 Privet Drive\",\n            \"city\": \"Little Whinging\",\n            \"province\": \"Surrey\",\n            \"postalCode\": \"N0L 1R0\",\n            \"country\": \"England\"\n        }\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"{{weekday}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/pass",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"pass"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buy pass email (single day per week per semester)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a5cc7a2c-eeb9-46c7-bcff-ecb00104ff3a",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"body is empty\", function () {",
							"    pm.expect(pm.response.body).to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"parkingZone\": \"{{parkingZone}}\",\n    \"userId\": \"3\",\n    \"delivery\": {\n\t    \"deliveryMode\": \"email\",\n\t    \"emailAddress\": \"example@example.com\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"{{weekday}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/pass",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"pass"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buy pass ssp office (two semesters)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ed90977-9877-4cf5-a299-46b77437e2d1",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"body is empty\", function () {",
							"    pm.expect(pm.response.body).to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"parkingZone\": \"{{parkingZone}}\",\n    \"userId\": \"5\",\n    \"delivery\": {\n\t    \"deliveryMode\": \"ssp_office\"\n    },\n    \"period\": {\n        \"type\": \"two_semesters\",\n        \"semester\": \"a2020\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/pass",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"pass"
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid buy pass (wrong user id)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7daa394c-4b61-489e-ae02-0ff8ed2066c8",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Error is 'ACCESS_NOT_FOUND'\", function () {",
							"    pm.expect(pm.response.json()['error']).to.eql('INVALID_USER_ID')",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"parkingZone\": \"ZONE_3\",\n    \"userId\": \"592386487234\",\n    \"delivery\": {\n\t    \"deliveryMode\": \"email\",\n\t    \"emailAddress\": \"sebastien.nantel03@gmail.com\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"tuesday\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/pass",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"pass"
					]
				}
			},
			"response": [
				{
					"name": "Invalid buy pass (wrong access code)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"parkingZone\": \"ZONE_3\",\n    \"campusAccessCode\": \"5\",\n    \"deliveryInfos\": {\n\t    \"deliveryMode\": \"email\",\n\t    \"emailAddress\": \"sebastien.nantel03@gmail.com\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"tuesday\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/sale/",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"sale",
								""
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:51:37 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "71"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"ACCESS_NOT_FOUND\",\n    \"description\": \"No campus access with id 5\"\n}"
				}
			]
		},
		{
			"name": "Accessing campus with access code",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b4bc40c6-c9d6-4873-92d3-3fedf260202c",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Access is 'GRANTED'\", function () {",
							"    pm.expect(pm.response.json()['access']).to.eql('GRANTED')",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"campusAccessCode\": \"1\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access/access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access",
						"access"
					]
				}
			},
			"response": [
				{
					"name": "Accessing campus",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"campusAccessCode\": \"1\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campusaccess/access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campusaccess",
								"access"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 01 Oct 2020 17:40:41 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "20"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"access\": \"GRANTED\"\n}"
				},
				{
					"name": "Accessing campus",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"campusAccessCode\": \"2\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campusaccess/access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campusaccess",
								"access"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:24:21 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"access\": \"NOT GRANTED\"\n}"
				}
			]
		},
		{
			"name": "Accessing campus with license plate",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dc10599e-6d14-4b40-b6ee-7773934aa23f",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Access is 'GRANTED'\", function () {",
							"    pm.expect(pm.response.json()['access']).to.eql('GRANTED')",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"licensePlate\": \"123 456\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access/access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access",
						"access"
					]
				}
			},
			"response": [
				{
					"name": "Accessing campus",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"campusAccessCode\": \"2\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campusaccess/access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campusaccess",
								"access"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:24:21 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"access\": \"NOT GRANTED\"\n}"
				},
				{
					"name": "Accessing campus",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"campusAccessCode\": \"1\",\n   \"accessingCampusDate\": \"2020-10-01\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campusaccess/access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campusaccess",
								"access"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 01 Oct 2020 17:40:41 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "20"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"access\": \"GRANTED\"\n}"
				}
			]
		},
		{
			"name": "Invalid accessing campus (inexistant campus access code)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "925ff60b-50c1-4d19-ab60-8bba41cb9a18",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Access is 'NOT GRANTED'\", function () {",
							"    pm.expect(pm.response.json()['access']).to.eql('NOT GRANTED')",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"campusAccessCode\": \"5324629384\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access/access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access",
						"access"
					]
				}
			},
			"response": [
				{
					"name": "Ivanlid accessing campus (wrong code)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"campusAccessCode\": \"5\",\n   \"accessingCampusDate\": \"2020-10-02\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campusaccess/access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campusaccess",
								"access"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 01 Oct 2020 17:40:08 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"access\": \"NOT GRANTED\"\n}"
				}
			]
		},
		{
			"name": "register user with id 6 no car Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f04325cf-521f-44e6-93d0-812740c5cf63",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['userId']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "05a7fd53-8bca-45ae-ac7d-21ae1ca7312a",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Bob Ross\",\n    \"birthDate\": \"1991-07-10\",\n    \"gender\": \"MaLe\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/users",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": [
				{
					"name": "Buy campus access",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": {\n\t    \"name\": \"Bob Ross\",\n\t    \"birthDate\": \"1991-07-10\",\n\t    \"gender\": \"MaLe\"\n    },\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licencePlate\": \"xxx xxx\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"monday\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campus-access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campus-access"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:50:55 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccessCode\": \"1\"\n}"
				}
			]
		},
		{
			"name": "Buy bike parking pass",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "89535840-d8b3-4b5f-a0b3-a0a7d2db8cea",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"body is empty\", function () {",
							"    pm.expect(pm.response.body).to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"parkingZone\": \"zone_bike\",\n    \"userId\": \"6\",\n    \"delivery\": {\n        \"deliveryMode\": \"post\",\n        \"postalAddress\": {\n            \"name\": \"Bob Ross\",\n            \"line1\": \"1234 rue du tableau\",\n            \"line2\": \"woahh the beautiful tree\",\n            \"city\": \"quebec\",\n            \"province\": \"quebec\",\n            \"postalCode\": \"N0L 1R0\",\n            \"country\": \"canada\"\n        }\n    },\n    \"period\": {\n        \"type\": \"one_semester\",\n        \"semester\": \"a2020\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/pass",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"pass"
					]
				}
			},
			"response": []
		},
		{
			"name": "Accessing bike parking",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d41a0d31-8ee5-494b-a82a-e8914ed8fd60",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Access is 'GRANTED'\", function () {",
							"    pm.expect(pm.response.json()['access']).to.eql('GRANTED')",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/bike-parking/access/7",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"bike-parking",
						"access",
						"7"
					]
				}
			},
			"response": [
				{
					"name": "Accessing campus",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"campusAccessCode\": \"1\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campusaccess/access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campusaccess",
								"access"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 01 Oct 2020 17:40:41 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "20"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"access\": \"GRANTED\"\n}"
				},
				{
					"name": "Accessing campus",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"campusAccessCode\": \"2\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campusaccess/access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campusaccess",
								"access"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:24:21 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"access\": \"NOT GRANTED\"\n}"
				}
			]
		},
		{
			"name": "Buy campus access (no car)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "564acaf0-07ce-4959-8a90-c967ca0eaf2c",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['error']).equal(\"USER_MUST_OWN_A_CAR\");",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6c4f5fe4-55e7-4eab-9eb0-a6d1c06e652f",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": \"6\",\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"{{weekday}}\"\n    }\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": [
				{
					"name": "Buy campus access",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": {\n\t    \"name\": \"Bob Ross\",\n\t    \"birthDate\": \"1991-07-10\",\n\t    \"gender\": \"MaLe\"\n    },\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licencePlate\": \"xxx xxx\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"monday\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campus-access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campus-access"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:50:55 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccessCode\": \"1\"\n}"
				}
			]
		},
		{
			"name": "Usage report summary no login error",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e50a9fe6-d411-4b23-9f89-467f863c4c55",
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Set",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					]
				},
				"description": "Il est possible de faire n'importe quel combinaison de query params. Si le startDate n'est pas fournis la date par défaut est le premier du mois courant, si le endDate n'est pas founis la date par défaut est la journée courante, si la zone n'est pas fournis on considère toutes les zone."
			},
			"response": [
				{
					"name": "Usage report (summary)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/usage-report/summary",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"usage-report",
								"summary"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 01 Oct 2020 17:40:44 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "96"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"meanUsagePerDay\": 2,\n    \"mostPopularMonthDate\": \"2020-10-01\",\n    \"leastPopularMonthDate\": \"2020-10-01\"\n}"
				}
			]
		},
		{
			"name": "infraction no login error",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "13022f15-5981-458a-aee3-2726f0349a7c",
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"passCode\": \"1\",\n    \"parkingZone\": \"{{parkingZone_2}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/infractions",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"infractions"
					]
				}
			},
			"response": [
				{
					"name": "infraction zone",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"passCode\": \"1\",\n    \"parkingZone\": \"zone_1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/infractions",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"infractions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:26:38 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "76"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"infractionId\": \"2\",\n    \"code\": \"ZONE_01\",\n    \"reason\": \"mauvaise zone\",\n    \"amount\": 55\n}"
				}
			]
		},
		{
			"name": "Get initiatives no login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cf188d8e-92c6-4415-810d-20e47593c09d",
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/fundraising/initiatives",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"fundraising",
						"initiatives"
					]
				}
			},
			"response": [
				{
					"name": "initiatives Copy 3",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/fundraising/initiatives",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"fundraising",
								"initiatives"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:30:31 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "1580"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"initiatives\": [\n        {\n            \"id\": \"1\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"2\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"3\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"4\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"5\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"6\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"7\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"8\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"9\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"10\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"11\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"12\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"13\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"14\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"15\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"16\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"17\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"18\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"19\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"20\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"21\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"22\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"23\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"24\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"25\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"26\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"27\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"28\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"29\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"30\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"31\",\n            \"name\": \"une initiative\",\n            \"amount\": 2.5\n        },\n        {\n            \"id\": \"32\",\n            \"name\": \"une autre initiative\",\n            \"amount\": 15\n        },\n        {\n            \"id\": \"33\",\n            \"name\": \"encore une initiative\",\n            \"amount\": 1.05\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Revenue no login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e0ce1ef6-6ce1-4119-8a23-4ae11e77752e",
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/financial-report/revenue/",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"financial-report",
						"revenue",
						""
					]
				}
			},
			"response": [
				{
					"name": "get total revenue",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/financial-report/revenue/",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"financial-report",
								"revenue",
								""
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:52:44 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "284"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccess\": {\n        \"byCarType\": {\n            \"entry\": [\n                {\n                    \"key\": \"HYBRIDE_ECONOMIQUE\",\n                    \"value\": 0\n                },\n                {\n                    \"key\": \"SUPER_ECONOMIQUE\",\n                    \"value\": 5\n                },\n                {\n                    \"key\": \"GOURMANDE\",\n                    \"value\": 65\n                },\n                {\n                    \"key\": \"ECONOMIQUE\",\n                    \"value\": 30\n                },\n                {\n                    \"key\": \"SANS_POLLUTION\",\n                    \"value\": 0\n                }\n            ]\n        },\n        \"total\": 100\n    },\n    \"pass\": 489,\n    \"infraction\": 0,\n    \"total\": 589\n}"
				}
			]
		},
		{
			"name": "Karine login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "52155283-44b9-43c5-b867-c38802848940",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"Karine\",\n    \"hashedPassword\": \"hashed_password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/authentication/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"authentication",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "infraction wrong user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "676e83d6-4851-4931-8e35-a833f22912e7",
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"passCode\": \"1\",\n    \"parkingZone\": \"{{parkingZone_2}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/infractions",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"infractions"
					]
				}
			},
			"response": [
				{
					"name": "infraction zone",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"passCode\": \"1\",\n    \"parkingZone\": \"zone_1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/infractions",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"infractions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:26:38 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "76"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"infractionId\": \"2\",\n    \"code\": \"ZONE_01\",\n    \"reason\": \"mauvaise zone\",\n    \"amount\": 55\n}"
				}
			]
		},
		{
			"name": "Karine login Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a2c24f1d-7f81-4065-ad8e-17eb7f6de3cd",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"Karine\",\n    \"hashedPassword\": \"hashed_password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/authentication/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"authentication",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report summary",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0447af64-f2aa-4db0-9134-347109da6560",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Most popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['mostPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Least popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['leastPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Mean usage is more than 0\", function () {",
							"    pm.expect(pm.response.json()['meanUsagePerDay']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Set",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					]
				},
				"description": "Il est possible de faire n'importe quel combinaison de query params. Si le startDate n'est pas fournis la date par défaut est le premier du mois courant, si le endDate n'est pas founis la date par défaut est la journée courante, si la zone n'est pas fournis on considère toutes les zone."
			},
			"response": [
				{
					"name": "Usage report summary",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/usage-report/summary",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"usage-report",
								"summary"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 01 Oct 2020 17:40:44 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "96"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"meanUsagePerDay\": 2,\n    \"mostPopularMonthDate\": \"2020-10-01\",\n    \"leastPopularMonthDate\": \"2020-10-01\"\n}"
				}
			]
		},
		{
			"name": "Usage report summary (with parking category car)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d0b589e6-d07e-441f-aa39-968875fb4532",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Most popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['mostPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Least popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['leastPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Mean usage is more than 0\", function () {",
							"    pm.expect(pm.response.json()['meanUsagePerDay']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Set",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary?parkingCategory={{parkingCategoryCar}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					],
					"query": [
						{
							"key": "parkingCategory",
							"value": "{{parkingCategoryCar}}"
						}
					]
				},
				"description": "Il est possible de faire n'importe quel combinaison de query params. Si le startDate n'est pas fournis la date par défaut est le premier du mois courant, si le endDate n'est pas founis la date par défaut est la journée courante, si la zone n'est pas fournis on considère toutes les zone."
			},
			"response": [
				{
					"name": "Usage report summary (with parking category car)",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Set",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "127.0.0.1:8080/api/usage-report/summary?parkingCategory={{parkingCategoryCar}}",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"usage-report",
								"summary"
							],
							"query": [
								{
									"key": "parkingCategory",
									"value": "{{parkingCategoryCar}}"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Fri, 11 Dec 2020 20:59:51 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "127"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"meanUsagePerDay\": 0.18181819,\n    \"mostPopularMonthDate\": \"2020-12-11\",\n    \"leastPopularMonthDate\": \"2020-12-11\",\n    \"parkingCategory\": \"CAR\"\n}"
				}
			]
		},
		{
			"name": "Usage report summary (with parking category bike)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e3e5258d-2ba0-4535-b696-0be8d436ecb9",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Most popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['mostPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Least popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['leastPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Mean usage is more than 0\", function () {",
							"    pm.expect(pm.response.json()['meanUsagePerDay']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Set",
						"type": "text",
						"value": "",
						"disabled": true
					}
				],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary?parkingCategory={{parkingCategoryBike}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					],
					"query": [
						{
							"key": "parkingCategory",
							"value": "{{parkingCategoryBike}}"
						}
					]
				},
				"description": "Il est possible de faire n'importe quel combinaison de query params. Si le startDate n'est pas fournis la date par défaut est le premier du mois courant, si le endDate n'est pas founis la date par défaut est la journée courante, si la zone n'est pas fournis on considère toutes les zone."
			},
			"response": [
				{
					"name": "Usage report summary (with parking category bike)",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Set",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"url": {
							"raw": "127.0.0.1:8080/api/usage-report/summary?parkingCategory={{parkingCategoryBike}}",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"usage-report",
								"summary"
							],
							"query": [
								{
									"key": "parkingCategory",
									"value": "{{parkingCategoryBike}}"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Fri, 11 Dec 2020 21:00:15 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "128"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"meanUsagePerDay\": 0.09090909,\n    \"mostPopularMonthDate\": \"2020-12-11\",\n    \"leastPopularMonthDate\": \"2020-12-11\",\n    \"parkingCategory\": \"BIKE\"\n}"
				}
			]
		},
		{
			"name": "Usage report summary (with anterior start date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a1c3215a-0f1e-4354-a424-343f951d63dc",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Most popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['mostPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Least popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['leastPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Mean usage is more than 0\", function () {",
							"    pm.expect(pm.response.json()['meanUsagePerDay']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary?startDate={{yesterday}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					],
					"query": [
						{
							"key": "startDate",
							"value": "{{yesterday}}"
						}
					]
				},
				"description": "Il est possible de faire n'importe quel combinaison de query params. Si le startDate n'est pas fournis la date par défaut est le premier du mois courant, si le endDate n'est pas founis la date par défaut est la journée courante, si la zone n'est pas fournis on considère toutes les zone."
			},
			"response": []
		},
		{
			"name": "Usage report summary (with posterior start date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "98703f5a-0add-4f1e-a08a-fbc1b0f19479",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Most popular usage is not present\", function () {",
							"    pm.expect(pm.response.json()['mostPopularMonthDate']).to.eql(undefined);",
							"});",
							"",
							"pm.test(\"Least popular usage is not present\", function () {",
							"    pm.expect(pm.response.json()['leastPopularMonthDate']).to.eql(undefined);",
							"});",
							"",
							"pm.test(\"Mean usage is 0\", function () {",
							"    pm.expect(pm.response.json()['meanUsagePerDay']).to.eql(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary?startDate={{tomorrow}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					],
					"query": [
						{
							"key": "startDate",
							"value": "{{tomorrow}}"
						}
					]
				},
				"description": "Il est possible de faire n'importe quel combinaison de query params. Si le startDate n'est pas fournis la date par défaut est le premier du mois courant, si le endDate n'est pas founis la date par défaut est la journée courante, si la zone n'est pas fournis on considère toutes les zone."
			},
			"response": []
		},
		{
			"name": "Usage report summary (with parking zone without access)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4de5b664-942f-4b3b-8362-6c49d5d33535",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Most popular usage is not present\", function () {",
							"    pm.expect(pm.response.json()['mostPopularMonthDate']).to.eql(undefined);",
							"});",
							"",
							"pm.test(\"Least popular usage is not present\", function () {",
							"    pm.expect(pm.response.json()['leastPopularMonthDate']).to.eql(undefined);",
							"});",
							"",
							"pm.test(\"Mean usage is 0\", function () {",
							"    pm.expect(pm.response.json()['meanUsagePerDay']).to.eql(0);",
							"});",
							"",
							"pm.test(\"Parking zone is \" + pm.collectionVariables.get(\"parkingZone_2\").toUpperCase(), function () {",
							"    pm.expect(pm.response.json()['parkingZone']).to.eql(pm.collectionVariables.get(\"parkingZone_2\").toUpperCase());",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary?parkingZone={{parkingZone_2}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					],
					"query": [
						{
							"key": "parkingZone",
							"value": "{{parkingZone_2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report summary (with posterior end date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6b7760b0-1581-48c5-be23-6e6eeb6f23cf",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Most popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['mostPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Least popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['leastPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Mean usage is more than 0\", function () {",
							"    pm.expect(pm.response.json()['meanUsagePerDay']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary?endDate={{tomorrow}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					],
					"query": [
						{
							"key": "endDate",
							"value": "{{tomorrow}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report summary (with anterior end date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b587a1d3-2630-4eab-bfae-af4a6defcdb5",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Most popular usage is not present\", function () {",
							"    pm.expect(pm.response.json()['mostPopularMonthDate']).to.eql(undefined);",
							"});",
							"",
							"pm.test(\"Least popular usage is not present\", function () {",
							"    pm.expect(pm.response.json()['leastPopularMonthDate']).to.eql(undefined);",
							"});",
							"",
							"pm.test(\"Mean usage is 0\", function () {",
							"    pm.expect(pm.response.json()['meanUsagePerDay']).to.eql(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary?endDate={{yesterday}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					],
					"query": [
						{
							"key": "endDate",
							"value": "{{yesterday}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report summary (with all correct filters)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6d998547-2158-4f99-8475-b662ca0b535b",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Most popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['mostPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Least popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['leastPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Mean usage is more than 0\", function () {",
							"    pm.expect(pm.response.json()['meanUsagePerDay']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary?startDate={{today}}&endDate={{today}}&parkingZone={{parkingZone}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					],
					"query": [
						{
							"key": "startDate",
							"value": "{{today}}"
						},
						{
							"key": "endDate",
							"value": "{{today}}"
						},
						{
							"key": "parkingZone",
							"value": "{{parkingZone}}"
						}
					]
				}
			},
			"response": [
				{
					"name": "Usage report summary (with all correct filters)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/usage-report/summary?startDate={{today}}&endDate={{today}}&parkingZone={{parkingZone}}",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"usage-report",
								"summary"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{today}}"
								},
								{
									"key": "endDate",
									"value": "{{today}}"
								},
								{
									"key": "parkingZone",
									"value": "{{parkingZone}}"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:17:20 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "119"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"meanUsagePerDay\": 2,\n    \"mostPopularMonthDate\": \"2020-11-18\",\n    \"leastPopularMonthDate\": \"2020-11-18\",\n    \"parkingZone\": \"ZONE_3\"\n}"
				}
			]
		},
		{
			"name": "Usage report month",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8a55076b-dcfa-417c-b5f2-95d0c101a04b",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Usage report list is an array\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['usageReport'])).to.be.true;",
							"});",
							"",
							"pm.test(\"Usage report list is not empty\", function () {",
							"    pm.expect(pm.response.json()['usageReport']).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Total number of entry is more than 0\", function () {",
							"    pm.expect(pm.response.json()['totalOfEntry']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/month",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"month"
					]
				},
				"description": "Il est possible de faire n'importe quel combinaison de query params. Si le startDate n'est pas fournis la date par défaut est le premier du mois courant, si le endDate n'est pas founis la date par défaut est la journée courante, si la zone n'est pas fournis on considère toutes les zone."
			},
			"response": [
				{
					"name": "Usage report month",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/usage-report/month",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"usage-report",
								"month"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 01 Oct 2020 17:40:57 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "74"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"usageReport\": [\n        {\n            \"date\": \"2020-10-01\",\n            \"numberOfEntry\": 2\n        }\n    ],\n    \"totalOfEntry\": 2\n}"
				}
			]
		},
		{
			"name": "Usage report month (with parking category car)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fb85fd6b-f42b-4252-946f-4a8ba519259f",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Usage report list is an array\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['usageReport'])).to.be.true;",
							"});",
							"",
							"pm.test(\"Usage report list is not empty\", function () {",
							"    pm.expect(pm.response.json()['usageReport']).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Total number of entry is more than 0\", function () {",
							"    pm.expect(pm.response.json()['totalOfEntry']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/month?parkingCategory={{parkingCategoryCar}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"month"
					],
					"query": [
						{
							"key": "parkingCategory",
							"value": "{{parkingCategoryCar}}"
						}
					]
				},
				"description": "Il est possible de faire n'importe quel combinaison de query params. Si le startDate n'est pas fournis la date par défaut est le premier du mois courant, si le endDate n'est pas founis la date par défaut est la journée courante, si la zone n'est pas fournis on considère toutes les zone."
			},
			"response": [
				{
					"name": "Usage report month (with parking category car)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/usage-report/month?parkingCategory={{parkingCategoryCar}}",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"usage-report",
								"month"
							],
							"query": [
								{
									"key": "parkingCategory",
									"value": "{{parkingCategoryCar}}"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Fri, 11 Dec 2020 21:00:26 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "98"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"parkingCategory\": \"CAR\",\n    \"usageReport\": [\n        {\n            \"date\": \"2020-12-11\",\n            \"numberOfEntry\": 2\n        }\n    ],\n    \"totalOfEntry\": 2\n}"
				}
			]
		},
		{
			"name": "Usage report month (with parking category bike)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "735d84ec-bb41-4ffb-8565-db8112ad5eec",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Usage report list is an array\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['usageReport'])).to.be.true;",
							"});",
							"",
							"pm.test(\"Usage report list is not empty\", function () {",
							"    pm.expect(pm.response.json()['usageReport']).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Total number of entry is more than 0\", function () {",
							"    pm.expect(pm.response.json()['totalOfEntry']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/month?parkingCategory={{parkingCategoryBike}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"month"
					],
					"query": [
						{
							"key": "parkingCategory",
							"value": "{{parkingCategoryBike}}"
						}
					]
				},
				"description": "Il est possible de faire n'importe quel combinaison de query params. Si le startDate n'est pas fournis la date par défaut est le premier du mois courant, si le endDate n'est pas founis la date par défaut est la journée courante, si la zone n'est pas fournis on considère toutes les zone."
			},
			"response": [
				{
					"name": "Usage report month (with parking category bike)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/usage-report/month?parkingCategory={{parkingCategoryBike}}",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"usage-report",
								"month"
							],
							"query": [
								{
									"key": "parkingCategory",
									"value": "{{parkingCategoryBike}}"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Fri, 11 Dec 2020 21:00:40 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "99"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"parkingCategory\": \"BIKE\",\n    \"usageReport\": [\n        {\n            \"date\": \"2020-12-11\",\n            \"numberOfEntry\": 1\n        }\n    ],\n    \"totalOfEntry\": 1\n}"
				}
			]
		},
		{
			"name": "Usage report month (with anterior start date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1ff90644-acff-44d4-9fb8-a8841ecf78fd",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Usage report list is an array\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['usageReport'])).to.be.true;",
							"});",
							"",
							"pm.test(\"Usage report list is not empty\", function () {",
							"    pm.expect(pm.response.json()['usageReport']).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Total number of entry is more than 0\", function () {",
							"    pm.expect(pm.response.json()['totalOfEntry']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/month?startDate={{yesterday}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"month"
					],
					"query": [
						{
							"key": "startDate",
							"value": "{{yesterday}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report month (with posterior start date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c73ded41-63d9-4484-b92a-2bc7c05c0bd6",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Usage report list is an array\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['usageReport'])).to.be.true;",
							"});",
							"",
							"pm.test(\"Usage report list is empty\", function () {",
							"    pm.expect(pm.response.json()['usageReport']).to.be.empty;",
							"});",
							"",
							"pm.test(\"Total number of entry is 0\", function () {",
							"    pm.expect(pm.response.json()['totalOfEntry']).to.eql(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/month?startDate={{tomorrow}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"month"
					],
					"query": [
						{
							"key": "startDate",
							"value": "{{tomorrow}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report month (with parking zone without access)",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/month?parkingZone={{parkingZone_2}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"month"
					],
					"query": [
						{
							"key": "parkingZone",
							"value": "{{parkingZone_2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report month (with posterior end date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "78e7af99-43bd-47fc-997c-631e09c76c09",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Usage report list is an array\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['usageReport'])).to.be.true;",
							"});",
							"",
							"pm.test(\"Usage report list is not empty\", function () {",
							"    pm.expect(pm.response.json()['usageReport']).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Total number of entry is more than 0\", function () {",
							"    pm.expect(pm.response.json()['totalOfEntry']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/month?endDate={{tomorrow}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"month"
					],
					"query": [
						{
							"key": "endDate",
							"value": "{{tomorrow}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report month (with anterior end date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a509906b-56ed-4aa8-b604-e5bf33b0e070",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Usage report list is an array\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['usageReport'])).to.be.true;",
							"});",
							"",
							"pm.test(\"Usage report list is empty\", function () {",
							"    pm.expect(pm.response.json()['usageReport']).to.be.empty;",
							"});",
							"",
							"pm.test(\"Total number of entry is 0\", function () {",
							"    pm.expect(pm.response.json()['totalOfEntry']).to.eql(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/month?endDate={{yesterday}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"month"
					],
					"query": [
						{
							"key": "endDate",
							"value": "{{yesterday}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report month (with all filters)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "43aeee1d-43ff-42f7-9606-223ed26c99d2",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Usage report list is an array\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['usageReport'])).to.be.true;",
							"});",
							"",
							"pm.test(\"Usage report list is not empty\", function () {",
							"    pm.expect(pm.response.json()['usageReport']).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Total number of entry is more than 0\", function () {",
							"    pm.expect(pm.response.json()['totalOfEntry']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/month?startDate={{today}}&endDate={{today}}&parkingZone={{parkingZone}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"month"
					],
					"query": [
						{
							"key": "startDate",
							"value": "{{today}}"
						},
						{
							"key": "endDate",
							"value": "{{today}}"
						},
						{
							"key": "parkingZone",
							"value": "{{parkingZone}}"
						}
					]
				}
			},
			"response": [
				{
					"name": "Usage report month (with all filters)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/usage-report/month?startDate={{today}}&endDate={{today}}&parkingZone={{parkingZone}}",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"usage-report",
								"month"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{today}}"
								},
								{
									"key": "endDate",
									"value": "{{today}}"
								},
								{
									"key": "parkingZone",
									"value": "{{parkingZone}}"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:18:41 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "97"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"parkingZone\": \"ZONE_3\",\n    \"usageReport\": [\n        {\n            \"date\": \"2020-11-18\",\n            \"numberOfEntry\": 2\n        }\n    ],\n    \"totalOfEntry\": 2\n}"
				}
			]
		},
		{
			"name": "Dominique login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ec7f102d-49ea-4abc-9d70-2fab59592344",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"Dominique\",\n    \"hashedPassword\": \"hashed_password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/authentication/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"authentication",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report summary wrong user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "884c9da6-6637-435b-b359-8f2870d29f25",
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Set",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					]
				},
				"description": "Il est possible de faire n'importe quel combinaison de query params. Si le startDate n'est pas fournis la date par défaut est le premier du mois courant, si le endDate n'est pas founis la date par défaut est la journée courante, si la zone n'est pas fournis on considère toutes les zone."
			},
			"response": [
				{
					"name": "Usage report (summary)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/usage-report/summary",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"usage-report",
								"summary"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 01 Oct 2020 17:40:44 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "96"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"meanUsagePerDay\": 2,\n    \"mostPopularMonthDate\": \"2020-10-01\",\n    \"leastPopularMonthDate\": \"2020-10-01\"\n}"
				}
			]
		},
		{
			"name": "Get initiatives no login wrong user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4aacb01a-d16b-4c68-ab14-745b9ddf6038",
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/fundraising/initiatives",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"fundraising",
						"initiatives"
					]
				}
			},
			"response": [
				{
					"name": "initiatives Copy 3",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/fundraising/initiatives",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"fundraising",
								"initiatives"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:30:31 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "1580"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"initiatives\": [\n        {\n            \"id\": \"1\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"2\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"3\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"4\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"5\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"6\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"7\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"8\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"9\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"10\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"11\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"12\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"13\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"14\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"15\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"16\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"17\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"18\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"19\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"20\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"21\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"22\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"23\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"24\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"25\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"26\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"27\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"28\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"29\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"30\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"31\",\n            \"name\": \"une initiative\",\n            \"amount\": 2.5\n        },\n        {\n            \"id\": \"32\",\n            \"name\": \"une autre initiative\",\n            \"amount\": 15\n        },\n        {\n            \"id\": \"33\",\n            \"name\": \"encore une initiative\",\n            \"amount\": 1.05\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Revenue no login wong user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2f3c7a7e-eec4-46de-a5e0-919e0f2a89a8",
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/financial-report/revenue/",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"financial-report",
						"revenue",
						""
					]
				}
			},
			"response": [
				{
					"name": "get total revenue",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/financial-report/revenue/",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"financial-report",
								"revenue",
								""
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:52:44 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "284"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccess\": {\n        \"byCarType\": {\n            \"entry\": [\n                {\n                    \"key\": \"HYBRIDE_ECONOMIQUE\",\n                    \"value\": 0\n                },\n                {\n                    \"key\": \"SUPER_ECONOMIQUE\",\n                    \"value\": 5\n                },\n                {\n                    \"key\": \"GOURMANDE\",\n                    \"value\": 65\n                },\n                {\n                    \"key\": \"ECONOMIQUE\",\n                    \"value\": 30\n                },\n                {\n                    \"key\": \"SANS_POLLUTION\",\n                    \"value\": 0\n                }\n            ]\n        },\n        \"total\": 100\n    },\n    \"pass\": 489,\n    \"infraction\": 0,\n    \"total\": 589\n}"
				}
			]
		},
		{
			"name": "Dominique login Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4b1bb112-ceec-4f58-90e5-99d6436688ec",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"Dominique\",\n    \"hashedPassword\": \"hashed_password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/authentication/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"authentication",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Infraction (wrong zone)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1e9ecdc6-e617-41df-9379-7f0e409792d0",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Code is ZONE_01\", function () {",
							"    pm.expect(pm.response.json()['code']).to.eql('ZONE_01');",
							"});",
							"",
							"pm.test(\"Reason is 'mauvaise zone'\", function () {",
							"    pm.expect(pm.response.json()['reason']).to.eql('mauvaise zone');",
							"});",
							"",
							"pm.test(\"Amount is 55$\", function () {",
							"    pm.expect(pm.response.json()['amount']).to.eql(55);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"passCode\": \"1\",\n    \"parkingZone\": \"{{parkingZone_2}}\",\n    \"licensePlate\": \"123 456\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/infractions",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"infractions"
					]
				}
			},
			"response": [
				{
					"name": "Infraction (wrong zone)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"passCode\": \"1\",\n    \"parkingZone\": \"zone_1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/infractions",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"infractions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:26:38 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "76"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"infractionId\": \"2\",\n    \"code\": \"ZONE_01\",\n    \"reason\": \"mauvaise zone\",\n    \"amount\": 55\n}"
				}
			]
		},
		{
			"name": "Infraction (empty pass code)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a211a843-82b0-48d3-a0d3-9ce355517afe",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Code is VIG_03\", function () {",
							"    pm.expect(pm.response.json()['code']).to.eql('VIG_03');",
							"});",
							"",
							"pm.test(\"Reason is 'pas de vignette'\", function () {",
							"    pm.expect(pm.response.json()['reason']).to.eql('pas de vignette');",
							"});",
							"",
							"pm.test(\"Amount is 55$\", function () {",
							"    pm.expect(pm.response.json()['amount']).to.eql(55);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"passCode\": \"\",\n    \"parkingZone\": \"zone_1\",\n    \"licensePlate\": \"zxc vbn\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/infractions",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"infractions"
					]
				}
			},
			"response": [
				{
					"name": "Infraction (empty pass code)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"passCode\": \"\",\n    \"parkingZone\": \"zone_1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/infractions",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"infractions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:27:07 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "77"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"infractionId\": \"3\",\n    \"code\": \"VIG_03\",\n    \"reason\": \"pas de vignette\",\n    \"amount\": 55\n}"
				}
			]
		},
		{
			"name": "Infraction (invalid pass code)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5b0d1718-9ba4-4836-892f-6b6be9f3446c",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Code is VIG_02\", function () {",
							"    pm.expect(pm.response.json()['code']).to.eql('VIG_02');",
							"});",
							"",
							"pm.test(\"Reason is 'vignette invalide'\", function () {",
							"    pm.expect(pm.response.json()['reason']).to.eql('vignette invalide');",
							"});",
							"",
							"pm.test(\"Amount is 45$\", function () {",
							"    pm.expect(pm.response.json()['amount']).to.eql(45);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"passCode\": \"512983798\",\n    \"parkingZone\": \"zone_1\",\n    \"licensePlate\": \"asd fgh\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/infractions",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"infractions"
					]
				}
			},
			"response": [
				{
					"name": "Infraction (invalid pass code)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"passCode\": \"5\",\n    \"parkingZone\": \"zone_1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/infractions",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"infractions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:27:37 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "79"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"infractionId\": \"4\",\n    \"code\": \"VIG_02\",\n    \"reason\": \"vignette invalide\",\n    \"amount\": 45\n}"
				}
			]
		},
		{
			"name": "Pay infraction",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e00ba8f7-6864-4a6f-984e-40e45691ac3a",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"body is empty\", function () {",
							"    pm.expect(pm.response.body).to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"infractionId\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/infractions/pay",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"infractions",
						"pay"
					]
				}
			},
			"response": [
				{
					"name": "Pay infraction",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"infractionId\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/infractions/pay",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"infractions",
								"pay"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:22:35 GMT"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "0"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Re-pay infraction again",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b3ffb02d-582f-4b15-bc95-125977f37303",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"error is 'ALREADY_PAID_INFRACTION'\", function () {",
							"    pm.expect(pm.response.json()['error']).to.eql('ALREADY_PAID_INFRACTION')",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"infractionId\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/infractions/pay",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"infractions",
						"pay"
					]
				}
			},
			"response": [
				{
					"name": "Re-pay infraction again",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"infractionId\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/infractions/pay",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"infractions",
								"pay"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:21:10 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "90"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"ALREADY_PAID_INFRACTION\",\n    \"description\": \"Cette infraction a déjà été payée\"\n}"
				}
			]
		},
		{
			"name": "Karine login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a11284ea-fdca-4525-a8a3-4d48494058ef",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"Karine\",\n    \"hashedPassword\": \"hashed_password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/authentication/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"authentication",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create initiative",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8b9eb6f6-73b4-468c-b686-16a529ab77d8",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"name is present\", function () {",
							"    pm.expect(pm.response.json()['name']).not.to.be.empty",
							"})",
							"",
							"pm.test(\"amount is present\", function () {",
							"    pm.expect(pm.response.json()['amount']).not.to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"une initiative\",\n    \"amount\": \"2.50\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/fundraising/initiatives",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"fundraising",
						"initiatives"
					]
				}
			},
			"response": [
				{
					"name": "Create initiative",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"une initiative\",\n    \"amount\": \"2.50\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/fundraising/initiatives",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"fundraising",
								"initiatives"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:28:58 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "48"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"31\",\n    \"name\": \"une initiative\",\n    \"amount\": 2.5\n}"
				}
			]
		},
		{
			"name": "Create initiative (with crazy long decimals amount)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4751a4b0-774d-450a-893f-73ef19e61267",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"name is present\", function () {",
							"    pm.expect(pm.response.json()['name']).not.to.be.empty",
							"})",
							"",
							"pm.test(\"amount is present\", function () {",
							"    pm.expect(pm.response.json()['amount']).not.to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"encore une initiative\",\n    \"amount\": 1.05987564532544987568954769845796794576974950876908475968745976945876098745068450986094586098\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/fundraising/initiatives",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"fundraising",
						"initiatives"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create initiative (without name)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7b648e60-d5f0-4220-aa59-612590a461dc",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"error is 'INVALID_INITIATIVE_NAME'\", function () {",
							"    pm.expect(pm.response.json()['error']).to.eql('INVALID_INITIATIVE_NAME')",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"\",\n    \"amount\": \"15\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/fundraising/initiatives",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"fundraising",
						"initiatives"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create initiative (with too big amount)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f21ffc7b-a3f3-4886-9b7e-ef91aa931e07",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"error is 'INVALID_INITIATIVE_AMOUNT'\", function () {",
							"    pm.expect(pm.response.json()['error']).to.eql('INVALID_INITIATIVE_AMOUNT')",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"encore une initiative\",\n    \"amount\": \"10000000000\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/fundraising/initiatives",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"fundraising",
						"initiatives"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get initiatives",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6235a898-8686-43e6-8dbf-1c37508ed107",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"initiatives is not empty\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['initiatives'])).to.be.true",
							"    pm.expect(pm.response.json()['initiatives']).not.to.eql([])",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/fundraising/initiatives",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"fundraising",
						"initiatives"
					]
				}
			},
			"response": [
				{
					"name": "Get initiatives",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/fundraising/initiatives",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"fundraising",
								"initiatives"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:30:31 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "1580"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"initiatives\": [\n        {\n            \"id\": \"1\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"2\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"3\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"4\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"5\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"6\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"7\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"8\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"9\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"10\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"11\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"12\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"13\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"14\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"15\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"16\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"17\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"18\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"19\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"20\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"21\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"22\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"23\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"24\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"25\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"26\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"27\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"28\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"29\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"30\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"31\",\n            \"name\": \"une initiative\",\n            \"amount\": 2.5\n        },\n        {\n            \"id\": \"32\",\n            \"name\": \"une autre initiative\",\n            \"amount\": 15\n        },\n        {\n            \"id\": \"33\",\n            \"name\": \"encore une initiative\",\n            \"amount\": 1.05\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Deactivate carbon credits auto-tranfer",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "67e39b71-b1e4-4963-a980-505b105697ff",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"active is 'false'\", function () {",
							"    pm.expect(pm.response.json()['active']).to.not.be.true",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"active\": \"false\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/carbon-credits/activate",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"carbon-credits",
						"activate"
					]
				}
			},
			"response": [
				{
					"name": "Deactivate carbon credits auto-tranfer",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"active\": \"false\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/carbon-credits/activate",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"carbon-credits",
								"activate"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:25:10 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "16"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"active\": false\n}"
				}
			]
		},
		{
			"name": "Activate carbon credits auto-tranfer",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "07843ef8-cb7c-4d0a-b316-40f2dc971c71",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"active is 'true'\", function () {",
							"    pm.expect(pm.response.json()['active']).to.be.true",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"active\": \"true\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/carbon-credits/activate",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"carbon-credits",
						"activate"
					]
				}
			},
			"response": [
				{
					"name": "Activate carbon credits auto-transfer",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"active\": \"true\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/carbon-credits/activate",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"carbon-credits",
								"activate"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 22:22:20 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "15"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"active\": true\n}"
				}
			]
		},
		{
			"name": "Transfer carbon credits",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8ae5220b-3a60-4e1b-aaca-97bc9d2a827a",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"amount transferred is not empty\", function () {",
							"    pm.expect(pm.response.json()['transferred']).to.be.greaterThan(0)",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/admin/carbon-credits/transfer",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"admin",
						"carbon-credits",
						"transfer"
					]
				}
			},
			"response": [
				{
					"name": "Transfer carbon credits",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/admin/carbon-credits/transfer",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"admin",
								"carbon-credits",
								"transfer"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:25:22 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "21"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"transferred\": 951.2\n}"
				},
				{
					"name": "carbon credit Copy",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/carbon-credits/transfer",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"carbon-credits",
								"transfer"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:32:19 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "22"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"transferred\": 238.34\n}"
				}
			]
		},
		{
			"name": "Re-transfer carbon credits",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "658b6a16-c0d3-4afc-a8a0-95fdf66ae0fe",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"amount transferred is 0\", function () {",
							"    pm.expect(pm.response.json()['transferred']).to.eql(0)",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/admin/carbon-credits/transfer",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"admin",
						"carbon-credits",
						"transfer"
					]
				}
			},
			"response": [
				{
					"name": "Re-transfer carbon credits",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/admin/carbon-credits/transfer",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"admin",
								"carbon-credits",
								"transfer"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:25:47 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "19"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"transferred\": 0\n}"
				}
			]
		},
		{
			"name": "Get total credits transfered",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5ef39c91-f754-43cd-9ab6-b418751d735e",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"total is not empty\", function () {",
							"    pm.expect(pm.response.json()['total']).to.be.greaterThan(0)",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/financial-report/spending/carbon-credits",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"financial-report",
						"spending",
						"carbon-credits"
					]
				}
			},
			"response": [
				{
					"name": "Get total credits transfered",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/financial-report/spending/carbon-credits",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"financial-report",
								"spending",
								"carbon-credits"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:26:09 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "15"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"total\": 43.61\n}"
				}
			]
		},
		{
			"name": "Revenue (pass)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5447c968-9946-454e-9e35-de3f4d19015d",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ba85f1f1-596e-43f0-a302-3a2a886eabc7",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'revenue' is more than 0\", function () {",
							"    pm.expect(pm.response.json()['revenue']).to.be.greaterThan(0)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/financial-report/revenue/parking-pass",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"financial-report",
						"revenue",
						"parking-pass"
					]
				}
			},
			"response": [
				{
					"name": "Revenue (pass)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/financial-report/revenue/parking-pass",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"financial-report",
								"revenue",
								"parking-pass"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:52:38 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "17"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"revenue\": 489\n}"
				}
			]
		},
		{
			"name": "Revenue (infractions)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0c03b976-4500-45ed-b8fd-7666e919b799",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'revenue' is more than 0\", function () {",
							"    pm.expect(pm.response.json()['revenue']).to.be.greaterThan(0)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/financial-report/revenue/infractions",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"financial-report",
						"revenue",
						"infractions"
					]
				}
			},
			"response": [
				{
					"name": "Revenue (infractions)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/financial-report/revenue/infractions",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"financial-report",
								"revenue",
								"infractions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:53:41 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "16"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"revenue\": 52.8\n}"
				}
			]
		},
		{
			"name": "Revenue (campus access)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1e18f4a9-2b2c-4776-8d0f-c29393408a72",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'byCarType' has entries\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['byCarType']['entry'])).to.be.true",
							"    pm.expect(Array.isArray(pm.response.json()['byCarType']['entry'])).to.not.eql([])",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/financial-report/revenue/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"financial-report",
						"revenue",
						"campus-access"
					]
				}
			},
			"response": [
				{
					"name": "Revenue (campus access)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/financial-report/revenue/campus-access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"financial-report",
								"revenue",
								"campus-access"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:52:27 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "223"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"byCarType\": {\n        \"entry\": [\n            {\n                \"key\": \"HYBRIDE_ECONOMIQUE\",\n                \"value\": 0\n            },\n            {\n                \"key\": \"SUPER_ECONOMIQUE\",\n                \"value\": 5\n            },\n            {\n                \"key\": \"GOURMANDE\",\n                \"value\": 65\n            },\n            {\n                \"key\": \"ECONOMIQUE\",\n                \"value\": 30\n            },\n            {\n                \"key\": \"SANS_POLLUTION\",\n                \"value\": 0\n            }\n        ]\n    },\n    \"total\": 100\n}"
				}
			]
		},
		{
			"name": "Revenue",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b4ce4e3d-ef73-4cb6-b7ab-6dfaff3e665a",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'campusAccess' is not empty\", function () {",
							"    pm.expect(pm.response.json()['campusAccess']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'pass' is more than 0\", function () {",
							"    pm.expect(pm.response.json()['pass']).to.be.greaterThan(0)",
							"});",
							"",
							"pm.test(\"'infraction' is more than 0\", function () {",
							"    pm.expect(pm.response.json()['infraction']).to.be.greaterThan(0)",
							"});",
							"",
							"pm.test(\"'total' is more than 0\", function () {",
							"    pm.expect(pm.response.json()['total']).to.be.greaterThan(0)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/financial-report/revenue",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"financial-report",
						"revenue"
					]
				}
			},
			"response": [
				{
					"name": "Revenue",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/financial-report/revenue",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"financial-report",
								"revenue"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:27:14 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "290"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccess\": {\n        \"byCarType\": {\n            \"entry\": [\n                {\n                    \"key\": \"ECONOMIQUE\",\n                    \"value\": 30\n                },\n                {\n                    \"key\": \"GOURMANDE\",\n                    \"value\": 1065\n                },\n                {\n                    \"key\": \"HYBRIDE_ECONOMIQUE\",\n                    \"value\": 0\n                },\n                {\n                    \"key\": \"SUPER_ECONOMIQUE\",\n                    \"value\": 5\n                },\n                {\n                    \"key\": \"SANS_POLLUTION\",\n                    \"value\": 0\n                }\n            ]\n        },\n        \"total\": 1100\n    },\n    \"pass\": 1223,\n    \"infraction\": 22,\n    \"total\": 2345\n}"
				}
			]
		},
		{
			"name": "Create rechargUL card",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "14e9593d-27b9-48d5-809f-bcf4c69620b8",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'credits' is 0\", function () {",
							"    pm.expect(pm.response.json()['credits']).to.eql(0)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/rechargul",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"rechargul"
					]
				}
			},
			"response": [
				{
					"name": "Create rechargUL card",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/rechargul",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"rechargul"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:27:32 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "25"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"11\",\n    \"credits\": 0\n}"
				}
			]
		},
		{
			"name": "Get rechargUL card",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8ad61195-c387-4d16-b7f3-a5111088fb47",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'credits' is 0\", function () {",
							"    pm.expect(pm.response.json()['credits']).to.eql(0)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/rechargul/1",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"rechargul",
						"1"
					]
				}
			},
			"response": [
				{
					"name": "Get rechargUL card",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/rechargul/1",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"rechargul",
								"1"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:27:48 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"1\",\n    \"credits\": 0\n}"
				}
			]
		},
		{
			"name": "Get charging points",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a50febf3-f426-4cd6-b246-3be800d28a1e",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'chargingPoints' is not empty\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['chargingPoints'])).to.be.true",
							"    pm.expect(pm.response.json()['chargingPoints']).to.not.eql([])",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points"
					]
				}
			},
			"response": [
				{
					"name": "Get charging points",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:28:03 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "281"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"chargingPoints\": [\n        {\n            \"id\": \"1\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"2\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"3\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"4\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"5\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"6\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"7\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"8\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"9\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"10\",\n            \"state\": \"idle\"\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Get single charging point",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cc492faa-b120-45fc-9024-1978f09d0da8",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'state' is idle\", function () {",
							"    pm.expect(pm.response.json()['state']).to.eql(\"idle\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points/1",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points",
						"1"
					]
				}
			},
			"response": [
				{
					"name": "Get single charging point",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points/1",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points",
								"1"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:28:13 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "25"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"1\",\n    \"state\": \"idle\"\n}"
				}
			]
		},
		{
			"name": "Activate charging point (with non-existant card)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ed57a9d-0f51-4f04-9343-0b26071ec148",
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"'error' is \", function () {",
							"    pm.expect(pm.response.json()['error']).to.eql(\"RECHARGUL_CARD_NOT_FOUND\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"rechargULCardId\": \"1234234\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points/1/activate",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points",
						"1",
						"activate"
					]
				}
			},
			"response": [
				{
					"name": "Activate charging point (with non-existant card)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rechargULCardId\": \"1234234\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points/1/activate",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points",
								"1",
								"activate"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:28:47 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "87"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"RECHARGUL_CARD_NOT_FOUND\",\n    \"description\": \"This rechargUL card does not exist\"\n}"
				}
			]
		},
		{
			"name": "Activate charging point (with no credits card)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "29b38daf-a081-4514-9b11-0dffdfa6cf44",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"'error' is \", function () {",
							"    pm.expect(pm.response.json()['error']).to.eql(\"NOT_ENOUGH_CREDITS\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points/1/activate",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points",
						"1",
						"activate"
					]
				}
			},
			"response": [
				{
					"name": "Activate charging point (with no credits card)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points/1/activate",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points",
								"1",
								"activate"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:28:55 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "95"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"NOT_ENOUGH_CREDITS\",\n    \"description\": \"This rechargUL card does not have enough credits\"\n}"
				}
			]
		},
		{
			"name": "Add credits to card (with invalid amount)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "127771c3-1de7-4cdb-912b-4e005b5e2c49",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"'error' is INVALID_RECHARGUL_CREDITS\", function () {",
							"    pm.expect(pm.response.json()['error']).to.eql(\"INVALID_RECHARGUL_CREDITS\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"credits\": -1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/rechargul/1/credits",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"rechargul",
						"1",
						"credits"
					]
				}
			},
			"response": [
				{
					"name": "Add credits to card (with invalid amount)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"credits\": -1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/rechargul/1/credits",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"rechargul",
								"1",
								"credits"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:29:08 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "88"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"INVALID_RECHARGUL_CREDITS\",\n    \"description\": \"Invalid credits for rechargUL card\"\n}"
				}
			]
		},
		{
			"name": "Add credits to card",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0d08317f-c4de-46ef-b417-56a02eb31f93",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'credits' is not 0\", function () {",
							"    pm.expect(pm.response.json()['credits']).to.be.greaterThan(0)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"credits\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/rechargul/1/credits",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"rechargul",
						"1",
						"credits"
					]
				}
			},
			"response": [
				{
					"name": "Add credits to card",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"credits\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/rechargul/1/credits",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"rechargul",
								"1",
								"credits"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:29:26 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"1\",\n    \"credits\": 1\n}"
				}
			]
		},
		{
			"name": "Activate charging point",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b80156f6-7ba9-493e-ac52-3fed94f7de59",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'state' is activated\", function () {",
							"    pm.expect(pm.response.json()['state']).to.eql(\"activated\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points/1/activate",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points",
						"1",
						"activate"
					]
				}
			},
			"response": [
				{
					"name": "Activate charging point",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points/1/activate",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points",
								"1",
								"activate"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:29:37 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "30"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"1\",\n    \"state\": \"activated\"\n}"
				}
			]
		},
		{
			"name": "Connect charging point",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b986a18f-dc30-4f0c-b703-0215d1067cab",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'state' is charging\", function () {",
							"    pm.expect(pm.response.json()['state']).to.eql(\"charging\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points/1/connect",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points",
						"1",
						"connect"
					]
				}
			},
			"response": [
				{
					"name": "Connect charging point",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points/1/connect",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points",
								"1",
								"connect"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:29:57 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "29"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"1\",\n    \"state\": \"charging\"\n}"
				}
			]
		},
		{
			"name": "Disconnect charging point",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e855b37f-eff3-479f-b5e7-dc796cbfddb3",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'state' is activated\", function () {",
							"    pm.expect(pm.response.json()['state']).to.eql(\"activated\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points/1/disconnect",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points",
						"1",
						"disconnect"
					]
				}
			},
			"response": [
				{
					"name": "Disconnect charging point",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points/1/disconnect",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points",
								"1",
								"disconnect"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:30:09 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "30"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"1\",\n    \"state\": \"activated\"\n}"
				}
			]
		},
		{
			"name": "Deactivate charging point",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9e4f2c07-8468-48cc-8fc1-7a3bb441f7d8",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'state' is idle\", function () {",
							"    pm.expect(pm.response.json()['state']).to.eql(\"idle\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points/1/deactivate",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points",
						"1",
						"deactivate"
					]
				}
			},
			"response": [
				{
					"name": "Deactivate charging point",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points/1/deactivate",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points",
								"1",
								"deactivate"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:30:22 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "25"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"1\",\n    \"state\": \"idle\"\n}"
				}
			]
		},
		{
			"name": "Get rechargUL card (after debited)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fffed9b1-d293-41c6-a115-f68767cb3441",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'credits' is 0\", function () {",
							"    pm.expect(pm.response.json()['credits']).to.eql(0)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/rechargul/1",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"rechargul",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "wrong username login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fa21b7d1-6128-4985-8a54-098e6bd65ac8",
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"user\",\n    \"hashedPassword\": \"hashed_password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/authentication/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"authentication",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "wrong password login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "208429fa-e6df-496c-beeb-8fd7f31d1211",
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"Karine\",\n    \"hashedPassword\": \"wrong password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/authentication/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"authentication",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "register user with id 7",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ac128925-c6f7-4538-969a-11d47df967e8",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['userId']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "573bdd10-0402-4711-b16e-80ae62080f81",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Bob Ross\",\n    \"birthDate\": \"1991-07-10\",\n    \"gender\": \"MaLe\",\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licensePlate\": \"xxx xxx\"\n    }\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/users",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": [
				{
					"name": "Buy campus access",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": {\n\t    \"name\": \"Bob Ross\",\n\t    \"birthDate\": \"1991-07-10\",\n\t    \"gender\": \"MaLe\"\n    },\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licencePlate\": \"xxx xxx\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"monday\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campus-access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campus-access"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:50:55 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccessCode\": \"1\"\n}"
				}
			]
		},
		{
			"name": "Valid CampusAccess purchase",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cd3aa5f4-8d73-4e53-aa1b-65c9355f3f43",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userId\": \"7\",\r\n    \"period\": {\r\n        \"type\": \"hourly\",\r\n        \"numberOfHours\": \"1\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid CampussAccess purchase (neg hours)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0a5dd0e9-95f4-4265-ad2d-3c3f1cc06646",
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Error is 'ACCESS_NOT_FOUND'\", function () {\r",
							"    pm.expect(pm.response.json()['error']).to.eql('INVALID_NUMBER_OF_HOURS_FORMAT')\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": {\r\n\t    \"name\": \"Bob Ross\",\r\n\t    \"birthDate\": \"1991-07-10\",\r\n\t    \"gender\": \"MaLe\"\r\n    },\r\n    \"car\" : {\r\n        \"type\": \"gourmande\",\r\n        \"brand\": \"toyota\",\r\n        \"model\": \"corolla\",\r\n        \"year\": \"2020\",\r\n        \"licensePlate\": \"123 456\"\r\n    },\r\n    \"period\": {\r\n        \"type\": \"hourly\",\r\n        \"numberOfHours\": \"-1\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid CampusAccess purchase (more than 23 hours)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d89e6c94-a5f0-442e-b4dc-1578f5b18530",
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Error is 'ACCESS_NOT_FOUND'\", function () {\r",
							"    pm.expect(pm.response.json()['error']).to.eql('INVALID_NUMBER_OF_HOURS_FORMAT')\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": {\r\n\t    \"name\": \"Bob Ross\",\r\n\t    \"birthDate\": \"1991-07-10\",\r\n\t    \"gender\": \"MaLe\"\r\n    },\r\n    \"car\" : {\r\n        \"type\": \"gourmande\",\r\n        \"brand\": \"toyota\",\r\n        \"model\": \"corolla\",\r\n        \"year\": \"2020\",\r\n        \"licensePlate\": \"123 456\"\r\n    },\r\n    \"period\": {\r\n        \"type\": \"hourly\",\r\n        \"numberOfHours\": \"24\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "8589987b-f1f0-4964-90de-7bf204557ec7",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "30531921-87c4-428e-94e6-7ce00215e45c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "afb9fe7e-d52d-4dbe-bc96-4950a98c2d16",
			"key": "parkingZone",
			"value": "ZonE_3"
		},
		{
			"id": "43fcc5c2-76ac-4330-98d2-89da2d8113f7",
			"key": "parkingZone_2",
			"value": "zONe_2"
		},
		{
			"id": "19b89a50-368b-46bf-9f79-eb9d7ffc4107",
			"key": "parkingZoneBike",
			"value": "zone_bike"
		},
		{
			"id": "c09d8d12-b721-49ec-a3ad-f5dd9e451198",
			"key": "today",
			"value": "2020-12-11"
		},
		{
			"id": "1854e627-d2c1-4fff-9413-495453112fec",
			"key": "tomorrow",
			"value": "2020-12-12"
		},
		{
			"id": "816466c6-ee63-405f-85d1-763c2530773a",
			"key": "weekday",
			"value": "friday"
		},
		{
			"id": "2d4296fb-0b2e-48db-a087-1b84d2ac307b",
			"key": "yesterday",
			"value": "2020-12-10"
		},
		{
			"id": "e7a51457-080b-4d7f-a4b2-cefca3f6c0a7",
			"key": "parkingCategoryBike",
			"value": "bike"
		},
		{
			"id": "50d03abc-e5c9-4e73-9f65-49030176654a",
			"key": "parkingCategoryCar",
			"value": "car"
		}
	],
	"protocolProfileBehavior": {}
}