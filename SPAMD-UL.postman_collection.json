{
	"info": {
		"_postman_id": "032d00f6-69e9-469c-a5fb-34b6c813b1f2",
		"name": "SPAMD-UL",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Server is up",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5ba8cc70-fb6a-41b0-a5dd-7138247a0ff7",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "4cc715e6-04b5-46ce-b0f8-0037590482b8",
						"exec": [
							"const today = new Date()",
							"const yesterday = new Date()",
							"const tomorrow = new Date()",
							"",
							"function getDay(date) {",
							"    return (date < 10) ? \"0\" + date : date",
							"}",
							"",
							"yesterday.setDate(today.getDate() - 1)",
							"tomorrow.setDate(today.getDate() + 1)",
							"",
							"pm.collectionVariables.set(\"weekday\", today.toLocaleDateString('en-US', {weekday: 'long'}).toLowerCase())",
							"",
							"pm.collectionVariables.set(\"today\", `${today.getFullYear()}-${today.getMonth()+1}-${getDay(today.getDate())}`)",
							"pm.collectionVariables.set(\"yesterday\", `${yesterday.getFullYear()}-${yesterday.getMonth()+1}-${getDay(yesterday.getDate())}`)",
							"pm.collectionVariables.set(\"tomorrow\", `${tomorrow.getFullYear()}-${tomorrow.getMonth()+1}-${getDay(tomorrow.getDate())}`)",
							"",
							"pm.collectionVariables.set(\"parkingZone\", \"ZonE_3\")",
							"pm.collectionVariables.set(\"parkingZone_2\", \"zONe_2\")",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/ping",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"ping"
					]
				}
			},
			"response": []
		},
		{
			"name": "register user with id 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "eca722d5-7f3b-4c58-9f43-053c42ef47e3",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['userId']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "7f193f92-f812-4015-a74f-dbb012a503b1",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Bob Ross\",\n    \"birthDate\": \"1991-07-10\",\n    \"gender\": \"MaLe\",\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licensePlate\": \"123 456\"\n    }\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/users",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": [
				{
					"name": "Buy campus access",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": {\n\t    \"name\": \"Bob Ross\",\n\t    \"birthDate\": \"1991-07-10\",\n\t    \"gender\": \"MaLe\"\n    },\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licencePlate\": \"xxx xxx\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"monday\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campus-access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campus-access"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:50:55 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccessCode\": \"1\"\n}"
				}
			]
		},
		{
			"name": "Buy campus access (single day per week per semester)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "feb19a05-039c-487c-bf96-b669479c4320",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['campusAccessCode']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "a4536ce0-5ab5-4b21-8bb2-a176c6f008f0",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": \"1\",\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"{{weekday}}\"\n    }\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": [
				{
					"name": "Buy campus access",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": {\n\t    \"name\": \"Bob Ross\",\n\t    \"birthDate\": \"1991-07-10\",\n\t    \"gender\": \"MaLe\"\n    },\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licencePlate\": \"xxx xxx\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"monday\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campus-access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campus-access"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:50:55 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccessCode\": \"1\"\n}"
				}
			]
		},
		{
			"name": "register user with id 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "83f6009a-0c8c-4d4e-a6f5-284b5f5d8058",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['userId']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "0a9d3b99-b651-4c0b-b133-30027bbffdee",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Bob Ross\",\n    \"birthDate\": \"1991-07-10\",\n    \"gender\": \"MaLe\",\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licensePlate\": \"abc def\"\n    }\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/users",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": [
				{
					"name": "Buy campus access",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": {\n\t    \"name\": \"Bob Ross\",\n\t    \"birthDate\": \"1991-07-10\",\n\t    \"gender\": \"MaLe\"\n    },\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licencePlate\": \"xxx xxx\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"monday\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campus-access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campus-access"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:50:55 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccessCode\": \"1\"\n}"
				}
			]
		},
		{
			"name": "Buy campus access (single day per week per semester) Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0f0fd3f2-ed1d-4c4c-a8b1-f7d33203b490",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['campusAccessCode']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": \"2\",\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"{{weekday}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": []
		},
		{
			"name": "register user with id 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "12d52a6f-0ff5-4e26-b6b9-b9c277113046",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['userId']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "bca1eab7-b98f-486a-badd-7cc799d57b7b",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Bob Ross\",\n    \"birthDate\": \"1991-07-10\",\n    \"gender\": \"MaLe\",\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licensePlate\": \"qwe rty\"\n    }\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/users",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": [
				{
					"name": "Buy campus access",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": {\n\t    \"name\": \"Bob Ross\",\n\t    \"birthDate\": \"1991-07-10\",\n\t    \"gender\": \"MaLe\"\n    },\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licencePlate\": \"xxx xxx\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"monday\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campus-access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campus-access"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:50:55 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccessCode\": \"1\"\n}"
				}
			]
		},
		{
			"name": "Buy campus access (single day per week per semester) Copy 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8c0086cb-18c8-4101-8be7-e1db9921ec3a",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['campusAccessCode']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": \"3\",\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"{{weekday}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": []
		},
		{
			"name": "register user with id 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8ccecc88-884f-4b96-9445-ae96812a840a",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['userId']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "068e3888-a768-4b36-a6d2-53959959acf2",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Bob Ross\",\n    \"birthDate\": \"1991-07-10\",\n    \"gender\": \"MaLe\",\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licensePlate\": \"asd fgh\"\n    }\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/users",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": [
				{
					"name": "Buy campus access",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": {\n\t    \"name\": \"Bob Ross\",\n\t    \"birthDate\": \"1991-07-10\",\n\t    \"gender\": \"MaLe\"\n    },\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licencePlate\": \"xxx xxx\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"monday\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campus-access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campus-access"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:50:55 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccessCode\": \"1\"\n}"
				}
			]
		},
		{
			"name": "Buy campus access (two semesters)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "97f1f134-b0bc-443d-ba12-0ae09ae2fe07",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['campusAccessCode']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": \"4\",\n    \"period\": {\n        \"type\": \"two_semesters\",\n        \"semester\": \"a2020\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": []
		},
		{
			"name": "register user with id 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5dd09d1e-d528-43ef-b601-61e7c1685d32",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['userId']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "78e6cb2a-2523-4fc6-8c87-7357cfec8d13",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Bob Ross\",\n    \"birthDate\": \"1991-07-10\",\n    \"gender\": \"MaLe\",\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licensePlate\": \"zxc vbn\"\n    }\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/users",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": [
				{
					"name": "Buy campus access",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": {\n\t    \"name\": \"Bob Ross\",\n\t    \"birthDate\": \"1991-07-10\",\n\t    \"gender\": \"MaLe\"\n    },\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licencePlate\": \"xxx xxx\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"monday\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campus-access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campus-access"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:50:55 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccessCode\": \"1\"\n}"
				}
			]
		},
		{
			"name": "Buy campus access (two semesters) Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b93e0044-2a21-459d-affc-ac55d439a799",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['campusAccessCode']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": \"5\",\n    \"period\": {\n        \"type\": \"two_semesters\",\n        \"semester\": \"a2020\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buy pass postal with line2 (single day per week per semester)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a430b0ae-6fbe-4cd8-8b96-f4664671a465",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"body is empty\", function () {",
							"    pm.expect(pm.response.body).to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"parkingZone\": \"{{parkingZone}}\",\n    \"userId\": \"1\",\n    \"delivery\": {\n        \"deliveryMode\": \"post\",\n        \"postalAddress\": {\n            \"name\": \"Harry Potter\",\n            \"line1\": \"4 Privet Drive\",\n            \"line2\": \"In the cupboard under the stairs\",\n            \"city\": \"Little Whinging\",\n            \"province\": \"Surrey\",\n            \"postalCode\": \"N0L 1R0\",\n            \"country\": \"England\"\n        }\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"{{weekday}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/pass",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"pass"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buy pass postal with line2 (one semester)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "700a1d52-65bd-4b0e-998e-b32e34d3e2c4",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"body is empty\", function () {",
							"    pm.expect(pm.response.body).to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"parkingZone\": \"{{parkingZone}}\",\n    \"userId\": \"4\",\n    \"delivery\": {\n        \"deliveryMode\": \"post\",\n        \"postalAddress\": {\n            \"name\": \"Harry Potter\",\n            \"line1\": \"4 Privet Drive\",\n            \"line2\": \"In the cupboard under the stairs\",\n            \"city\": \"Little Whinging\",\n            \"province\": \"Surrey\",\n            \"postalCode\": \"N0L 1R0\",\n            \"country\": \"England\"\n        }\n    },\n    \"period\": {\n        \"type\": \"one_semester\",\n        \"semester\": \"a2020\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/pass",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"pass"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buy pass postal without line2 (single day per week per semester)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "81f0de39-2460-435d-923b-17dd687b772b",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"body is empty\", function () {",
							"    pm.expect(pm.response.body).to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"parkingZone\": \"{{parkingZone}}\",\n    \"userId\": \"2\",\n    \"delivery\": {\n        \"deliveryMode\": \"post\",\n        \"postalAddress\": {\n            \"name\": \"Harry Potter\",\n            \"line1\": \"4 Privet Drive\",\n            \"city\": \"Little Whinging\",\n            \"province\": \"Surrey\",\n            \"postalCode\": \"N0L 1R0\",\n            \"country\": \"England\"\n        }\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"{{weekday}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/pass",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"pass"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buy pass email (single day per week per semester)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bea3eb8d-e1b2-49e9-8e96-e4a52699c490",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"body is empty\", function () {",
							"    pm.expect(pm.response.body).to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"parkingZone\": \"{{parkingZone}}\",\n    \"userId\": \"3\",\n    \"delivery\": {\n\t    \"deliveryMode\": \"email\",\n\t    \"emailAddress\": \"example@example.com\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"{{weekday}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/pass",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"pass"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buy pass ssp office (two semesters)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8252d5b7-7fcc-44c8-b0a0-6ecad071e723",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"body is empty\", function () {",
							"    pm.expect(pm.response.body).to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"parkingZone\": \"{{parkingZone}}\",\n    \"userId\": \"5\",\n    \"delivery\": {\n\t    \"deliveryMode\": \"ssp_office\"\n    },\n    \"period\": {\n        \"type\": \"two_semesters\",\n        \"semester\": \"a2020\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/pass",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"pass"
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid buy pass (wrong user id)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8765e2ea-9c3f-4e2d-9e09-a03b23f3ea58",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Error is 'ACCESS_NOT_FOUND'\", function () {",
							"    pm.expect(pm.response.json()['error']).to.eql('INVALID_USER_ID')",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"parkingZone\": \"ZONE_3\",\n    \"userId\": \"592386487234\",\n    \"delivery\": {\n\t    \"deliveryMode\": \"email\",\n\t    \"emailAddress\": \"sebastien.nantel03@gmail.com\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"tuesday\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/pass",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"pass"
					]
				}
			},
			"response": [
				{
					"name": "Invalid buy pass (wrong access code)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"parkingZone\": \"ZONE_3\",\n    \"campusAccessCode\": \"5\",\n    \"deliveryInfos\": {\n\t    \"deliveryMode\": \"email\",\n\t    \"emailAddress\": \"sebastien.nantel03@gmail.com\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"tuesday\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/sale/",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"sale",
								""
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:51:37 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "71"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"ACCESS_NOT_FOUND\",\n    \"description\": \"No campus access with id 5\"\n}"
				}
			]
		},
		{
			"name": "Accessing campus with access code",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "46b711b1-8759-427a-b80c-bdd8cd2f8910",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Access is 'GRANTED'\", function () {",
							"    pm.expect(pm.response.json()['access']).to.eql('GRANTED')",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"campusAccessCode\": \"1\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access/access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access",
						"access"
					]
				}
			},
			"response": [
				{
					"name": "Accessing campus",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"campusAccessCode\": \"2\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campusaccess/access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campusaccess",
								"access"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:24:21 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"access\": \"NOT GRANTED\"\n}"
				},
				{
					"name": "Accessing campus",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"campusAccessCode\": \"1\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campusaccess/access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campusaccess",
								"access"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 01 Oct 2020 17:40:41 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "20"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"access\": \"GRANTED\"\n}"
				}
			]
		},
		{
			"name": "Accessing campus with license plate",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "86af891b-b802-4a5f-a218-4cb08ef9f37e",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Access is 'GRANTED'\", function () {",
							"    pm.expect(pm.response.json()['access']).to.eql('GRANTED')",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"licensePlate\": \"123 456\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access/access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access",
						"access"
					]
				}
			},
			"response": [
				{
					"name": "Accessing campus",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"campusAccessCode\": \"2\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campusaccess/access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campusaccess",
								"access"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:24:21 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"access\": \"NOT GRANTED\"\n}"
				},
				{
					"name": "Accessing campus",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"campusAccessCode\": \"1\",\n   \"accessingCampusDate\": \"2020-10-01\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campusaccess/access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campusaccess",
								"access"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 01 Oct 2020 17:40:41 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "20"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"access\": \"GRANTED\"\n}"
				}
			]
		},
		{
			"name": "Invalid accessing campus (inexistant campus access code)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2e2d2870-7ee4-44b0-bd07-044530ef96ab",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Access is 'NOT GRANTED'\", function () {",
							"    pm.expect(pm.response.json()['access']).to.eql('NOT GRANTED')",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"campusAccessCode\": \"5324629384\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access/access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access",
						"access"
					]
				}
			},
			"response": [
				{
					"name": "Ivanlid accessing campus (wrong code)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"campusAccessCode\": \"5\",\n   \"accessingCampusDate\": \"2020-10-02\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campusaccess/access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campusaccess",
								"access"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 01 Oct 2020 17:40:08 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"access\": \"NOT GRANTED\"\n}"
				}
			]
		},
		{
			"name": "Usage report summary no login error",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "76e953cf-f07b-4ae5-b13f-1495a3110526",
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Set",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					]
				},
				"description": "Il est possible de faire n'importe quel combinaison de query params. Si le startDate n'est pas fournis la date par défaut est le premier du mois courant, si le endDate n'est pas founis la date par défaut est la journée courante, si la zone n'est pas fournis on considère toutes les zone."
			},
			"response": [
				{
					"name": "Usage report (summary)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/usage-report/summary",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"usage-report",
								"summary"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 01 Oct 2020 17:40:44 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "96"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"meanUsagePerDay\": 2,\n    \"mostPopularMonthDate\": \"2020-10-01\",\n    \"leastPopularMonthDate\": \"2020-10-01\"\n}"
				}
			]
		},
		{
			"name": "infraction no login error",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "53ee1636-dc1d-48ed-bcb2-66dc8cd001f6",
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"passCode\": \"1\",\n    \"parkingZone\": \"{{parkingZone_2}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/infractions",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"infractions"
					]
				}
			},
			"response": [
				{
					"name": "infraction zone",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"passCode\": \"1\",\n    \"parkingZone\": \"zone_1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/infractions",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"infractions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:26:38 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "76"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"infractionId\": \"2\",\n    \"code\": \"ZONE_01\",\n    \"reason\": \"mauvaise zone\",\n    \"amount\": 55\n}"
				}
			]
		},
		{
			"name": "Get initiatives no login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b7ee55a1-80e2-4954-9adb-e30707d46994",
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/fundraising/initiatives",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"fundraising",
						"initiatives"
					]
				}
			},
			"response": [
				{
					"name": "initiatives Copy 3",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/fundraising/initiatives",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"fundraising",
								"initiatives"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:30:31 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "1580"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"initiatives\": [\n        {\n            \"id\": \"1\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"2\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"3\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"4\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"5\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"6\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"7\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"8\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"9\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"10\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"11\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"12\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"13\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"14\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"15\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"16\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"17\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"18\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"19\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"20\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"21\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"22\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"23\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"24\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"25\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"26\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"27\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"28\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"29\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"30\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"31\",\n            \"name\": \"une initiative\",\n            \"amount\": 2.5\n        },\n        {\n            \"id\": \"32\",\n            \"name\": \"une autre initiative\",\n            \"amount\": 15\n        },\n        {\n            \"id\": \"33\",\n            \"name\": \"encore une initiative\",\n            \"amount\": 1.05\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Revenue no login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e0c95099-96a2-46d6-9be4-15580d631bd0",
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/financial-report/revenue/",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"financial-report",
						"revenue",
						""
					]
				}
			},
			"response": [
				{
					"name": "get total revenue",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/financial-report/revenue/",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"financial-report",
								"revenue",
								""
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:52:44 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "284"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccess\": {\n        \"byCarType\": {\n            \"entry\": [\n                {\n                    \"key\": \"HYBRIDE_ECONOMIQUE\",\n                    \"value\": 0\n                },\n                {\n                    \"key\": \"SUPER_ECONOMIQUE\",\n                    \"value\": 5\n                },\n                {\n                    \"key\": \"GOURMANDE\",\n                    \"value\": 65\n                },\n                {\n                    \"key\": \"ECONOMIQUE\",\n                    \"value\": 30\n                },\n                {\n                    \"key\": \"SANS_POLLUTION\",\n                    \"value\": 0\n                }\n            ]\n        },\n        \"total\": 100\n    },\n    \"pass\": 489,\n    \"infraction\": 0,\n    \"total\": 589\n}"
				}
			]
		},
		{
			"name": "Karine login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0132d548-7a27-4185-bca0-977d3408a939",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"Karine\",\n    \"hashedPassword\": \"hashed_password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/authentication/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"authentication",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "infraction wrong user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "15ebbcf9-22f0-4dcb-aa2e-d585f6ac9412",
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"passCode\": \"1\",\n    \"parkingZone\": \"{{parkingZone_2}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/infractions",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"infractions"
					]
				}
			},
			"response": [
				{
					"name": "infraction zone",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"passCode\": \"1\",\n    \"parkingZone\": \"zone_1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/infractions",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"infractions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:26:38 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "76"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"infractionId\": \"2\",\n    \"code\": \"ZONE_01\",\n    \"reason\": \"mauvaise zone\",\n    \"amount\": 55\n}"
				}
			]
		},
		{
			"name": "Karine login Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ca0e0f9-d4b0-48b4-9fac-93b95bc01564",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"Karine\",\n    \"hashedPassword\": \"hashed_password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/authentication/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"authentication",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report summary",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "344c1483-c80f-4983-8466-7d7ce6811210",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Most popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['mostPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Least popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['leastPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Mean usage is more than 0\", function () {",
							"    pm.expect(pm.response.json()['meanUsagePerDay']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Set",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					]
				},
				"description": "Il est possible de faire n'importe quel combinaison de query params. Si le startDate n'est pas fournis la date par défaut est le premier du mois courant, si le endDate n'est pas founis la date par défaut est la journée courante, si la zone n'est pas fournis on considère toutes les zone."
			},
			"response": [
				{
					"name": "Usage report summary",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/usage-report/summary",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"usage-report",
								"summary"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 01 Oct 2020 17:40:44 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "96"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"meanUsagePerDay\": 2,\n    \"mostPopularMonthDate\": \"2020-10-01\",\n    \"leastPopularMonthDate\": \"2020-10-01\"\n}"
				}
			]
		},
		{
			"name": "Usage report summary (with anterior start date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "16e374aa-6b6d-44df-803f-b349e29d91b1",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Most popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['mostPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Least popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['leastPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Mean usage is more than 0\", function () {",
							"    pm.expect(pm.response.json()['meanUsagePerDay']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary?startDate={{yesterday}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					],
					"query": [
						{
							"key": "startDate",
							"value": "{{yesterday}}"
						}
					]
				},
				"description": "Il est possible de faire n'importe quel combinaison de query params. Si le startDate n'est pas fournis la date par défaut est le premier du mois courant, si le endDate n'est pas founis la date par défaut est la journée courante, si la zone n'est pas fournis on considère toutes les zone."
			},
			"response": []
		},
		{
			"name": "Usage report summary (with posterior start date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "79224761-63a9-4d24-a8d1-f9aa8ea00138",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Most popular usage is not present\", function () {",
							"    pm.expect(pm.response.json()['mostPopularMonthDate']).to.eql(undefined);",
							"});",
							"",
							"pm.test(\"Least popular usage is not present\", function () {",
							"    pm.expect(pm.response.json()['leastPopularMonthDate']).to.eql(undefined);",
							"});",
							"",
							"pm.test(\"Mean usage is 0\", function () {",
							"    pm.expect(pm.response.json()['meanUsagePerDay']).to.eql(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary?startDate={{tomorrow}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					],
					"query": [
						{
							"key": "startDate",
							"value": "{{tomorrow}}"
						}
					]
				},
				"description": "Il est possible de faire n'importe quel combinaison de query params. Si le startDate n'est pas fournis la date par défaut est le premier du mois courant, si le endDate n'est pas founis la date par défaut est la journée courante, si la zone n'est pas fournis on considère toutes les zone."
			},
			"response": []
		},
		{
			"name": "Usage report summary (with parking zone without access)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "edfddfed-383a-4608-a3bd-edb54dad6116",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Most popular usage is not present\", function () {",
							"    pm.expect(pm.response.json()['mostPopularMonthDate']).to.eql(undefined);",
							"});",
							"",
							"pm.test(\"Least popular usage is not present\", function () {",
							"    pm.expect(pm.response.json()['leastPopularMonthDate']).to.eql(undefined);",
							"});",
							"",
							"pm.test(\"Mean usage is 0\", function () {",
							"    pm.expect(pm.response.json()['meanUsagePerDay']).to.eql(0);",
							"});",
							"",
							"pm.test(\"Parking zone is \" + pm.collectionVariables.get(\"parkingZone_2\").toUpperCase(), function () {",
							"    pm.expect(pm.response.json()['parkingZone']).to.eql(pm.collectionVariables.get(\"parkingZone_2\").toUpperCase());",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary?parkingZone={{parkingZone_2}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					],
					"query": [
						{
							"key": "parkingZone",
							"value": "{{parkingZone_2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report summary (with posterior end date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "708f4d2a-60da-407d-88e0-09b84bd15d7e",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Most popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['mostPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Least popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['leastPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Mean usage is more than 0\", function () {",
							"    pm.expect(pm.response.json()['meanUsagePerDay']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary?endDate={{tomorrow}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					],
					"query": [
						{
							"key": "endDate",
							"value": "{{tomorrow}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report summary (with anterior end date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c43400fa-3084-4d84-ada4-cade943ff971",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Most popular usage is not present\", function () {",
							"    pm.expect(pm.response.json()['mostPopularMonthDate']).to.eql(undefined);",
							"});",
							"",
							"pm.test(\"Least popular usage is not present\", function () {",
							"    pm.expect(pm.response.json()['leastPopularMonthDate']).to.eql(undefined);",
							"});",
							"",
							"pm.test(\"Mean usage is 0\", function () {",
							"    pm.expect(pm.response.json()['meanUsagePerDay']).to.eql(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary?endDate={{yesterday}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					],
					"query": [
						{
							"key": "endDate",
							"value": "{{yesterday}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report summary (with all correct filters)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2427e4f5-a526-45b0-b537-0b072625f60a",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Most popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['mostPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Least popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['leastPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Mean usage is more than 0\", function () {",
							"    pm.expect(pm.response.json()['meanUsagePerDay']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary?startDate={{today}}&endDate={{today}}&parkingZone={{parkingZone}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					],
					"query": [
						{
							"key": "startDate",
							"value": "{{today}}"
						},
						{
							"key": "endDate",
							"value": "{{today}}"
						},
						{
							"key": "parkingZone",
							"value": "{{parkingZone}}"
						}
					]
				}
			},
			"response": [
				{
					"name": "Usage report summary (with all correct filters)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/usage-report/summary?startDate={{today}}&endDate={{today}}&parkingZone={{parkingZone}}",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"usage-report",
								"summary"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{today}}"
								},
								{
									"key": "endDate",
									"value": "{{today}}"
								},
								{
									"key": "parkingZone",
									"value": "{{parkingZone}}"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:17:20 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "119"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"meanUsagePerDay\": 2,\n    \"mostPopularMonthDate\": \"2020-11-18\",\n    \"leastPopularMonthDate\": \"2020-11-18\",\n    \"parkingZone\": \"ZONE_3\"\n}"
				}
			]
		},
		{
			"name": "Usage report month",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c873e056-36a7-4138-8c6d-92ce815dacc6",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Usage report list is an array\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['usageReport'])).to.be.true;",
							"});",
							"",
							"pm.test(\"Usage report list is not empty\", function () {",
							"    pm.expect(pm.response.json()['usageReport']).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Total number of entry is more than 0\", function () {",
							"    pm.expect(pm.response.json()['totalOfEntry']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/month",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"month"
					]
				},
				"description": "Il est possible de faire n'importe quel combinaison de query params. Si le startDate n'est pas fournis la date par défaut est le premier du mois courant, si le endDate n'est pas founis la date par défaut est la journée courante, si la zone n'est pas fournis on considère toutes les zone."
			},
			"response": [
				{
					"name": "Usage report month",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/usage-report/month",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"usage-report",
								"month"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 01 Oct 2020 17:40:57 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "74"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"usageReport\": [\n        {\n            \"date\": \"2020-10-01\",\n            \"numberOfEntry\": 2\n        }\n    ],\n    \"totalOfEntry\": 2\n}"
				}
			]
		},
		{
			"name": "Usage report month (with anterior start date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7210da88-bab4-4ce9-9707-eba86252b78d",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Usage report list is an array\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['usageReport'])).to.be.true;",
							"});",
							"",
							"pm.test(\"Usage report list is not empty\", function () {",
							"    pm.expect(pm.response.json()['usageReport']).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Total number of entry is more than 0\", function () {",
							"    pm.expect(pm.response.json()['totalOfEntry']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/month?startDate={{yesterday}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"month"
					],
					"query": [
						{
							"key": "startDate",
							"value": "{{yesterday}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report month (with posterior start date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fe7bec5b-8b6c-4223-8bb4-084a6b5e436c",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Usage report list is an array\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['usageReport'])).to.be.true;",
							"});",
							"",
							"pm.test(\"Usage report list is empty\", function () {",
							"    pm.expect(pm.response.json()['usageReport']).to.be.empty;",
							"});",
							"",
							"pm.test(\"Total number of entry is 0\", function () {",
							"    pm.expect(pm.response.json()['totalOfEntry']).to.eql(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/month?startDate={{tomorrow}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"month"
					],
					"query": [
						{
							"key": "startDate",
							"value": "{{tomorrow}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report month (with parking zone without access)",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/month?parkingZone={{parkingZone_2}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"month"
					],
					"query": [
						{
							"key": "parkingZone",
							"value": "{{parkingZone_2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report month (with posterior end date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "06199ddf-cecd-43e1-9c59-c9f571526c64",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Usage report list is an array\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['usageReport'])).to.be.true;",
							"});",
							"",
							"pm.test(\"Usage report list is not empty\", function () {",
							"    pm.expect(pm.response.json()['usageReport']).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Total number of entry is more than 0\", function () {",
							"    pm.expect(pm.response.json()['totalOfEntry']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/month?endDate={{tomorrow}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"month"
					],
					"query": [
						{
							"key": "endDate",
							"value": "{{tomorrow}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report month (with anterior end date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ff0aa3ac-1eec-4674-ac96-f107f8bdb4e4",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Usage report list is an array\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['usageReport'])).to.be.true;",
							"});",
							"",
							"pm.test(\"Usage report list is empty\", function () {",
							"    pm.expect(pm.response.json()['usageReport']).to.be.empty;",
							"});",
							"",
							"pm.test(\"Total number of entry is 0\", function () {",
							"    pm.expect(pm.response.json()['totalOfEntry']).to.eql(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/month?endDate={{yesterday}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"month"
					],
					"query": [
						{
							"key": "endDate",
							"value": "{{yesterday}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report month (with all filters)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7d7ca20e-5013-4895-a3a9-a25986c625ca",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Usage report list is an array\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['usageReport'])).to.be.true;",
							"});",
							"",
							"pm.test(\"Usage report list is not empty\", function () {",
							"    pm.expect(pm.response.json()['usageReport']).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Total number of entry is more than 0\", function () {",
							"    pm.expect(pm.response.json()['totalOfEntry']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/month?startDate={{today}}&endDate={{today}}&parkingZone={{parkingZone}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"month"
					],
					"query": [
						{
							"key": "startDate",
							"value": "{{today}}"
						},
						{
							"key": "endDate",
							"value": "{{today}}"
						},
						{
							"key": "parkingZone",
							"value": "{{parkingZone}}"
						}
					]
				}
			},
			"response": [
				{
					"name": "Usage report month (with all filters)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/usage-report/month?startDate={{today}}&endDate={{today}}&parkingZone={{parkingZone}}",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"usage-report",
								"month"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{today}}"
								},
								{
									"key": "endDate",
									"value": "{{today}}"
								},
								{
									"key": "parkingZone",
									"value": "{{parkingZone}}"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:18:41 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "97"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"parkingZone\": \"ZONE_3\",\n    \"usageReport\": [\n        {\n            \"date\": \"2020-11-18\",\n            \"numberOfEntry\": 2\n        }\n    ],\n    \"totalOfEntry\": 2\n}"
				}
			]
		},
		{
			"name": "Dominique login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cc4d12ec-da8a-434f-bcf6-58177a75f4fb",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"Dominique\",\n    \"hashedPassword\": \"hashed_password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/authentication/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"authentication",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report summary wrong user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cb7668b7-1264-4012-b082-c129aa8ea924",
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Set",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					]
				},
				"description": "Il est possible de faire n'importe quel combinaison de query params. Si le startDate n'est pas fournis la date par défaut est le premier du mois courant, si le endDate n'est pas founis la date par défaut est la journée courante, si la zone n'est pas fournis on considère toutes les zone."
			},
			"response": [
				{
					"name": "Usage report (summary)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/usage-report/summary",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"usage-report",
								"summary"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 01 Oct 2020 17:40:44 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "96"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"meanUsagePerDay\": 2,\n    \"mostPopularMonthDate\": \"2020-10-01\",\n    \"leastPopularMonthDate\": \"2020-10-01\"\n}"
				}
			]
		},
		{
			"name": "Get initiatives no login wrong user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5f516fc4-f8f5-45d5-959e-232a7fb28f52",
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/fundraising/initiatives",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"fundraising",
						"initiatives"
					]
				}
			},
			"response": [
				{
					"name": "initiatives Copy 3",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/fundraising/initiatives",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"fundraising",
								"initiatives"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:30:31 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "1580"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"initiatives\": [\n        {\n            \"id\": \"1\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"2\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"3\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"4\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"5\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"6\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"7\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"8\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"9\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"10\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"11\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"12\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"13\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"14\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"15\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"16\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"17\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"18\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"19\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"20\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"21\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"22\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"23\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"24\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"25\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"26\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"27\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"28\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"29\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"30\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"31\",\n            \"name\": \"une initiative\",\n            \"amount\": 2.5\n        },\n        {\n            \"id\": \"32\",\n            \"name\": \"une autre initiative\",\n            \"amount\": 15\n        },\n        {\n            \"id\": \"33\",\n            \"name\": \"encore une initiative\",\n            \"amount\": 1.05\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Revenue no login wong user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e8d17362-509e-4e01-9522-ecc389bf4b24",
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/financial-report/revenue/",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"financial-report",
						"revenue",
						""
					]
				}
			},
			"response": [
				{
					"name": "get total revenue",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/financial-report/revenue/",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"financial-report",
								"revenue",
								""
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:52:44 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "284"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccess\": {\n        \"byCarType\": {\n            \"entry\": [\n                {\n                    \"key\": \"HYBRIDE_ECONOMIQUE\",\n                    \"value\": 0\n                },\n                {\n                    \"key\": \"SUPER_ECONOMIQUE\",\n                    \"value\": 5\n                },\n                {\n                    \"key\": \"GOURMANDE\",\n                    \"value\": 65\n                },\n                {\n                    \"key\": \"ECONOMIQUE\",\n                    \"value\": 30\n                },\n                {\n                    \"key\": \"SANS_POLLUTION\",\n                    \"value\": 0\n                }\n            ]\n        },\n        \"total\": 100\n    },\n    \"pass\": 489,\n    \"infraction\": 0,\n    \"total\": 589\n}"
				}
			]
		},
		{
			"name": "Dominique login Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dff158ec-16e2-4e49-a1fd-f64b96a3d505",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"Dominique\",\n    \"hashedPassword\": \"hashed_password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/authentication/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"authentication",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Infraction (wrong zone)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6c2b19d9-627f-4bff-a2ea-89f2b6e74a54",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Code is ZONE_01\", function () {",
							"    pm.expect(pm.response.json()['code']).to.eql('ZONE_01');",
							"});",
							"",
							"pm.test(\"Reason is 'mauvaise zone'\", function () {",
							"    pm.expect(pm.response.json()['reason']).to.eql('mauvaise zone');",
							"});",
							"",
							"pm.test(\"Amount is 55$\", function () {",
							"    pm.expect(pm.response.json()['amount']).to.eql(55);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"passCode\": \"1\",\n    \"parkingZone\": \"{{parkingZone_2}}\",\n    \"licensePlate\": \"123 456\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/infractions",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"infractions"
					]
				}
			},
			"response": [
				{
					"name": "Infraction (wrong zone)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"passCode\": \"1\",\n    \"parkingZone\": \"zone_1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/infractions",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"infractions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:26:38 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "76"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"infractionId\": \"2\",\n    \"code\": \"ZONE_01\",\n    \"reason\": \"mauvaise zone\",\n    \"amount\": 55\n}"
				}
			]
		},
		{
			"name": "Infraction (empty pass code)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "39e56f66-bbc5-4585-a676-feefee02e736",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Code is VIG_03\", function () {",
							"    pm.expect(pm.response.json()['code']).to.eql('VIG_03');",
							"});",
							"",
							"pm.test(\"Reason is 'pas de vignette'\", function () {",
							"    pm.expect(pm.response.json()['reason']).to.eql('pas de vignette');",
							"});",
							"",
							"pm.test(\"Amount is 55$\", function () {",
							"    pm.expect(pm.response.json()['amount']).to.eql(55);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"passCode\": \"\",\n    \"parkingZone\": \"zone_1\",\n    \"licensePlate\": \"zxc vbn\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/infractions",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"infractions"
					]
				}
			},
			"response": [
				{
					"name": "Infraction (empty pass code)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"passCode\": \"\",\n    \"parkingZone\": \"zone_1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/infractions",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"infractions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:27:07 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "77"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"infractionId\": \"3\",\n    \"code\": \"VIG_03\",\n    \"reason\": \"pas de vignette\",\n    \"amount\": 55\n}"
				}
			]
		},
		{
			"name": "Pay infraction",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "efb9b886-62e3-4b3a-8d25-28f789d60f67",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"body is empty\", function () {",
							"    pm.expect(pm.response.body).to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"infractionId\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/infractions/pay",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"infractions",
						"pay"
					]
				}
			},
			"response": [
				{
					"name": "Pay infraction",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"infractionId\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/infractions/pay",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"infractions",
								"pay"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:22:35 GMT"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "0"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Re-pay infraction again",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "43a09439-4e6d-4b71-98a0-713a57b537d4",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"error is 'ALREADY_PAID_INFRACTION'\", function () {",
							"    pm.expect(pm.response.json()['error']).to.eql('ALREADY_PAID_INFRACTION')",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"infractionId\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/infractions/pay",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"infractions",
						"pay"
					]
				}
			},
			"response": [
				{
					"name": "Re-pay infraction again",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"infractionId\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/infractions/pay",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"infractions",
								"pay"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:21:10 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "90"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"ALREADY_PAID_INFRACTION\",\n    \"description\": \"Cette infraction a déjà été payée\"\n}"
				}
			]
		},
		{
			"name": "Karine login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f6179e6b-5f95-470e-b53f-cafbd43a0a7a",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"Karine\",\n    \"hashedPassword\": \"hashed_password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/authentication/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"authentication",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create initiative",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "089a6ae0-f8ee-4129-a75a-e8ebcde6d98d",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"name is present\", function () {",
							"    pm.expect(pm.response.json()['name']).not.to.be.empty",
							"})",
							"",
							"pm.test(\"amount is present\", function () {",
							"    pm.expect(pm.response.json()['amount']).not.to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"une initiative\",\n    \"amount\": \"2.50\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/fundraising/initiatives",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"fundraising",
						"initiatives"
					]
				}
			},
			"response": [
				{
					"name": "Create initiative",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"une initiative\",\n    \"amount\": \"2.50\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/fundraising/initiatives",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"fundraising",
								"initiatives"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:28:58 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "48"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"31\",\n    \"name\": \"une initiative\",\n    \"amount\": 2.5\n}"
				}
			]
		},
		{
			"name": "Create initiative (with crazy long decimals amount)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9bb3b7dc-48fc-48dd-8f13-b01022ffc11a",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"name is present\", function () {",
							"    pm.expect(pm.response.json()['name']).not.to.be.empty",
							"})",
							"",
							"pm.test(\"amount is present\", function () {",
							"    pm.expect(pm.response.json()['amount']).not.to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"encore une initiative\",\n    \"amount\": 1.05987564532544987568954769845796794576974950876908475968745976945876098745068450986094586098\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/fundraising/initiatives",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"fundraising",
						"initiatives"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create initiative (without name)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ae41dba3-fb82-454c-bba4-4ff436356001",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"error is 'INVALID_INITIATIVE_NAME'\", function () {",
							"    pm.expect(pm.response.json()['error']).to.eql('INVALID_INITIATIVE_NAME')",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"\",\n    \"amount\": \"15\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/fundraising/initiatives",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"fundraising",
						"initiatives"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create initiative (with too big amount)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d5b052db-31e7-4aa7-8044-b3d662ef0a5c",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"error is 'INVALID_INITIATIVE_AMOUNT'\", function () {",
							"    pm.expect(pm.response.json()['error']).to.eql('INVALID_INITIATIVE_AMOUNT')",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"encore une initiative\",\n    \"amount\": \"10000000000\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/fundraising/initiatives",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"fundraising",
						"initiatives"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get initiatives",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "017ddee9-3a36-4b5f-842a-9b866205efe0",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"initiatives is not empty\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['initiatives'])).to.be.true",
							"    pm.expect(pm.response.json()['initiatives']).not.to.eql([])",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/fundraising/initiatives",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"fundraising",
						"initiatives"
					]
				}
			},
			"response": [
				{
					"name": "Get initiatives",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/fundraising/initiatives",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"fundraising",
								"initiatives"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:30:31 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "1580"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"initiatives\": [\n        {\n            \"id\": \"1\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"2\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"3\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"4\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"5\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"6\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"7\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"8\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"9\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"10\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"11\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"12\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"13\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"14\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"15\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"16\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"17\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"18\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"19\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"20\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"21\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"22\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"23\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"24\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"25\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"26\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"27\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"28\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"29\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"30\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"31\",\n            \"name\": \"une initiative\",\n            \"amount\": 2.5\n        },\n        {\n            \"id\": \"32\",\n            \"name\": \"une autre initiative\",\n            \"amount\": 15\n        },\n        {\n            \"id\": \"33\",\n            \"name\": \"encore une initiative\",\n            \"amount\": 1.05\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Deactivate carbon credits auto-tranfer",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "72935d1c-6af8-4014-a94a-52add74bb3d0",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"active is 'false'\", function () {",
							"    pm.expect(pm.response.json()['active']).to.not.be.true",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"active\": \"false\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/carbon-credits/activate",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"carbon-credits",
						"activate"
					]
				}
			},
			"response": [
				{
					"name": "Deactivate carbon credits auto-tranfer",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"active\": \"false\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/carbon-credits/activate",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"carbon-credits",
								"activate"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:25:10 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "16"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"active\": false\n}"
				}
			]
		},
		{
			"name": "Activate carbon credits auto-tranfer",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "57f351c3-ec5f-418b-ae07-84619a7b660b",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"active is 'true'\", function () {",
							"    pm.expect(pm.response.json()['active']).to.be.true",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"active\": \"true\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/carbon-credits/activate",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"carbon-credits",
						"activate"
					]
				}
			},
			"response": [
				{
					"name": "Activate carbon credits auto-transfer",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"active\": \"true\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/carbon-credits/activate",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"carbon-credits",
								"activate"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 22:22:20 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "15"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"active\": true\n}"
				}
			]
		},
		{
			"name": "Transfer carbon credits",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5e0e2877-0158-4f98-97dd-43c93e843e95",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"amount transferred is not empty\", function () {",
							"    pm.expect(pm.response.json()['transferred']).to.be.greaterThan(0)",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/admin/carbon-credits/transfer",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"admin",
						"carbon-credits",
						"transfer"
					]
				}
			},
			"response": [
				{
					"name": "carbon credit Copy",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/carbon-credits/transfer",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"carbon-credits",
								"transfer"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:32:19 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "22"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"transferred\": 238.34\n}"
				},
				{
					"name": "Transfer carbon credits",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/admin/carbon-credits/transfer",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"admin",
								"carbon-credits",
								"transfer"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:25:22 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "21"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"transferred\": 951.2\n}"
				}
			]
		},
		{
			"name": "Re-transfer carbon credits",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7a1d1f88-b069-4f28-868d-12eced1cd131",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"amount transferred is 0\", function () {",
							"    pm.expect(pm.response.json()['transferred']).to.eql(0)",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/admin/carbon-credits/transfer",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"admin",
						"carbon-credits",
						"transfer"
					]
				}
			},
			"response": [
				{
					"name": "Re-transfer carbon credits",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/admin/carbon-credits/transfer",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"admin",
								"carbon-credits",
								"transfer"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:25:47 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "19"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"transferred\": 0\n}"
				}
			]
		},
		{
			"name": "Get total credits transfered",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "480b5618-d4dc-4d03-bd1e-c92b31eb2b05",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"total is not empty\", function () {",
							"    pm.expect(pm.response.json()['total']).to.be.greaterThan(0)",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/financial-report/spending/carbon-credits",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"financial-report",
						"spending",
						"carbon-credits"
					]
				}
			},
			"response": [
				{
					"name": "Get total credits transfered",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/financial-report/spending/carbon-credits",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"financial-report",
								"spending",
								"carbon-credits"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:26:09 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "15"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"total\": 43.61\n}"
				}
			]
		},
		{
			"name": "Revenue (pass)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3118c839-d032-4a4b-88f5-502f30ef611c",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b6f7de7f-51a4-462a-a62b-2d4c391f2ba3",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'revenue' is more than 0\", function () {",
							"    pm.expect(pm.response.json()['revenue']).to.be.greaterThan(0)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/financial-report/revenue/parking-pass",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"financial-report",
						"revenue",
						"parking-pass"
					]
				}
			},
			"response": [
				{
					"name": "Revenue (pass)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/financial-report/revenue/parking-pass",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"financial-report",
								"revenue",
								"parking-pass"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:52:38 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "17"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"revenue\": 489\n}"
				}
			]
		},
		{
			"name": "Revenue (infractions)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "040409bc-2869-4ea4-84cc-446983ce38d4",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'revenue' is more than 0\", function () {",
							"    pm.expect(pm.response.json()['revenue']).to.be.greaterThan(0)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/financial-report/revenue/infractions",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"financial-report",
						"revenue",
						"infractions"
					]
				}
			},
			"response": [
				{
					"name": "Revenue (infractions)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/financial-report/revenue/infractions",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"financial-report",
								"revenue",
								"infractions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:53:41 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "16"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"revenue\": 52.8\n}"
				}
			]
		},
		{
			"name": "Revenue (campus access)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d5ac86ce-a9ff-4fc4-889a-4504a5dd1820",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'byCarType' has entries\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['byCarType']['entry'])).to.be.true",
							"    pm.expect(Array.isArray(pm.response.json()['byCarType']['entry'])).to.not.eql([])",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/financial-report/revenue/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"financial-report",
						"revenue",
						"campus-access"
					]
				}
			},
			"response": [
				{
					"name": "Revenue (campus access)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/financial-report/revenue/campus-access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"financial-report",
								"revenue",
								"campus-access"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:52:27 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "223"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"byCarType\": {\n        \"entry\": [\n            {\n                \"key\": \"HYBRIDE_ECONOMIQUE\",\n                \"value\": 0\n            },\n            {\n                \"key\": \"SUPER_ECONOMIQUE\",\n                \"value\": 5\n            },\n            {\n                \"key\": \"GOURMANDE\",\n                \"value\": 65\n            },\n            {\n                \"key\": \"ECONOMIQUE\",\n                \"value\": 30\n            },\n            {\n                \"key\": \"SANS_POLLUTION\",\n                \"value\": 0\n            }\n        ]\n    },\n    \"total\": 100\n}"
				}
			]
		},
		{
			"name": "Revenue",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d68f7431-c479-4e08-a98e-7bcebb54f1d0",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'campusAccess' is not empty\", function () {",
							"    pm.expect(pm.response.json()['campusAccess']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'pass' is more than 0\", function () {",
							"    pm.expect(pm.response.json()['pass']).to.be.greaterThan(0)",
							"});",
							"",
							"pm.test(\"'infraction' is more than 0\", function () {",
							"    pm.expect(pm.response.json()['infraction']).to.be.greaterThan(0)",
							"});",
							"",
							"pm.test(\"'total' is more than 0\", function () {",
							"    pm.expect(pm.response.json()['total']).to.be.greaterThan(0)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/financial-report/revenue",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"financial-report",
						"revenue"
					]
				}
			},
			"response": [
				{
					"name": "Revenue",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/financial-report/revenue",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"financial-report",
								"revenue"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:27:14 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "290"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccess\": {\n        \"byCarType\": {\n            \"entry\": [\n                {\n                    \"key\": \"ECONOMIQUE\",\n                    \"value\": 30\n                },\n                {\n                    \"key\": \"GOURMANDE\",\n                    \"value\": 1065\n                },\n                {\n                    \"key\": \"HYBRIDE_ECONOMIQUE\",\n                    \"value\": 0\n                },\n                {\n                    \"key\": \"SUPER_ECONOMIQUE\",\n                    \"value\": 5\n                },\n                {\n                    \"key\": \"SANS_POLLUTION\",\n                    \"value\": 0\n                }\n            ]\n        },\n        \"total\": 1100\n    },\n    \"pass\": 1223,\n    \"infraction\": 22,\n    \"total\": 2345\n}"
				}
			]
		},
		{
			"name": "Create rechargUL card",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fd632279-dc59-4080-af2a-f235d79a4318",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'credits' is 0\", function () {",
							"    pm.expect(pm.response.json()['credits']).to.eql(0)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/rechargul",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"rechargul"
					]
				}
			},
			"response": [
				{
					"name": "Create rechargUL card",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/rechargul",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"rechargul"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:27:32 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "25"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"11\",\n    \"credits\": 0\n}"
				}
			]
		},
		{
			"name": "Get rechargUL card",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c5d2e4b9-3d4e-490f-b075-e1984bc47ec1",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'credits' is 0\", function () {",
							"    pm.expect(pm.response.json()['credits']).to.eql(0)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/rechargul/1",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"rechargul",
						"1"
					]
				}
			},
			"response": [
				{
					"name": "Get rechargUL card",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/rechargul/1",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"rechargul",
								"1"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:27:48 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"1\",\n    \"credits\": 0\n}"
				}
			]
		},
		{
			"name": "Get charging points",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3b4d9bf6-204e-4be6-9f72-2bec50e2e7a8",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'chargingPoints' is not empty\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['chargingPoints'])).to.be.true",
							"    pm.expect(pm.response.json()['chargingPoints']).to.not.eql([])",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points"
					]
				}
			},
			"response": [
				{
					"name": "Get charging points",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:28:03 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "281"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"chargingPoints\": [\n        {\n            \"id\": \"1\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"2\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"3\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"4\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"5\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"6\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"7\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"8\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"9\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"10\",\n            \"state\": \"idle\"\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Get single charging point",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3f2d4a3f-ccd0-4e04-a98f-01322bf95c83",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'state' is idle\", function () {",
							"    pm.expect(pm.response.json()['state']).to.eql(\"idle\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points/1",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points",
						"1"
					]
				}
			},
			"response": [
				{
					"name": "Get single charging point",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points/1",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points",
								"1"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:28:13 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "25"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"1\",\n    \"state\": \"idle\"\n}"
				}
			]
		},
		{
			"name": "Activate charging point (with non-existant card)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "39ef0ef6-86ff-418f-9efb-dbce46aeebfe",
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"'error' is \", function () {",
							"    pm.expect(pm.response.json()['error']).to.eql(\"RECHARGUL_CARD_NOT_FOUND\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"rechargULCardId\": \"1234234\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points/1/activate",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points",
						"1",
						"activate"
					]
				}
			},
			"response": [
				{
					"name": "Activate charging point (with non-existant card)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rechargULCardId\": \"1234234\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points/1/activate",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points",
								"1",
								"activate"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:28:47 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "87"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"RECHARGUL_CARD_NOT_FOUND\",\n    \"description\": \"This rechargUL card does not exist\"\n}"
				}
			]
		},
		{
			"name": "Activate charging point (with no credits card)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "900dcbd6-28c5-4719-a05a-eee3cfed1755",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"'error' is \", function () {",
							"    pm.expect(pm.response.json()['error']).to.eql(\"NOT_ENOUGH_CREDITS\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points/1/activate",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points",
						"1",
						"activate"
					]
				}
			},
			"response": [
				{
					"name": "Activate charging point (with no credits card)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points/1/activate",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points",
								"1",
								"activate"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:28:55 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "95"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"NOT_ENOUGH_CREDITS\",\n    \"description\": \"This rechargUL card does not have enough credits\"\n}"
				}
			]
		},
		{
			"name": "Add credits to card (with invalid amount)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fb07adc5-8738-484e-823a-78ccb357701c",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"'error' is INVALID_RECHARGUL_CREDITS\", function () {",
							"    pm.expect(pm.response.json()['error']).to.eql(\"INVALID_RECHARGUL_CREDITS\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"credits\": -1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/rechargul/1/credits",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"rechargul",
						"1",
						"credits"
					]
				}
			},
			"response": [
				{
					"name": "Add credits to card (with invalid amount)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"credits\": -1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/rechargul/1/credits",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"rechargul",
								"1",
								"credits"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:29:08 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "88"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"INVALID_RECHARGUL_CREDITS\",\n    \"description\": \"Invalid credits for rechargUL card\"\n}"
				}
			]
		},
		{
			"name": "Add credits to card",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5497b8c1-1672-4c50-a837-66278b65adae",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'credits' is not 0\", function () {",
							"    pm.expect(pm.response.json()['credits']).to.be.greaterThan(0)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"credits\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/rechargul/1/credits",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"rechargul",
						"1",
						"credits"
					]
				}
			},
			"response": [
				{
					"name": "Add credits to card",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"credits\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/rechargul/1/credits",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"rechargul",
								"1",
								"credits"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:29:26 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"1\",\n    \"credits\": 1\n}"
				}
			]
		},
		{
			"name": "Activate charging point",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8e8a2edd-b85c-4d45-96c7-bfa5b34ccf61",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'state' is activated\", function () {",
							"    pm.expect(pm.response.json()['state']).to.eql(\"activated\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points/1/activate",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points",
						"1",
						"activate"
					]
				}
			},
			"response": [
				{
					"name": "Activate charging point",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points/1/activate",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points",
								"1",
								"activate"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:29:37 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "30"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"1\",\n    \"state\": \"activated\"\n}"
				}
			]
		},
		{
			"name": "Connect charging point",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d878edd9-c173-4282-b345-af36dd3ecb0e",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'state' is charging\", function () {",
							"    pm.expect(pm.response.json()['state']).to.eql(\"charging\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points/1/connect",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points",
						"1",
						"connect"
					]
				}
			},
			"response": [
				{
					"name": "Connect charging point",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points/1/connect",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points",
								"1",
								"connect"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:29:57 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "29"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"1\",\n    \"state\": \"charging\"\n}"
				}
			]
		},
		{
			"name": "Disconnect charging point",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "16cc3b86-36a2-4a2a-8692-af5100f492ea",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'state' is activated\", function () {",
							"    pm.expect(pm.response.json()['state']).to.eql(\"activated\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points/1/disconnect",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points",
						"1",
						"disconnect"
					]
				}
			},
			"response": [
				{
					"name": "Disconnect charging point",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points/1/disconnect",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points",
								"1",
								"disconnect"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:30:09 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "30"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"1\",\n    \"state\": \"activated\"\n}"
				}
			]
		},
		{
			"name": "Deactivate charging point",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "74946267-fd5a-47f6-91ee-14f523549212",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'state' is idle\", function () {",
							"    pm.expect(pm.response.json()['state']).to.eql(\"idle\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points/1/deactivate",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points",
						"1",
						"deactivate"
					]
				}
			},
			"response": [
				{
					"name": "Deactivate charging point",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points/1/deactivate",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points",
								"1",
								"deactivate"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:30:22 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "25"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"1\",\n    \"state\": \"idle\"\n}"
				}
			]
		},
		{
			"name": "Get rechargUL card (after debited)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "88c756f2-2029-4a59-8360-3c1867c54142",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'credits' is 0\", function () {",
							"    pm.expect(pm.response.json()['credits']).to.eql(0)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/rechargul/1",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"rechargul",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "wrong username login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5d70c554-6786-4161-b231-d4ef4e7a432a",
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"user\",\n    \"hashedPassword\": \"hashed_password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/authentication/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"authentication",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "wrong password login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9053a956-6297-4218-b49f-10700c60b464",
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"Karine\",\n    \"hashedPassword\": \"wrong password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/authentication/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"authentication",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "register user with id 6",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a0c91739-d2a3-4907-a0d0-bf5e27fbe5d4",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['userId']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "db18a9a7-4751-4003-bab1-eed6bc8888a3",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Bob Ross\",\n    \"birthDate\": \"1991-07-10\",\n    \"gender\": \"MaLe\",\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licensePlate\": \"xxx xxx\"\n    }\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/users",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": [
				{
					"name": "Buy campus access",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": {\n\t    \"name\": \"Bob Ross\",\n\t    \"birthDate\": \"1991-07-10\",\n\t    \"gender\": \"MaLe\"\n    },\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licencePlate\": \"xxx xxx\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"monday\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campus-access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campus-access"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:50:55 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccessCode\": \"1\"\n}"
				}
			]
		},
		{
			"name": "Valid CampusAccess purchase",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a0683aac-2361-4e45-906f-1ea7ae72d158",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userId\": \"6\",\r\n    \"period\": {\r\n        \"type\": \"hourly\",\r\n        \"numberOfHours\": \"1\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid CampussAccess purchase (neg hours)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2fdd47ff-902a-451f-a0c5-bc6f7c29b9c1",
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Error is 'ACCESS_NOT_FOUND'\", function () {\r",
							"    pm.expect(pm.response.json()['error']).to.eql('INVALID_PERIOD_FORMAT')\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": {\r\n\t    \"name\": \"Bob Ross\",\r\n\t    \"birthDate\": \"1991-07-10\",\r\n\t    \"gender\": \"MaLe\"\r\n    },\r\n    \"car\" : {\r\n        \"type\": \"gourmande\",\r\n        \"brand\": \"toyota\",\r\n        \"model\": \"corolla\",\r\n        \"year\": \"2020\",\r\n        \"licensePlate\": \"123 456\"\r\n    },\r\n    \"period\": {\r\n        \"type\": \"hourly\",\r\n        \"numberOfHours\": \"-1\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid CampusAccess purchase (more than 23 hours)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "96770429-8262-4f84-974f-e1b5b1ae773d",
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Error is 'ACCESS_NOT_FOUND'\", function () {\r",
							"    pm.expect(pm.response.json()['error']).to.eql('INVALID_PERIOD_FORMAT')\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": {\r\n\t    \"name\": \"Bob Ross\",\r\n\t    \"birthDate\": \"1991-07-10\",\r\n\t    \"gender\": \"MaLe\"\r\n    },\r\n    \"car\" : {\r\n        \"type\": \"gourmande\",\r\n        \"brand\": \"toyota\",\r\n        \"model\": \"corolla\",\r\n        \"year\": \"2020\",\r\n        \"licensePlate\": \"123 456\"\r\n    },\r\n    \"period\": {\r\n        \"type\": \"hourly\",\r\n        \"numberOfHours\": \"24\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"id": "9c0d0792-f4a6-425d-8e4a-0977d9477084",
			"key": "parkingZone",
			"value": "ZonE_3"
		},
		{
			"id": "83a92eaa-d1da-45b9-914c-3e098494f8f7",
			"key": "parkingZone_2",
			"value": "zONe_2"
		},
		{
			"id": "ed5c7872-32f4-430d-b2f3-5f71f544a115",
			"key": "today",
			"value": "2020-11-20"
		},
		{
			"id": "35b238c5-847b-40fc-a966-cf7e358c1b3c",
			"key": "tomorrow",
			"value": "2020-11-21"
		},
		{
			"id": "4f9b6bdd-2388-44e7-8286-cbffa85171ed",
			"key": "weekday",
			"value": "friday"
		},
		{
			"id": "1fb53fbd-052f-4dc5-8c45-f211784601df",
			"key": "yesterday",
			"value": "2020-11-19"
		}
	],
	"protocolProfileBehavior": {}
}