{
	"info": {
		"_postman_id": "abb14e65-ee86-4b73-8baf-03d557d4b7ed",
		"name": "SPAMD-UL",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Server is up",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "81e3b2f2-bebe-4be4-86df-daba7be1b924",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "9bbb6a33-4f9b-4e5d-bf14-df9f566efc26",
						"exec": [
							"const today = new Date()",
							"const yesterday = new Date()",
							"const tomorrow = new Date()",
							"",
							"function getDay(date) {",
							"    return (date < 10) ? \"0\" + date : date",
							"}",
							"",
							"yesterday.setDate(today.getDate() - 1)",
							"tomorrow.setDate(today.getDate() + 1)",
							"",
							"pm.collectionVariables.set(\"weekday\", today.toLocaleDateString('en-US', {weekday: 'long'}).toLowerCase())",
							"",
							"pm.collectionVariables.set(\"today\", `${today.getFullYear()}-${today.getMonth()+1}-${getDay(today.getDate())}`)",
							"pm.collectionVariables.set(\"yesterday\", `${yesterday.getFullYear()}-${yesterday.getMonth()+1}-${getDay(yesterday.getDate())}`)",
							"pm.collectionVariables.set(\"tomorrow\", `${tomorrow.getFullYear()}-${tomorrow.getMonth()+1}-${getDay(tomorrow.getDate())}`)",
							"",
							"pm.collectionVariables.set(\"parkingZone\", \"ZonE_3\")",
							"pm.collectionVariables.set(\"parkingZone_2\", \"zONe_2\")",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/ping",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"ping"
					]
				}
			},
			"response": []
		},
		{
			"name": "register user with id 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a5a46d57-541f-47e0-98a3-98ddea61c5c0",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['userId']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "f364b8ef-d2a5-4982-814c-421f9f7c3392",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Bob Ross\",\n    \"birthDate\": \"1991-07-10\",\n    \"gender\": \"MaLe\",\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licensePlate\": \"123 456\"\n    }\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/users",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": [
				{
					"name": "Buy campus access",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": {\n\t    \"name\": \"Bob Ross\",\n\t    \"birthDate\": \"1991-07-10\",\n\t    \"gender\": \"MaLe\"\n    },\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licencePlate\": \"xxx xxx\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"monday\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campus-access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campus-access"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:50:55 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccessCode\": \"1\"\n}"
				}
			]
		},
		{
			"name": "Buy campus access (single day per week per semester)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0553dd20-23b6-4a0a-b8dd-fbc59a3ba6c6",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['campusAccessCode']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "1f89cb53-6d51-41d8-9955-2775ba998d7f",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": \"1\",\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"{{weekday}}\"\n    }\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": [
				{
					"name": "Buy campus access",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": {\n\t    \"name\": \"Bob Ross\",\n\t    \"birthDate\": \"1991-07-10\",\n\t    \"gender\": \"MaLe\"\n    },\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licencePlate\": \"xxx xxx\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"monday\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campus-access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campus-access"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:50:55 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccessCode\": \"1\"\n}"
				}
			]
		},
		{
			"name": "register user with id 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8fc93eab-aeb2-4395-ae23-fe51fcac70a0",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['userId']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "beab0a29-ea95-4243-9f15-4212bef20127",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Bob Ross\",\n    \"birthDate\": \"1991-07-10\",\n    \"gender\": \"MaLe\",\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licensePlate\": \"abc def\"\n    }\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/users",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": [
				{
					"name": "Buy campus access",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": {\n\t    \"name\": \"Bob Ross\",\n\t    \"birthDate\": \"1991-07-10\",\n\t    \"gender\": \"MaLe\"\n    },\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licencePlate\": \"xxx xxx\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"monday\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campus-access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campus-access"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:50:55 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccessCode\": \"1\"\n}"
				}
			]
		},
		{
			"name": "Buy campus access (single day per week per semester) Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d95bff2d-9a2c-4690-b52c-d795984e0a09",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['campusAccessCode']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": \"2\",\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"{{weekday}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": []
		},
		{
			"name": "register user with id 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c5c7403a-b7b8-4c4d-b629-7aea13ed0549",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['userId']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "39cdded8-5589-4b6f-8fae-537a9038d4bd",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Bob Ross\",\n    \"birthDate\": \"1991-07-10\",\n    \"gender\": \"MaLe\",\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licensePlate\": \"qwe rty\"\n    }\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/users",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": [
				{
					"name": "Buy campus access",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": {\n\t    \"name\": \"Bob Ross\",\n\t    \"birthDate\": \"1991-07-10\",\n\t    \"gender\": \"MaLe\"\n    },\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licencePlate\": \"xxx xxx\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"monday\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campus-access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campus-access"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:50:55 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccessCode\": \"1\"\n}"
				}
			]
		},
		{
			"name": "Buy campus access (single day per week per semester) Copy 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e837e84a-0764-481e-b85a-5e2b39b72983",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['campusAccessCode']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": \"3\",\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"{{weekday}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": []
		},
		{
			"name": "register user with id 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2b7d7a40-1c7f-4fe8-a51e-4562d53390fe",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['userId']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "93613669-2309-442a-b317-2c6e2ce7b518",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Bob Ross\",\n    \"birthDate\": \"1991-07-10\",\n    \"gender\": \"MaLe\",\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licensePlate\": \"asd fgh\"\n    }\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/users",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": [
				{
					"name": "Buy campus access",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": {\n\t    \"name\": \"Bob Ross\",\n\t    \"birthDate\": \"1991-07-10\",\n\t    \"gender\": \"MaLe\"\n    },\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licencePlate\": \"xxx xxx\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"monday\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campus-access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campus-access"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:50:55 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccessCode\": \"1\"\n}"
				}
			]
		},
		{
			"name": "Buy campus access (two semesters)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bcf35d62-0653-44d9-b004-fea70cb12bc0",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['campusAccessCode']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": \"4\",\n    \"period\": {\n        \"type\": \"two_semesters\",\n        \"semester\": \"a2020\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": []
		},
		{
			"name": "register user with id 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3b869251-7d8c-4eba-991f-02939179ffbe",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['userId']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "89bc85d8-6253-4396-92b5-a17f26c8cae3",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Bob Ross\",\n    \"birthDate\": \"1991-07-10\",\n    \"gender\": \"MaLe\",\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licensePlate\": \"zxc vbn\"\n    }\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/users",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": [
				{
					"name": "Buy campus access",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": {\n\t    \"name\": \"Bob Ross\",\n\t    \"birthDate\": \"1991-07-10\",\n\t    \"gender\": \"MaLe\"\n    },\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licencePlate\": \"xxx xxx\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"monday\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campus-access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campus-access"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:50:55 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccessCode\": \"1\"\n}"
				}
			]
		},
		{
			"name": "Buy campus access (two semesters) Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9ffa905b-f1a9-4e4b-ae50-6b38f0d1f971",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['campusAccessCode']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": \"5\",\n    \"period\": {\n        \"type\": \"two_semesters\",\n        \"semester\": \"a2020\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buy pass postal with line2 (single day per week per semester)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "db8fe6aa-531f-4828-a5d5-27a6c7f36755",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"body is empty\", function () {",
							"    pm.expect(pm.response.body).to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"parkingZone\": \"{{parkingZone}}\",\n    \"userId\": \"1\",\n    \"delivery\": {\n        \"deliveryMode\": \"post\",\n        \"postalAddress\": {\n            \"name\": \"Harry Potter\",\n            \"line1\": \"4 Privet Drive\",\n            \"line2\": \"In the cupboard under the stairs\",\n            \"city\": \"Little Whinging\",\n            \"province\": \"Surrey\",\n            \"postalCode\": \"N0L 1R0\",\n            \"country\": \"England\"\n        }\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"{{weekday}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/pass",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"pass"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buy pass postal with line2 (one semester)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e76a60c7-3253-4b01-9bef-6dcc795add61",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"body is empty\", function () {",
							"    pm.expect(pm.response.body).to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"parkingZone\": \"{{parkingZone}}\",\n    \"userId\": \"4\",\n    \"delivery\": {\n        \"deliveryMode\": \"post\",\n        \"postalAddress\": {\n            \"name\": \"Harry Potter\",\n            \"line1\": \"4 Privet Drive\",\n            \"line2\": \"In the cupboard under the stairs\",\n            \"city\": \"Little Whinging\",\n            \"province\": \"Surrey\",\n            \"postalCode\": \"N0L 1R0\",\n            \"country\": \"England\"\n        }\n    },\n    \"period\": {\n        \"type\": \"one_semester\",\n        \"semester\": \"a2020\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/pass",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"pass"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buy pass postal without line2 (single day per week per semester)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ab60aaa-545f-4df8-aae2-1950a004f779",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"body is empty\", function () {",
							"    pm.expect(pm.response.body).to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"parkingZone\": \"{{parkingZone}}\",\n    \"userId\": \"2\",\n    \"delivery\": {\n        \"deliveryMode\": \"post\",\n        \"postalAddress\": {\n            \"name\": \"Harry Potter\",\n            \"line1\": \"4 Privet Drive\",\n            \"city\": \"Little Whinging\",\n            \"province\": \"Surrey\",\n            \"postalCode\": \"N0L 1R0\",\n            \"country\": \"England\"\n        }\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"{{weekday}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/pass",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"pass"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buy pass email (single day per week per semester)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3a9de381-a6de-46c1-aebb-dc606cf8430f",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"body is empty\", function () {",
							"    pm.expect(pm.response.body).to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"parkingZone\": \"{{parkingZone}}\",\n    \"userId\": \"3\",\n    \"delivery\": {\n\t    \"deliveryMode\": \"email\",\n\t    \"emailAddress\": \"example@example.com\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"{{weekday}}\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/pass",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"pass"
					]
				}
			},
			"response": []
		},
		{
			"name": "Buy pass ssp office (two semesters)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f8853b59-7e8c-4a4b-9fb7-102ff07d2063",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"body is empty\", function () {",
							"    pm.expect(pm.response.body).to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"parkingZone\": \"{{parkingZone}}\",\n    \"userId\": \"5\",\n    \"delivery\": {\n\t    \"deliveryMode\": \"ssp_office\"\n    },\n    \"period\": {\n        \"type\": \"two_semesters\",\n        \"semester\": \"a2020\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/pass",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"pass"
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid buy pass (wrong user id)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "eeb739a8-4469-4b02-9281-ea3ed97d62db",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Error is 'ACCESS_NOT_FOUND'\", function () {",
							"    pm.expect(pm.response.json()['error']).to.eql('INVALID_USER_ID')",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"parkingZone\": \"ZONE_3\",\n    \"userId\": \"592386487234\",\n    \"delivery\": {\n\t    \"deliveryMode\": \"email\",\n\t    \"emailAddress\": \"sebastien.nantel03@gmail.com\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"tuesday\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/pass",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"pass"
					]
				}
			},
			"response": [
				{
					"name": "Invalid buy pass (wrong access code)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"parkingZone\": \"ZONE_3\",\n    \"campusAccessCode\": \"5\",\n    \"deliveryInfos\": {\n\t    \"deliveryMode\": \"email\",\n\t    \"emailAddress\": \"sebastien.nantel03@gmail.com\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"tuesday\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/sale/",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"sale",
								""
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:51:37 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "71"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"ACCESS_NOT_FOUND\",\n    \"description\": \"No campus access with id 5\"\n}"
				}
			]
		},
		{
			"name": "Accessing campus with access code",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "663965b8-afd4-480d-a357-e7e7c673d646",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Access is 'GRANTED'\", function () {",
							"    pm.expect(pm.response.json()['access']).to.eql('GRANTED')",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"campusAccessCode\": \"1\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access/access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access",
						"access"
					]
				}
			},
			"response": [
				{
					"name": "Accessing campus",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"campusAccessCode\": \"2\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campusaccess/access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campusaccess",
								"access"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:24:21 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"access\": \"NOT GRANTED\"\n}"
				},
				{
					"name": "Accessing campus",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"campusAccessCode\": \"1\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campusaccess/access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campusaccess",
								"access"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 01 Oct 2020 17:40:41 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "20"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"access\": \"GRANTED\"\n}"
				}
			]
		},
		{
			"name": "Accessing campus with license plate",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "76cee983-e7b6-404b-b7a9-ea3fb6384181",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Access is 'GRANTED'\", function () {",
							"    pm.expect(pm.response.json()['access']).to.eql('GRANTED')",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"licensePlate\": \"123 456\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access/access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access",
						"access"
					]
				}
			},
			"response": [
				{
					"name": "Accessing campus",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"campusAccessCode\": \"2\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campusaccess/access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campusaccess",
								"access"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:24:21 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"access\": \"NOT GRANTED\"\n}"
				},
				{
					"name": "Accessing campus",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"campusAccessCode\": \"1\",\n   \"accessingCampusDate\": \"2020-10-01\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campusaccess/access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campusaccess",
								"access"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 01 Oct 2020 17:40:41 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "20"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"access\": \"GRANTED\"\n}"
				}
			]
		},
		{
			"name": "Invalid accessing campus (inexistant campus access code)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c7e4fe41-4520-444f-b4f2-7c4c1202625a",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Access is 'NOT GRANTED'\", function () {",
							"    pm.expect(pm.response.json()['access']).to.eql('NOT GRANTED')",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"campusAccessCode\": \"5324629384\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access/access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access",
						"access"
					]
				}
			},
			"response": [
				{
					"name": "Ivanlid accessing campus (wrong code)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"campusAccessCode\": \"5\",\n   \"accessingCampusDate\": \"2020-10-02\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campusaccess/access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campusaccess",
								"access"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 01 Oct 2020 17:40:08 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"access\": \"NOT GRANTED\"\n}"
				}
			]
		},
		{
			"name": "Usage report summary no login error",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3b24f622-1777-408a-8a34-cbfc9f575869",
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Set",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					]
				},
				"description": "Il est possible de faire n'importe quel combinaison de query params. Si le startDate n'est pas fournis la date par défaut est le premier du mois courant, si le endDate n'est pas founis la date par défaut est la journée courante, si la zone n'est pas fournis on considère toutes les zone."
			},
			"response": [
				{
					"name": "Usage report (summary)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/usage-report/summary",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"usage-report",
								"summary"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 01 Oct 2020 17:40:44 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "96"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"meanUsagePerDay\": 2,\n    \"mostPopularMonthDate\": \"2020-10-01\",\n    \"leastPopularMonthDate\": \"2020-10-01\"\n}"
				}
			]
		},
		{
			"name": "infraction no login error",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4e83b196-d0f8-4058-a988-7b37feb2a6d7",
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"passCode\": \"1\",\n    \"parkingZone\": \"{{parkingZone_2}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/infractions",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"infractions"
					]
				}
			},
			"response": [
				{
					"name": "infraction zone",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"passCode\": \"1\",\n    \"parkingZone\": \"zone_1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/infractions",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"infractions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:26:38 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "76"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"infractionId\": \"2\",\n    \"code\": \"ZONE_01\",\n    \"reason\": \"mauvaise zone\",\n    \"amount\": 55\n}"
				}
			]
		},
		{
			"name": "Get initiatives no login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "806acbb7-0c4d-4b40-bea5-62eb8e1579b7",
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/fundraising/initiatives",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"fundraising",
						"initiatives"
					]
				}
			},
			"response": [
				{
					"name": "initiatives Copy 3",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/fundraising/initiatives",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"fundraising",
								"initiatives"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:30:31 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "1580"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"initiatives\": [\n        {\n            \"id\": \"1\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"2\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"3\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"4\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"5\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"6\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"7\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"8\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"9\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"10\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"11\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"12\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"13\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"14\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"15\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"16\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"17\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"18\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"19\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"20\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"21\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"22\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"23\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"24\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"25\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"26\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"27\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"28\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"29\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"30\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"31\",\n            \"name\": \"une initiative\",\n            \"amount\": 2.5\n        },\n        {\n            \"id\": \"32\",\n            \"name\": \"une autre initiative\",\n            \"amount\": 15\n        },\n        {\n            \"id\": \"33\",\n            \"name\": \"encore une initiative\",\n            \"amount\": 1.05\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Revenue no login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "abb959a4-7d79-46ea-89c5-d0e05ad4dd22",
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/financial-report/revenue/",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"financial-report",
						"revenue",
						""
					]
				}
			},
			"response": [
				{
					"name": "get total revenue",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/financial-report/revenue/",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"financial-report",
								"revenue",
								""
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:52:44 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "284"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccess\": {\n        \"byCarType\": {\n            \"entry\": [\n                {\n                    \"key\": \"HYBRIDE_ECONOMIQUE\",\n                    \"value\": 0\n                },\n                {\n                    \"key\": \"SUPER_ECONOMIQUE\",\n                    \"value\": 5\n                },\n                {\n                    \"key\": \"GOURMANDE\",\n                    \"value\": 65\n                },\n                {\n                    \"key\": \"ECONOMIQUE\",\n                    \"value\": 30\n                },\n                {\n                    \"key\": \"SANS_POLLUTION\",\n                    \"value\": 0\n                }\n            ]\n        },\n        \"total\": 100\n    },\n    \"pass\": 489,\n    \"infraction\": 0,\n    \"total\": 589\n}"
				}
			]
		},
		{
			"name": "Karine login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e243c57d-45c4-4cdd-89b8-5b15d86fbda4",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"Karine\",\n    \"hashedPassword\": \"hashed_password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/authentication/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"authentication",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "infraction wrong user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bfec5ee6-9320-4462-9873-fa8804d6c316",
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"passCode\": \"1\",\n    \"parkingZone\": \"{{parkingZone_2}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/infractions",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"infractions"
					]
				}
			},
			"response": [
				{
					"name": "infraction zone",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"passCode\": \"1\",\n    \"parkingZone\": \"zone_1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/infractions",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"infractions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:26:38 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "76"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"infractionId\": \"2\",\n    \"code\": \"ZONE_01\",\n    \"reason\": \"mauvaise zone\",\n    \"amount\": 55\n}"
				}
			]
		},
		{
			"name": "Karine login Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d1c38416-19ca-4781-8595-c8884968005f",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"Karine\",\n    \"hashedPassword\": \"hashed_password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/authentication/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"authentication",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report summary",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5c374965-a385-471c-bdd4-90720d41f600",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Most popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['mostPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Least popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['leastPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Mean usage is more than 0\", function () {",
							"    pm.expect(pm.response.json()['meanUsagePerDay']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Set",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					]
				},
				"description": "Il est possible de faire n'importe quel combinaison de query params. Si le startDate n'est pas fournis la date par défaut est le premier du mois courant, si le endDate n'est pas founis la date par défaut est la journée courante, si la zone n'est pas fournis on considère toutes les zone."
			},
			"response": [
				{
					"name": "Usage report summary",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/usage-report/summary",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"usage-report",
								"summary"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 01 Oct 2020 17:40:44 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "96"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"meanUsagePerDay\": 2,\n    \"mostPopularMonthDate\": \"2020-10-01\",\n    \"leastPopularMonthDate\": \"2020-10-01\"\n}"
				}
			]
		},
		{
			"name": "Usage report summary (with anterior start date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cb04bdd4-2a1c-408e-ba5f-b017283accb3",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Most popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['mostPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Least popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['leastPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Mean usage is more than 0\", function () {",
							"    pm.expect(pm.response.json()['meanUsagePerDay']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary?startDate={{yesterday}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					],
					"query": [
						{
							"key": "startDate",
							"value": "{{yesterday}}"
						}
					]
				},
				"description": "Il est possible de faire n'importe quel combinaison de query params. Si le startDate n'est pas fournis la date par défaut est le premier du mois courant, si le endDate n'est pas founis la date par défaut est la journée courante, si la zone n'est pas fournis on considère toutes les zone."
			},
			"response": []
		},
		{
			"name": "Usage report summary (with posterior start date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "abf5f362-43ae-4509-83f7-a413417e0ac6",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Most popular usage is not present\", function () {",
							"    pm.expect(pm.response.json()['mostPopularMonthDate']).to.eql(undefined);",
							"});",
							"",
							"pm.test(\"Least popular usage is not present\", function () {",
							"    pm.expect(pm.response.json()['leastPopularMonthDate']).to.eql(undefined);",
							"});",
							"",
							"pm.test(\"Mean usage is 0\", function () {",
							"    pm.expect(pm.response.json()['meanUsagePerDay']).to.eql(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary?startDate={{tomorrow}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					],
					"query": [
						{
							"key": "startDate",
							"value": "{{tomorrow}}"
						}
					]
				},
				"description": "Il est possible de faire n'importe quel combinaison de query params. Si le startDate n'est pas fournis la date par défaut est le premier du mois courant, si le endDate n'est pas founis la date par défaut est la journée courante, si la zone n'est pas fournis on considère toutes les zone."
			},
			"response": []
		},
		{
			"name": "Usage report summary (with parking zone without access)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7fa9e3e2-9b57-4494-bb9b-8b899320c734",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Most popular usage is not present\", function () {",
							"    pm.expect(pm.response.json()['mostPopularMonthDate']).to.eql(undefined);",
							"});",
							"",
							"pm.test(\"Least popular usage is not present\", function () {",
							"    pm.expect(pm.response.json()['leastPopularMonthDate']).to.eql(undefined);",
							"});",
							"",
							"pm.test(\"Mean usage is 0\", function () {",
							"    pm.expect(pm.response.json()['meanUsagePerDay']).to.eql(0);",
							"});",
							"",
							"pm.test(\"Parking zone is \" + pm.collectionVariables.get(\"parkingZone_2\").toUpperCase(), function () {",
							"    pm.expect(pm.response.json()['parkingZone']).to.eql(pm.collectionVariables.get(\"parkingZone_2\").toUpperCase());",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary?parkingZone={{parkingZone_2}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					],
					"query": [
						{
							"key": "parkingZone",
							"value": "{{parkingZone_2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report summary (with posterior end date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "962a4f91-d4f1-4e6c-bacb-f7509c2c9d0d",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Most popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['mostPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Least popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['leastPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Mean usage is more than 0\", function () {",
							"    pm.expect(pm.response.json()['meanUsagePerDay']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary?endDate={{tomorrow}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					],
					"query": [
						{
							"key": "endDate",
							"value": "{{tomorrow}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report summary (with anterior end date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3f499ee6-f9a9-4031-910f-2881c74f58c0",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Most popular usage is not present\", function () {",
							"    pm.expect(pm.response.json()['mostPopularMonthDate']).to.eql(undefined);",
							"});",
							"",
							"pm.test(\"Least popular usage is not present\", function () {",
							"    pm.expect(pm.response.json()['leastPopularMonthDate']).to.eql(undefined);",
							"});",
							"",
							"pm.test(\"Mean usage is 0\", function () {",
							"    pm.expect(pm.response.json()['meanUsagePerDay']).to.eql(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary?endDate={{yesterday}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					],
					"query": [
						{
							"key": "endDate",
							"value": "{{yesterday}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report summary (with all correct filters)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fe8a7a33-4abd-42a8-a3a3-d53d731e2476",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Most popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['mostPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Least popular usage is today\", function () {",
							"    pm.expect(pm.response.json()['leastPopularMonthDate']).to.eql(pm.collectionVariables.get(\"today\"));",
							"});",
							"",
							"pm.test(\"Mean usage is more than 0\", function () {",
							"    pm.expect(pm.response.json()['meanUsagePerDay']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary?startDate={{today}}&endDate={{today}}&parkingZone={{parkingZone}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					],
					"query": [
						{
							"key": "startDate",
							"value": "{{today}}"
						},
						{
							"key": "endDate",
							"value": "{{today}}"
						},
						{
							"key": "parkingZone",
							"value": "{{parkingZone}}"
						}
					]
				}
			},
			"response": [
				{
					"name": "Usage report summary (with all correct filters)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/usage-report/summary?startDate={{today}}&endDate={{today}}&parkingZone={{parkingZone}}",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"usage-report",
								"summary"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{today}}"
								},
								{
									"key": "endDate",
									"value": "{{today}}"
								},
								{
									"key": "parkingZone",
									"value": "{{parkingZone}}"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:17:20 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "119"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"meanUsagePerDay\": 2,\n    \"mostPopularMonthDate\": \"2020-11-18\",\n    \"leastPopularMonthDate\": \"2020-11-18\",\n    \"parkingZone\": \"ZONE_3\"\n}"
				}
			]
		},
		{
			"name": "Usage report month",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fa85a82f-f1bf-4842-b903-46b2779cdefa",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Usage report list is an array\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['usageReport'])).to.be.true;",
							"});",
							"",
							"pm.test(\"Usage report list is not empty\", function () {",
							"    pm.expect(pm.response.json()['usageReport']).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Total number of entry is more than 0\", function () {",
							"    pm.expect(pm.response.json()['totalOfEntry']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/month",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"month"
					]
				},
				"description": "Il est possible de faire n'importe quel combinaison de query params. Si le startDate n'est pas fournis la date par défaut est le premier du mois courant, si le endDate n'est pas founis la date par défaut est la journée courante, si la zone n'est pas fournis on considère toutes les zone."
			},
			"response": [
				{
					"name": "Usage report month",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/usage-report/month",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"usage-report",
								"month"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 01 Oct 2020 17:40:57 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "74"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"usageReport\": [\n        {\n            \"date\": \"2020-10-01\",\n            \"numberOfEntry\": 2\n        }\n    ],\n    \"totalOfEntry\": 2\n}"
				}
			]
		},
		{
			"name": "Usage report month (with anterior start date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d7b0e76d-fd11-4c84-b6c1-d1c1068980bb",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Usage report list is an array\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['usageReport'])).to.be.true;",
							"});",
							"",
							"pm.test(\"Usage report list is not empty\", function () {",
							"    pm.expect(pm.response.json()['usageReport']).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Total number of entry is more than 0\", function () {",
							"    pm.expect(pm.response.json()['totalOfEntry']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/month?startDate={{yesterday}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"month"
					],
					"query": [
						{
							"key": "startDate",
							"value": "{{yesterday}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report month (with posterior start date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a190451b-18c1-431d-85e0-d5b11a90a9b4",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Usage report list is an array\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['usageReport'])).to.be.true;",
							"});",
							"",
							"pm.test(\"Usage report list is empty\", function () {",
							"    pm.expect(pm.response.json()['usageReport']).to.be.empty;",
							"});",
							"",
							"pm.test(\"Total number of entry is 0\", function () {",
							"    pm.expect(pm.response.json()['totalOfEntry']).to.eql(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/month?startDate={{tomorrow}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"month"
					],
					"query": [
						{
							"key": "startDate",
							"value": "{{tomorrow}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report month (with parking zone without access)",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/month?parkingZone={{parkingZone_2}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"month"
					],
					"query": [
						{
							"key": "parkingZone",
							"value": "{{parkingZone_2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report month (with posterior end date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "866eec13-d8c9-4505-8dd8-3323abb97678",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Usage report list is an array\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['usageReport'])).to.be.true;",
							"});",
							"",
							"pm.test(\"Usage report list is not empty\", function () {",
							"    pm.expect(pm.response.json()['usageReport']).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Total number of entry is more than 0\", function () {",
							"    pm.expect(pm.response.json()['totalOfEntry']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/month?endDate={{tomorrow}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"month"
					],
					"query": [
						{
							"key": "endDate",
							"value": "{{tomorrow}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report month (with anterior end date)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d2e5887d-5f5f-4a31-b994-29e1e7e1857a",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Usage report list is an array\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['usageReport'])).to.be.true;",
							"});",
							"",
							"pm.test(\"Usage report list is empty\", function () {",
							"    pm.expect(pm.response.json()['usageReport']).to.be.empty;",
							"});",
							"",
							"pm.test(\"Total number of entry is 0\", function () {",
							"    pm.expect(pm.response.json()['totalOfEntry']).to.eql(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/month?endDate={{yesterday}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"month"
					],
					"query": [
						{
							"key": "endDate",
							"value": "{{yesterday}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report month (with all filters)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "930da4b6-47f0-40a8-ae7e-929fb9408475",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Usage report list is an array\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['usageReport'])).to.be.true;",
							"});",
							"",
							"pm.test(\"Usage report list is not empty\", function () {",
							"    pm.expect(pm.response.json()['usageReport']).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Total number of entry is more than 0\", function () {",
							"    pm.expect(pm.response.json()['totalOfEntry']).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/month?startDate={{today}}&endDate={{today}}&parkingZone={{parkingZone}}",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"month"
					],
					"query": [
						{
							"key": "startDate",
							"value": "{{today}}"
						},
						{
							"key": "endDate",
							"value": "{{today}}"
						},
						{
							"key": "parkingZone",
							"value": "{{parkingZone}}"
						}
					]
				}
			},
			"response": [
				{
					"name": "Usage report month (with all filters)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/usage-report/month?startDate={{today}}&endDate={{today}}&parkingZone={{parkingZone}}",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"usage-report",
								"month"
							],
							"query": [
								{
									"key": "startDate",
									"value": "{{today}}"
								},
								{
									"key": "endDate",
									"value": "{{today}}"
								},
								{
									"key": "parkingZone",
									"value": "{{parkingZone}}"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:18:41 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "97"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"parkingZone\": \"ZONE_3\",\n    \"usageReport\": [\n        {\n            \"date\": \"2020-11-18\",\n            \"numberOfEntry\": 2\n        }\n    ],\n    \"totalOfEntry\": 2\n}"
				}
			]
		},
		{
			"name": "Dominique login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "171a3c58-e932-44da-9d47-257da63846d1",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"Dominique\",\n    \"hashedPassword\": \"hashed_password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/authentication/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"authentication",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Usage report summary wrong user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f5121624-6491-4ac0-93ac-bc71cec532c6",
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Set",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "127.0.0.1:8080/api/usage-report/summary",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"usage-report",
						"summary"
					]
				},
				"description": "Il est possible de faire n'importe quel combinaison de query params. Si le startDate n'est pas fournis la date par défaut est le premier du mois courant, si le endDate n'est pas founis la date par défaut est la journée courante, si la zone n'est pas fournis on considère toutes les zone."
			},
			"response": [
				{
					"name": "Usage report (summary)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/usage-report/summary",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"usage-report",
								"summary"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 01 Oct 2020 17:40:44 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "96"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"meanUsagePerDay\": 2,\n    \"mostPopularMonthDate\": \"2020-10-01\",\n    \"leastPopularMonthDate\": \"2020-10-01\"\n}"
				}
			]
		},
		{
			"name": "Get initiatives no login wrong user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b67aa8a9-74f4-4d34-aab6-683f0d584944",
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/fundraising/initiatives",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"fundraising",
						"initiatives"
					]
				}
			},
			"response": [
				{
					"name": "initiatives Copy 3",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/fundraising/initiatives",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"fundraising",
								"initiatives"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:30:31 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "1580"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"initiatives\": [\n        {\n            \"id\": \"1\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"2\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"3\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"4\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"5\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"6\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"7\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"8\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"9\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"10\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"11\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"12\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"13\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"14\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"15\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"16\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"17\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"18\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"19\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"20\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"21\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"22\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"23\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"24\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"25\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"26\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"27\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"28\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"29\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"30\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"31\",\n            \"name\": \"une initiative\",\n            \"amount\": 2.5\n        },\n        {\n            \"id\": \"32\",\n            \"name\": \"une autre initiative\",\n            \"amount\": 15\n        },\n        {\n            \"id\": \"33\",\n            \"name\": \"encore une initiative\",\n            \"amount\": 1.05\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Revenue no login wong user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "02186166-a132-4a9a-9742-b813d67574c1",
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/financial-report/revenue/",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"financial-report",
						"revenue",
						""
					]
				}
			},
			"response": [
				{
					"name": "get total revenue",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/financial-report/revenue/",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"financial-report",
								"revenue",
								""
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:52:44 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "284"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccess\": {\n        \"byCarType\": {\n            \"entry\": [\n                {\n                    \"key\": \"HYBRIDE_ECONOMIQUE\",\n                    \"value\": 0\n                },\n                {\n                    \"key\": \"SUPER_ECONOMIQUE\",\n                    \"value\": 5\n                },\n                {\n                    \"key\": \"GOURMANDE\",\n                    \"value\": 65\n                },\n                {\n                    \"key\": \"ECONOMIQUE\",\n                    \"value\": 30\n                },\n                {\n                    \"key\": \"SANS_POLLUTION\",\n                    \"value\": 0\n                }\n            ]\n        },\n        \"total\": 100\n    },\n    \"pass\": 489,\n    \"infraction\": 0,\n    \"total\": 589\n}"
				}
			]
		},
		{
			"name": "Dominique login Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "38eecbf2-a971-4066-8fdd-6806f22e249f",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"Dominique\",\n    \"hashedPassword\": \"hashed_password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/authentication/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"authentication",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Infraction (wrong zone)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "41fd774d-13b1-4d36-acf8-b4bc1ab7aef3",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Code is ZONE_01\", function () {",
							"    pm.expect(pm.response.json()['code']).to.eql('ZONE_01');",
							"});",
							"",
							"pm.test(\"Reason is 'mauvaise zone'\", function () {",
							"    pm.expect(pm.response.json()['reason']).to.eql('mauvaise zone');",
							"});",
							"",
							"pm.test(\"Amount is 55$\", function () {",
							"    pm.expect(pm.response.json()['amount']).to.eql(55);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"passCode\": \"1\",\n    \"parkingZone\": \"{{parkingZone_2}}\",\n    \"licensePlate\": \"123 456\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/infractions",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"infractions"
					]
				}
			},
			"response": [
				{
					"name": "Infraction (wrong zone)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"passCode\": \"1\",\n    \"parkingZone\": \"zone_1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/infractions",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"infractions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:26:38 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "76"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"infractionId\": \"2\",\n    \"code\": \"ZONE_01\",\n    \"reason\": \"mauvaise zone\",\n    \"amount\": 55\n}"
				}
			]
		},
		{
			"name": "Infraction (empty pass code)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "73882fc4-031b-4c3f-b037-9c1c39cc3f30",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Code is VIG_03\", function () {",
							"    pm.expect(pm.response.json()['code']).to.eql('VIG_03');",
							"});",
							"",
							"pm.test(\"Reason is 'pas de vignette'\", function () {",
							"    pm.expect(pm.response.json()['reason']).to.eql('pas de vignette');",
							"});",
							"",
							"pm.test(\"Amount is 55$\", function () {",
							"    pm.expect(pm.response.json()['amount']).to.eql(55);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"passCode\": \"\",\n    \"parkingZone\": \"zone_1\",\n    \"licensePlate\": \"zxc vbn\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/infractions",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"infractions"
					]
				}
			},
			"response": [
				{
					"name": "Infraction (empty pass code)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"passCode\": \"\",\n    \"parkingZone\": \"zone_1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/infractions",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"infractions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:27:07 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "77"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"infractionId\": \"3\",\n    \"code\": \"VIG_03\",\n    \"reason\": \"pas de vignette\",\n    \"amount\": 55\n}"
				}
			]
		},
		{
			"name": "Infraction (invalid pass code)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d5a49950-e16f-42a9-8005-59dae29f1848",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Code is VIG_02\", function () {",
							"    pm.expect(pm.response.json()['code']).to.eql('VIG_02');",
							"});",
							"",
							"pm.test(\"Reason is 'vignette invalide'\", function () {",
							"    pm.expect(pm.response.json()['reason']).to.eql('vignette invalide');",
							"});",
							"",
							"pm.test(\"Amount is 45$\", function () {",
							"    pm.expect(pm.response.json()['amount']).to.eql(45);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"passCode\": \"512983798\",\n    \"parkingZone\": \"zone_1\",\n    \"licensePlate\": \"asd fgh\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/infractions",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"infractions"
					]
				}
			},
			"response": [
				{
					"name": "Infraction (invalid pass code)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"passCode\": \"5\",\n    \"parkingZone\": \"zone_1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/infractions",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"infractions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:27:37 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "79"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"infractionId\": \"4\",\n    \"code\": \"VIG_02\",\n    \"reason\": \"vignette invalide\",\n    \"amount\": 45\n}"
				}
			]
		},
		{
			"name": "Pay infraction",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1f25e190-feb4-49d3-9867-48d0ba0f143f",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"body is empty\", function () {",
							"    pm.expect(pm.response.body).to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"infractionId\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/infractions/pay",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"infractions",
						"pay"
					]
				}
			},
			"response": [
				{
					"name": "Pay infraction",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"infractionId\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/infractions/pay",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"infractions",
								"pay"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:22:35 GMT"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "0"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Re-pay infraction again",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3f40815b-b1c6-48eb-87b9-e290a8baced0",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"error is 'ALREADY_PAID_INFRACTION'\", function () {",
							"    pm.expect(pm.response.json()['error']).to.eql('ALREADY_PAID_INFRACTION')",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"infractionId\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/infractions/pay",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"infractions",
						"pay"
					]
				}
			},
			"response": [
				{
					"name": "Re-pay infraction again",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"infractionId\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/infractions/pay",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"infractions",
								"pay"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:21:10 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "90"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"ALREADY_PAID_INFRACTION\",\n    \"description\": \"Cette infraction a déjà été payée\"\n}"
				}
			]
		},
		{
			"name": "Karine login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bd92771f-1164-4959-926e-c009b97551e3",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"Karine\",\n    \"hashedPassword\": \"hashed_password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/authentication/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"authentication",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create initiative",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "65443409-ac3a-4d34-95eb-607b22618de8",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"name is present\", function () {",
							"    pm.expect(pm.response.json()['name']).not.to.be.empty",
							"})",
							"",
							"pm.test(\"amount is present\", function () {",
							"    pm.expect(pm.response.json()['amount']).not.to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"une initiative\",\n    \"amount\": \"2.50\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/fundraising/initiatives",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"fundraising",
						"initiatives"
					]
				}
			},
			"response": [
				{
					"name": "Create initiative",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"une initiative\",\n    \"amount\": \"2.50\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/fundraising/initiatives",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"fundraising",
								"initiatives"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:28:58 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "48"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"31\",\n    \"name\": \"une initiative\",\n    \"amount\": 2.5\n}"
				}
			]
		},
		{
			"name": "Create initiative (with crazy long decimals amount)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4c015c88-31e2-459e-a622-75bb6d6330af",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"name is present\", function () {",
							"    pm.expect(pm.response.json()['name']).not.to.be.empty",
							"})",
							"",
							"pm.test(\"amount is present\", function () {",
							"    pm.expect(pm.response.json()['amount']).not.to.be.undefined",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"encore une initiative\",\n    \"amount\": 1.05987564532544987568954769845796794576974950876908475968745976945876098745068450986094586098\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/fundraising/initiatives",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"fundraising",
						"initiatives"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create initiative (without name)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b91022bd-058e-4420-bbd6-05fcf6edab37",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"error is 'INVALID_INITIATIVE_NAME'\", function () {",
							"    pm.expect(pm.response.json()['error']).to.eql('INVALID_INITIATIVE_NAME')",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"\",\n    \"amount\": \"15\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/fundraising/initiatives",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"fundraising",
						"initiatives"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create initiative (with too big amount)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c307772f-0e5b-4c4f-81d9-10090c42ded9",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"error is 'INVALID_INITIATIVE_AMOUNT'\", function () {",
							"    pm.expect(pm.response.json()['error']).to.eql('INVALID_INITIATIVE_AMOUNT')",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"encore une initiative\",\n    \"amount\": \"10000000000\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/fundraising/initiatives",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"fundraising",
						"initiatives"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get initiatives",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6501f836-8930-48fa-902c-48fc2da307ab",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"initiatives is not empty\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['initiatives'])).to.be.true",
							"    pm.expect(pm.response.json()['initiatives']).not.to.eql([])",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/fundraising/initiatives",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"fundraising",
						"initiatives"
					]
				}
			},
			"response": [
				{
					"name": "Get initiatives",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/fundraising/initiatives",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"fundraising",
								"initiatives"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:30:31 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "1580"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"initiatives\": [\n        {\n            \"id\": \"1\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"2\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"3\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"4\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"5\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"6\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"7\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"8\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"9\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"10\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"11\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"12\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"13\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"14\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"15\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"16\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"17\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"18\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"19\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"20\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"21\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"22\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"23\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"24\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"25\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"26\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"27\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"28\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"29\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"30\",\n            \"name\": \"SOME_NAME\",\n            \"amount\": 123.34\n        },\n        {\n            \"id\": \"31\",\n            \"name\": \"une initiative\",\n            \"amount\": 2.5\n        },\n        {\n            \"id\": \"32\",\n            \"name\": \"une autre initiative\",\n            \"amount\": 15\n        },\n        {\n            \"id\": \"33\",\n            \"name\": \"encore une initiative\",\n            \"amount\": 1.05\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Deactivate carbon credits auto-tranfer",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "de2bbdb6-b227-4042-828c-7a648fa776d5",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"active is 'false'\", function () {",
							"    pm.expect(pm.response.json()['active']).to.not.be.true",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"active\": \"false\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/carbon-credits/activate",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"carbon-credits",
						"activate"
					]
				}
			},
			"response": [
				{
					"name": "Deactivate carbon credits auto-tranfer",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"active\": \"false\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/carbon-credits/activate",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"carbon-credits",
								"activate"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:25:10 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "16"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"active\": false\n}"
				}
			]
		},
		{
			"name": "Activate carbon credits auto-tranfer",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8a4418a7-c822-46f2-b97d-19945ff41e89",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"active is 'true'\", function () {",
							"    pm.expect(pm.response.json()['active']).to.be.true",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"active\": \"true\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/carbon-credits/activate",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"carbon-credits",
						"activate"
					]
				}
			},
			"response": [
				{
					"name": "Activate carbon credits auto-transfer",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"active\": \"true\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/carbon-credits/activate",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"carbon-credits",
								"activate"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 22:22:20 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "15"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"active\": true\n}"
				}
			]
		},
		{
			"name": "Transfer carbon credits",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "38f29e8b-e29b-466b-8922-767b923777a7",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"amount transferred is not empty\", function () {",
							"    pm.expect(pm.response.json()['transferred']).to.be.greaterThan(0)",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/admin/carbon-credits/transfer",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"admin",
						"carbon-credits",
						"transfer"
					]
				}
			},
			"response": [
				{
					"name": "carbon credit Copy",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/carbon-credits/transfer",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"carbon-credits",
								"transfer"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 24 Oct 2020 18:32:19 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "22"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"transferred\": 238.34\n}"
				},
				{
					"name": "Transfer carbon credits",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/admin/carbon-credits/transfer",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"admin",
								"carbon-credits",
								"transfer"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:25:22 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "21"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"transferred\": 951.2\n}"
				}
			]
		},
		{
			"name": "Re-transfer carbon credits",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1cf4a4f7-cc2e-41d3-8b79-547a32dcf0ac",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"amount transferred is 0\", function () {",
							"    pm.expect(pm.response.json()['transferred']).to.eql(0)",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/admin/carbon-credits/transfer",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"admin",
						"carbon-credits",
						"transfer"
					]
				}
			},
			"response": [
				{
					"name": "Re-transfer carbon credits",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/admin/carbon-credits/transfer",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"admin",
								"carbon-credits",
								"transfer"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:25:47 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "19"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"transferred\": 0\n}"
				}
			]
		},
		{
			"name": "Get total credits transfered",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "568cfd1e-1334-4ab8-a84f-2cd68f6ebf94",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"total is not empty\", function () {",
							"    pm.expect(pm.response.json()['total']).to.be.greaterThan(0)",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/financial-report/spending/carbon-credits",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"financial-report",
						"spending",
						"carbon-credits"
					]
				}
			},
			"response": [
				{
					"name": "Get total credits transfered",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/financial-report/spending/carbon-credits",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"financial-report",
								"spending",
								"carbon-credits"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:26:09 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "15"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"total\": 43.61\n}"
				}
			]
		},
		{
			"name": "Revenue (pass)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "185d37e0-b130-467b-a809-c5b2a7b85bba",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1c5cd82a-ae79-4fba-8e0e-0f1fd90ef013",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'revenue' is more than 0\", function () {",
							"    pm.expect(pm.response.json()['revenue']).to.be.greaterThan(0)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/financial-report/revenue/parking-pass",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"financial-report",
						"revenue",
						"parking-pass"
					]
				}
			},
			"response": [
				{
					"name": "Revenue (pass)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/financial-report/revenue/parking-pass",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"financial-report",
								"revenue",
								"parking-pass"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:52:38 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "17"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"revenue\": 489\n}"
				}
			]
		},
		{
			"name": "Revenue (infractions)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "856224a3-1d1d-4ca0-a4e2-8e591faf3cb9",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'revenue' is more than 0\", function () {",
							"    pm.expect(pm.response.json()['revenue']).to.be.greaterThan(0)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/financial-report/revenue/infractions",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"financial-report",
						"revenue",
						"infractions"
					]
				}
			},
			"response": [
				{
					"name": "Revenue (infractions)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/financial-report/revenue/infractions",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"financial-report",
								"revenue",
								"infractions"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:53:41 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "16"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"revenue\": 52.8\n}"
				}
			]
		},
		{
			"name": "Revenue (campus access)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "850dc49a-df3d-4b2e-9ddc-d510faa77c54",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'byCarType' has entries\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['byCarType']['entry'])).to.be.true",
							"    pm.expect(Array.isArray(pm.response.json()['byCarType']['entry'])).to.not.eql([])",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/financial-report/revenue/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"financial-report",
						"revenue",
						"campus-access"
					]
				}
			},
			"response": [
				{
					"name": "Revenue (campus access)",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/financial-report/revenue/campus-access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"financial-report",
								"revenue",
								"campus-access"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:52:27 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "223"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"byCarType\": {\n        \"entry\": [\n            {\n                \"key\": \"HYBRIDE_ECONOMIQUE\",\n                \"value\": 0\n            },\n            {\n                \"key\": \"SUPER_ECONOMIQUE\",\n                \"value\": 5\n            },\n            {\n                \"key\": \"GOURMANDE\",\n                \"value\": 65\n            },\n            {\n                \"key\": \"ECONOMIQUE\",\n                \"value\": 30\n            },\n            {\n                \"key\": \"SANS_POLLUTION\",\n                \"value\": 0\n            }\n        ]\n    },\n    \"total\": 100\n}"
				}
			]
		},
		{
			"name": "Revenue",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a91d13c2-1003-4835-962c-927a5901b6a8",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'campusAccess' is not empty\", function () {",
							"    pm.expect(pm.response.json()['campusAccess']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'pass' is more than 0\", function () {",
							"    pm.expect(pm.response.json()['pass']).to.be.greaterThan(0)",
							"});",
							"",
							"pm.test(\"'infraction' is more than 0\", function () {",
							"    pm.expect(pm.response.json()['infraction']).to.be.greaterThan(0)",
							"});",
							"",
							"pm.test(\"'total' is more than 0\", function () {",
							"    pm.expect(pm.response.json()['total']).to.be.greaterThan(0)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/financial-report/revenue",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"financial-report",
						"revenue"
					]
				}
			},
			"response": [
				{
					"name": "Revenue",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/financial-report/revenue",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"financial-report",
								"revenue"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:27:14 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "290"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccess\": {\n        \"byCarType\": {\n            \"entry\": [\n                {\n                    \"key\": \"ECONOMIQUE\",\n                    \"value\": 30\n                },\n                {\n                    \"key\": \"GOURMANDE\",\n                    \"value\": 1065\n                },\n                {\n                    \"key\": \"HYBRIDE_ECONOMIQUE\",\n                    \"value\": 0\n                },\n                {\n                    \"key\": \"SUPER_ECONOMIQUE\",\n                    \"value\": 5\n                },\n                {\n                    \"key\": \"SANS_POLLUTION\",\n                    \"value\": 0\n                }\n            ]\n        },\n        \"total\": 1100\n    },\n    \"pass\": 1223,\n    \"infraction\": 22,\n    \"total\": 2345\n}"
				}
			]
		},
		{
			"name": "Create rechargUL card",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0be426e0-1179-4e54-97b1-72df7d301efe",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'credits' is 0\", function () {",
							"    pm.expect(pm.response.json()['credits']).to.eql(0)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/rechargul",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"rechargul"
					]
				}
			},
			"response": [
				{
					"name": "Create rechargUL card",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/rechargul",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"rechargul"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:27:32 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "25"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"11\",\n    \"credits\": 0\n}"
				}
			]
		},
		{
			"name": "Get rechargUL card",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "51ba5f78-82cd-4bdd-a140-f41a776d474c",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'credits' is 0\", function () {",
							"    pm.expect(pm.response.json()['credits']).to.eql(0)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/rechargul/1",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"rechargul",
						"1"
					]
				}
			},
			"response": [
				{
					"name": "Get rechargUL card",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/rechargul/1",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"rechargul",
								"1"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:27:48 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"1\",\n    \"credits\": 0\n}"
				}
			]
		},
		{
			"name": "Get charging points",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "573b8a28-5c86-4298-a465-f094f923bd81",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'chargingPoints' is not empty\", function () {",
							"    pm.expect(Array.isArray(pm.response.json()['chargingPoints'])).to.be.true",
							"    pm.expect(pm.response.json()['chargingPoints']).to.not.eql([])",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points"
					]
				}
			},
			"response": [
				{
					"name": "Get charging points",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:28:03 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "281"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"chargingPoints\": [\n        {\n            \"id\": \"1\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"2\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"3\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"4\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"5\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"6\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"7\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"8\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"9\",\n            \"state\": \"idle\"\n        },\n        {\n            \"id\": \"10\",\n            \"state\": \"idle\"\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Get single charging point",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cbaf4430-c31c-49d3-be63-c6fa022ea1f2",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'state' is idle\", function () {",
							"    pm.expect(pm.response.json()['state']).to.eql(\"idle\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points/1",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points",
						"1"
					]
				}
			},
			"response": [
				{
					"name": "Get single charging point",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points/1",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points",
								"1"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:28:13 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "25"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"1\",\n    \"state\": \"idle\"\n}"
				}
			]
		},
		{
			"name": "Activate charging point (with invalid card)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b9af5621-0840-4485-8b01-cdbd91025f5b",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"'error' is \", function () {",
							"    pm.expect(pm.response.json()['error']).to.eql(\"INVALID_RECHARGUL_CARD_ID\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points/1/activate",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points",
						"1",
						"activate"
					]
				}
			},
			"response": [
				{
					"name": "Activate charging point (with invalid card)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points/1/activate",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points",
								"1",
								"activate"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:28:35 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "87"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"INVALID_RECHARGUL_CARD_ID\",\n    \"description\": \"This rechargUL card id is invalid\"\n}"
				}
			]
		},
		{
			"name": "Activate charging point (with non-existant card)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4adc2970-859e-4dd6-a233-a997a7a273b8",
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"'error' is \", function () {",
							"    pm.expect(pm.response.json()['error']).to.eql(\"RECHARGUL_CARD_NOT_FOUND\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"rechargULCardId\": \"1234234\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points/1/activate",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points",
						"1",
						"activate"
					]
				}
			},
			"response": [
				{
					"name": "Activate charging point (with non-existant card)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rechargULCardId\": \"1234234\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points/1/activate",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points",
								"1",
								"activate"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:28:47 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "87"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"RECHARGUL_CARD_NOT_FOUND\",\n    \"description\": \"This rechargUL card does not exist\"\n}"
				}
			]
		},
		{
			"name": "Activate charging point (with no credits card)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cac8a290-a438-417d-aed8-587715fb7984",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"'error' is \", function () {",
							"    pm.expect(pm.response.json()['error']).to.eql(\"NOT_ENOUGH_CREDITS\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points/1/activate",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points",
						"1",
						"activate"
					]
				}
			},
			"response": [
				{
					"name": "Activate charging point (with no credits card)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points/1/activate",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points",
								"1",
								"activate"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:28:55 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "95"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"NOT_ENOUGH_CREDITS\",\n    \"description\": \"This rechargUL card does not have enough credits\"\n}"
				}
			]
		},
		{
			"name": "Add credits to card (with invalid amount)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e196442c-9521-4d77-83cc-df4f4d710165",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"'error' is INVALID_RECHARGUL_CREDITS\", function () {",
							"    pm.expect(pm.response.json()['error']).to.eql(\"INVALID_RECHARGUL_CREDITS\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"credits\": -1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/rechargul/1/credits",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"rechargul",
						"1",
						"credits"
					]
				}
			},
			"response": [
				{
					"name": "Add credits to card (with invalid amount)",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"credits\": -1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/rechargul/1/credits",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"rechargul",
								"1",
								"credits"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:29:08 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "88"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"INVALID_RECHARGUL_CREDITS\",\n    \"description\": \"Invalid credits for rechargUL card\"\n}"
				}
			]
		},
		{
			"name": "Add credits to card",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e64b2d1b-e22e-4631-a5fe-67a6cb207f37",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'credits' is not 0\", function () {",
							"    pm.expect(pm.response.json()['credits']).to.be.greaterThan(0)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"credits\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/rechargul/1/credits",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"rechargul",
						"1",
						"credits"
					]
				}
			},
			"response": [
				{
					"name": "Add credits to card",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"credits\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/rechargul/1/credits",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"rechargul",
								"1",
								"credits"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:29:26 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"1\",\n    \"credits\": 1\n}"
				}
			]
		},
		{
			"name": "Activate charging point",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "163c8641-351d-4528-b1df-4530d083b4c7",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'state' is activated\", function () {",
							"    pm.expect(pm.response.json()['state']).to.eql(\"activated\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points/1/activate",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points",
						"1",
						"activate"
					]
				}
			},
			"response": [
				{
					"name": "Activate charging point",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points/1/activate",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points",
								"1",
								"activate"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:29:37 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "30"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"1\",\n    \"state\": \"activated\"\n}"
				}
			]
		},
		{
			"name": "Connect charging point",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e3395eae-9932-4ea2-beb4-39f4d2329d59",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'state' is charging\", function () {",
							"    pm.expect(pm.response.json()['state']).to.eql(\"charging\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points/1/connect",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points",
						"1",
						"connect"
					]
				}
			},
			"response": [
				{
					"name": "Connect charging point",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points/1/connect",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points",
								"1",
								"connect"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:29:57 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "29"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"1\",\n    \"state\": \"charging\"\n}"
				}
			]
		},
		{
			"name": "Disconnect charging point",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9b49d0de-5f7e-48ab-9df9-d832aebf6b22",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'state' is activated\", function () {",
							"    pm.expect(pm.response.json()['state']).to.eql(\"activated\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points/1/disconnect",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points",
						"1",
						"disconnect"
					]
				}
			},
			"response": [
				{
					"name": "Disconnect charging point",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points/1/disconnect",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points",
								"1",
								"disconnect"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:30:09 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "30"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"1\",\n    \"state\": \"activated\"\n}"
				}
			]
		},
		{
			"name": "Deactivate charging point",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "be875da3-a36f-476d-a77c-c748b308460a",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'state' is idle\", function () {",
							"    pm.expect(pm.response.json()['state']).to.eql(\"idle\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/charging-points/1/deactivate",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"charging-points",
						"1",
						"deactivate"
					]
				}
			},
			"response": [
				{
					"name": "Deactivate charging point",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rechargULCardId\": \"1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/charging-points/1/deactivate",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"charging-points",
								"1",
								"deactivate"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 19 Nov 2020 01:30:22 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "25"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"1\",\n    \"state\": \"idle\"\n}"
				}
			]
		},
		{
			"name": "Get rechargUL card (after debited)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9441fc8e-5c6a-40a3-8b63-d7fb4e45038d",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"'id' is not empty\", function () {",
							"    pm.expect(pm.response.json()['id']).to.not.be.empty",
							"});",
							"",
							"pm.test(\"'credits' is 0\", function () {",
							"    pm.expect(pm.response.json()['credits']).to.eql(0)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "127.0.0.1:8080/api/rechargul/1",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"rechargul",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "wrong username login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "565360fd-0cd0-44cb-bccc-e306ead58ca1",
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"user\",\n    \"hashedPassword\": \"hashed_password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/authentication/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"authentication",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "wrong password login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "523658f9-cbe1-4dfe-945c-0d79397a4606",
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"Karine\",\n    \"hashedPassword\": \"wrong password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/authentication/login",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"authentication",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "register user with id 6",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7e759ec8-109e-43ea-97f2-a5f1541f7de3",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Campus access code is present\", function () {",
							"    pm.expect(pm.response.json()['userId']).not.to.be.empty",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "1ff97992-d6b5-48a8-ad40-9dd2485d1c35",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Bob Ross\",\n    \"birthDate\": \"1991-07-10\",\n    \"gender\": \"MaLe\",\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licensePlate\": \"xxx xxx\"\n    }\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/users",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": [
				{
					"name": "Buy campus access",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user\": {\n\t    \"name\": \"Bob Ross\",\n\t    \"birthDate\": \"1991-07-10\",\n\t    \"gender\": \"MaLe\"\n    },\n    \"car\" : {\n        \"type\": \"economique\",\n        \"brand\": \"toyota\",\n        \"model\": \"corolla\",\n        \"year\": \"2020\",\n        \"licencePlate\": \"xxx xxx\"\n    },\n    \"period\": {\n        \"type\": \"single_day_per_week_per_semester\",\n        \"semester\": \"a2020\",\n        \"dayOfWeek\": \"monday\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/api/campus-access",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"api",
								"campus-access"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sun, 25 Oct 2020 21:50:55 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Access-Control-Allow-Methods",
							"value": "GET, POST, DELETE, PUT"
						},
						{
							"key": "Access-Control-Allow-Headers",
							"value": "X-Requested-With, Content-Type"
						},
						{
							"key": "Content-Length",
							"value": "24"
						},
						{
							"key": "Server",
							"value": "Jetty(9.3.24.v20180605)"
						}
					],
					"cookie": [],
					"body": "{\n    \"campusAccessCode\": \"1\"\n}"
				}
			]
		},
		{
			"name": "Valid CampusAccess purchase",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5d6c31a4-4e8c-4dfd-9350-6fa2e4fad0e2",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userId\": \"6\",\r\n    \"period\": {\r\n        \"type\": \"hourly\",\r\n        \"numberOfHours\": \"1\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid CampussAccess purchase (neg hours)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7513f0a7-a3ee-4a40-86a2-fa90ae83eced",
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Error is 'ACCESS_NOT_FOUND'\", function () {\r",
							"    pm.expect(pm.response.json()['error']).to.eql('INVALID_PERIOD_FORMAT')\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": {\r\n\t    \"name\": \"Bob Ross\",\r\n\t    \"birthDate\": \"1991-07-10\",\r\n\t    \"gender\": \"MaLe\"\r\n    },\r\n    \"car\" : {\r\n        \"type\": \"gourmande\",\r\n        \"brand\": \"toyota\",\r\n        \"model\": \"corolla\",\r\n        \"year\": \"2020\",\r\n        \"licensePlate\": \"123 456\"\r\n    },\r\n    \"period\": {\r\n        \"type\": \"hourly\",\r\n        \"numberOfHours\": \"-1\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid CampusAccess purchase (more than 23 hours)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "15243842-0523-475e-8c2e-78b0f3011edd",
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Error is 'ACCESS_NOT_FOUND'\", function () {\r",
							"    pm.expect(pm.response.json()['error']).to.eql('INVALID_PERIOD_FORMAT')\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"user\": {\r\n\t    \"name\": \"Bob Ross\",\r\n\t    \"birthDate\": \"1991-07-10\",\r\n\t    \"gender\": \"MaLe\"\r\n    },\r\n    \"car\" : {\r\n        \"type\": \"gourmande\",\r\n        \"brand\": \"toyota\",\r\n        \"model\": \"corolla\",\r\n        \"year\": \"2020\",\r\n        \"licensePlate\": \"123 456\"\r\n    },\r\n    \"period\": {\r\n        \"type\": \"hourly\",\r\n        \"numberOfHours\": \"24\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "127.0.0.1:8080/api/campus-access",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"campus-access"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"id": "32dae150-a579-4fe7-94dc-037bc5a6ecdc",
			"key": "parkingZone",
			"value": "ZonE_3"
		},
		{
			"id": "55f52042-a4f5-4cf3-87a8-dccae66182d6",
			"key": "parkingZone_2",
			"value": "zONe_2"
		},
		{
			"id": "c3e471ab-e465-4f79-9b2b-c7d0145eaa01",
			"key": "today",
			"value": "2020-11-20"
		},
		{
			"id": "812f4186-279c-4651-951b-7ec286a32073",
			"key": "tomorrow",
			"value": "2020-11-21"
		},
		{
			"id": "7cf144e7-0460-4bb7-97f2-d26cd05af622",
			"key": "weekday",
			"value": "friday"
		},
		{
			"id": "116eab2a-a658-4233-bdf0-97da974d6845",
			"key": "yesterday",
			"value": "2020-11-19"
		}
	],
	"protocolProfileBehavior": {}
}